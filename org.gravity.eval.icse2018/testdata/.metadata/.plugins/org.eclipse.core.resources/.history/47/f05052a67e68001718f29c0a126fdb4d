/*
LICENSE:
                                                                 
   This program is free software; you can redistribute it and/or modify  
   it under the terms of the GNU General Public License as published by  
   the Free Software Foundation; either version 2 of the License, or     
   (at your option) any later version.                                   
                                                                         
   Copyright (C) 2004, GanttProject Development Team
 */
package net.sourceforge.ganttproject.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;

import net.sourceforge.ganttproject.task.Task;

/**
 * Created by IntelliJ IDEA.
 * User: bard
 */
public class UIConfiguration {
    private final Font myMenuFont;
    private final Font myChartMainFont;
    private Color myTaskColor;
	private Color myResColor; //default resource color
    private Color myResOverColor; //overload resoure color
    private boolean isRedlineOn;

    public UIConfiguration(Font menuFont, Font chartMainFont, Color taskColor, boolean isRedlineOn) {
        myMenuFont = menuFont==null ? new Font("Dialog", Font.PLAIN, 12) : menuFont;
        myChartMainFont = chartMainFont==null ? new Font("SansSerif", Font.PLAIN, 9) : chartMainFont;
        this.isRedlineOn = isRedlineOn;
        setTaskColor(taskColor);
		myResColor = new Color(140, 182, 206);
        myResOverColor = new Color(229,50,50);
    }


    public Font getMenuFont(){
        return myMenuFont;
    }

    public Font getChartMainFont() {
        return myChartMainFont;
    }

    public Color getTaskColor() {
        return myTaskColor;
    }

    public void setTaskColor(Color myTaskColor) {
        this.myTaskColor = myTaskColor;
    }
    
    public Color getResourceColor() {
        return myResColor;
    }

    public void setResourceColor(Color myResColor) {
        this.myResColor = myResColor;
    }
    
    
    public Color getResourceOverloadColor() {
        return myResOverColor;
    }

    public void setResourceOverloadColor(Color myResOverColor) {
        this.myResOverColor = myResOverColor;		
    }

    public boolean isRedlineOn() {
        return isRedlineOn;
    }

    public void setRedlineOn(boolean redlineOn) {
        isRedlineOn = redlineOn;
    }


	/** Print the list of tasks */
	private void printTasks(Graphics g){
		g.setColor(Color.white);
		g.fillRect(0, 0, getWidth(), getHeight());
	
		g.setColor(Color.black);
		g.setFont(myUIConfiguration.getChartMainFont());
		
		printTask(g,5,42,getTree().getAllChildTask(getTree().getRoot()));
		
	}


	/** Draw a monther task */
	  public void paintATaskFather(Graphics g, int x1, int x2, int y, Task task) {
	    int d = y;
	    y = y * 20 + 35 - margY;
	
	    if (y < 20 || y > getHeight()) {
	      return; //Not draw if the task is not on the area
	    }
	    if ( (x1 > getWidth() && x2 > getWidth()) || (x1 < 0 && x2 < 0)) {
	      return;
	    }
	
	    //Black rectangle
	    if (drag == d - 1) {
	      g.setColor(arrayColor[4]);
	    }
	    else {
	      if (task.getColor().equals(myUIConfiguration.getTaskColor())) {
	        g.setColor(Color.black);
	      }
	      else {
	        g.setColor( /*Color.black*/task.getColor());
	      }
	    }
	    g.fillRect(x1, y, x2 - x1, 2);
	
	    //Little triangle at begin and end
	    int xPoints[] = new int[3];
	    int yPoints[] = new int[3];
	    xPoints[0] = x1;
	    xPoints[1] = x1 + 5;
	    xPoints[2] = x1;
	    yPoints[0] = y + 2;
	    yPoints[1] = y + 2;
	    yPoints[2] = y + 6;
	    g.fillPolygon(xPoints, yPoints, 3);
	    xPoints[0] = x2;
	    xPoints[1] = x2 - 5;
	    xPoints[2] = x2;
	    g.fillPolygon(xPoints, yPoints, 3);
	
	    //Draw the resource list after the task
			paintResources (x2+40, y+9, task, g);
	
	  }

}

package tests.net.sf.jabref.util;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import net.sf.jabref.util.XMPSchemaBibtex;

import org.jempbox.impl.XMLUtil;
import org.jempbox.xmp.XMPMetadata;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import tests.net.sf.jabref.JabRefTestCase;

public class XMPSchemaBibtexTest extends JabRefTestCase {

	protected void setUp() throws Exception {
		super.setUp();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	public void testXMPSchemaBibtexElement()
		throws ParserConfigurationException {
		DocumentBuilderFactory builderFactory = DocumentBuilderFactory
			.newInstance();
		DocumentBuilder builder = builderFactory.newDocumentBuilder();
		Element e = builder.newDocument().createElement("rdf:Description");

		XMPSchemaBibtex bibtex = new XMPSchemaBibtex(e, "bibtex");

		assertEquals(e, bibtex.getElement());
		assertEquals("rdf:Description", bibtex.getElement().getTagName());
	}

	public void testGetSetPersonList() throws IOException {
		XMPMetadata xmp = new XMPMetadata();
		XMPSchemaBibtex bibtex = new XMPSchemaBibtex(xmp);

		bibtex.setPersonList("author", "Tom DeMarco and Kent Beck");

		Element e = bibtex.getElement();

		NodeList l1 = e.getElementsByTagName("bibtex:author");
		assertEquals(1, l1.getLength());

		NodeList l = e.getElementsByTagName("rdf:li");

		assertEquals(2, l.getLength());

		assertEquals("Tom DeMarco", XMLUtil
			.getStringValue(((Element) l.item(0))));
		assertEquals("Kent Beck", XMLUtil.getStringValue(((Element) l.item(1))));

		List<String> authors = bibtex.getPersonList("author");
		assertEquals(2, authors.size());

		assertEquals("Tom DeMarco", authors.get(0));
		assertEquals("Kent Beck", authors.get(1));
	}

	public void testSetRemoveGetSequenceDateListString() {
		// We don't use this...
	}

	public void testGetAllProperties() throws IOException {
		XMPMetadata xmp = new XMPMetadata();
		XMPSchemaBibtex bibtex = new XMPSchemaBibtex(xmp);

		bibtex.setTextProperty("title", "BlaBla Ta Ta\nHello World");
		bibtex.setTextProperty("abstract", "BlaBla Ta Ta\nHello World");
		bibtex.setTextProperty("review", "BlaBla Ta Ta\nHello World");
		bibtex.setTextProperty("note", "BlaBla Ta Ta\nHello World");
		bibtex.setPersonList("author", "Mouse, Mickey and Bond, James");

		Map<String, String> s = XMPSchemaBibtex.getAllProperties(bibtex,
			"bibtex");

		assertEquals(5, s.size());
		assertTrue(s.containsKey("title"));
		assertTrue(s.containsKey("author"));

		assertEquals("BlaBla Ta Ta Hello World", s.get("title"));
		assertEquals("BlaBla Ta Ta\nHello World", s.get("abstract"));
		assertEquals("BlaBla Ta Ta\nHello World", s.get("review"));
		assertEquals("BlaBla Ta Ta\nHello World", s.get("note"));
		assertEquals("Mickey Mouse and James Bond", s.get("author"));
	}

}

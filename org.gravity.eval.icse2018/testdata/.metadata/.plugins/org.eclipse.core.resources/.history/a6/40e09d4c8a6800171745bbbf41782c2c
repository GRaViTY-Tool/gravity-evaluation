package edu.ncsu.csc.itrust.unit.action;

import java.util.List;

import org.junit.Test;

import edu.ncsu.csc.itrust.action.AddFoodEntryAction;
import edu.ncsu.csc.itrust.action.EditFoodEntryAction;
import edu.ncsu.csc.itrust.action.ViewFoodEntryAction;
import edu.ncsu.csc.itrust.beans.FoodEntryBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.ITrustException;
import edu.ncsu.csc.itrust.unit.datagenerators.TestDataGenerator;
import edu.ncsu.csc.itrust.unit.testutils.EvilDAOFactory;
import edu.ncsu.csc.itrust.unit.testutils.TestDAOFactory;
import junit.framework.TestCase;

/**
 * Tests different abilites for editing a food entry.
 *
 */
public class EditFoodEntryActionTest extends TestCase {
	
	private EditFoodEntryAction action;
	private ViewFoodEntryAction viewAction;
	private DAOFactory factory = TestDAOFactory.getTestInstance();
	private TestDataGenerator gen;
	private FoodEntryBean foodBean;
	private AddFoodEntryAction addAction;
	
	/**
	 * Clears all of the tables.
	 */
	protected void tearDown() throws Exception {
		gen.clearAllTables();
	}
	
	/**
	 * Tests that nothing happens when a user tries to udpate
	 * a nonexistent food entry. Derek Morgan (333) has no entries.
	 */
	@Test
	public void testEditNoEntry() {
		action = new EditFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		try {
			foodBean.setEntryID(100);
			assertEquals(0, action.editEntry(foodBean));
		} catch (ITrustException e) {
			fail(e.getMessage());
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}
	
	/**
	 * Tests that a user can edit his own food entries.
	 */
	@Test
	public void testEditExistingEntry() {
		action = new EditFoodEntryAction(factory, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			List<FoodEntryBean> foodDiary = viewAction.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean firstEntry = foodDiary.get(0);
			assertEquals("Breakfast", firstEntry.getMealType().toString());
			firstEntry.setMealType("Dinner");
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(1, numUpdated);
			assertEquals(2, viewAction.getDiary(334).size());
			firstEntry = viewAction.getDiary(334).get(0);
			assertEquals("Dinner", firstEntry.getMealType().toString());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
		
	}
	
	/**
	 * Test with an evil factory
	 */
	@Test
	public void testEvilFactory() {
		EvilDAOFactory evil = new EvilDAOFactory(0);
		action = new EditFoodEntryAction(evil, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			FoodEntryBean bean = viewAction.getDiary(334).get(0);
			bean.setCalories(100.0);
			action.editEntry(bean);
			fail("Using evil factory. Should have failed");
		} catch (ITrustException e) {
			assertTrue(e.getMessage().contains("Error updating entry from "
					+ "Food Diary"));
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}
	

}

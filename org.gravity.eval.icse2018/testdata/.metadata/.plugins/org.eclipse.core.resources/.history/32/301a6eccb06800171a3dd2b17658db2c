package tests.net.sf.jabref;

import junit.framework.TestCase;
import net.sf.jabref.AuthorList;

/**
 * 
 * @see net.sf.jabref.AuthorList Class tested.
 * 
 * @author Christopher Oezbek <oezi@oezi.de>
 * 
 * @version 0.1 - Still fails for stuff in AuthorList that is ambiguous
 */
public class AuthorListTest extends TestCase {

	public void testFixAuthor_firstNameFirstCommas() {

		{ // No Commas
			assertEquals("", AuthorList.fixAuthor_firstNameFirstCommas("", true, false));
			assertEquals("", AuthorList.fixAuthor_firstNameFirstCommas("", false, false));

			assertEquals("John Smith", AuthorList.fixAuthor_firstNameFirstCommas("John Smith",
				false, false));
			assertEquals("J. Smith", AuthorList.fixAuthor_firstNameFirstCommas("John Smith", true,
				false));

			// Check caching
			assertTrue(AuthorList.fixAuthor_firstNameFirstCommas(
				"John von Neumann and John Smith and Black Brown, Peter", true, false) == AuthorList
				.fixAuthor_firstNameFirstCommas("John von Neumann" + (0 == 1 ? "" : " and ")
					+ "John Smith and Black Brown, Peter", true, false));

			assertEquals("John Smith and Peter Black Brown", AuthorList
				.fixAuthor_firstNameFirstCommas("John Smith and Black Brown, Peter", false, false));
			assertEquals("J. Smith and P. Black Brown", AuthorList.fixAuthor_firstNameFirstCommas(
				"John Smith and Black Brown, Peter", true, false));

			// Method description is different than code -> additional comma
			// there
			assertEquals("John von Neumann, John Smith and Peter Black Brown", AuthorList
				.fixAuthor_firstNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", false, false));
			assertEquals("J. von Neumann, J. Smith and P. Black Brown", AuthorList
				.fixAuthor_firstNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", true, false));

			assertEquals("J. P. von Neumann", AuthorList.fixAuthor_firstNameFirstCommas(
				"John Peter von Neumann", true, false));
		}
		{ // Oxford Commas
			assertEquals("", AuthorList.fixAuthor_firstNameFirstCommas("", true, true));
			assertEquals("", AuthorList.fixAuthor_firstNameFirstCommas("", false, true));

			assertEquals("John Smith", AuthorList.fixAuthor_firstNameFirstCommas("John Smith",
				false, true));
			assertEquals("J. Smith", AuthorList.fixAuthor_firstNameFirstCommas("John Smith", true,
				true));

			// Check caching
			assertTrue(AuthorList.fixAuthor_firstNameFirstCommas(
				"John von Neumann and John Smith and Black Brown, Peter", true, true) == AuthorList
				.fixAuthor_firstNameFirstCommas("John von Neumann" + (0 == 1 ? "" : " and ")
					+ "John Smith and Black Brown, Peter", true, true));

			assertEquals("John Smith and Peter Black Brown", AuthorList
				.fixAuthor_firstNameFirstCommas("John Smith and Black Brown, Peter", false, true));
			assertEquals("J. Smith and P. Black Brown", AuthorList.fixAuthor_firstNameFirstCommas(
				"John Smith and Black Brown, Peter", true, true));

			// Method description is different than code -> additional comma
			// there
			assertEquals("John von Neumann, John Smith, and Peter Black Brown", AuthorList
				.fixAuthor_firstNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", false, true));
			assertEquals("J. von Neumann, J. Smith, and P. Black Brown", AuthorList
				.fixAuthor_firstNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", true, true));

			assertEquals("J. P. von Neumann", AuthorList.fixAuthor_firstNameFirstCommas(
				"John Peter von Neumann", true, true));

		}
	}

	public void testFixAuthor_firstNameFirst() {
		assertEquals("John Smith", AuthorList.fixAuthor_firstNameFirst("John Smith"));

		assertEquals("John Smith and Peter Black Brown", AuthorList
			.fixAuthor_firstNameFirst("John Smith and Black Brown, Peter"));

		assertEquals("John von Neumann and John Smith and Peter Black Brown", AuthorList
			.fixAuthor_firstNameFirst("John von Neumann and John Smith and Black Brown, Peter"));

		assertEquals("First von Last, Jr. III", AuthorList
			.fixAuthor_firstNameFirst("von Last, Jr. III, First"));

		// Check caching
		assertTrue(AuthorList
			.fixAuthor_firstNameFirst("John von Neumann and John Smith and Black Brown, Peter") == AuthorList
			.fixAuthor_firstNameFirst("John von Neumann" + (0 == 1 ? "" : " and ")
				+ "John Smith and Black Brown, Peter"));

	}

	public void testFixAuthor_lastNameFirstCommas() {

		{ // No commas before and
			assertEquals("", AuthorList.fixAuthor_lastNameFirstCommas("", true, false));
			assertEquals("", AuthorList.fixAuthor_lastNameFirstCommas("", false, false));

			assertEquals("Smith, John", AuthorList.fixAuthor_lastNameFirstCommas("John Smith",
				false, false));
			assertEquals("Smith, J.", AuthorList.fixAuthor_lastNameFirstCommas("John Smith", true,
				false));

			String a = AuthorList.fixAuthor_lastNameFirstCommas(
				"John von Neumann and John Smith and Black Brown, Peter", true, false);
			String b = AuthorList.fixAuthor_lastNameFirstCommas("John von Neumann"
				+ (0 == 1 ? "" : " and ") + "John Smith and Black Brown, Peter", true, false);

			// Check caching
			assertEquals(a, b);
			assertTrue(a == b);

			assertEquals("Smith, John and Black Brown, Peter", AuthorList
				.fixAuthor_lastNameFirstCommas("John Smith and Black Brown, Peter", false, false));
			assertEquals("Smith, J. and Black Brown, P.", AuthorList.fixAuthor_lastNameFirstCommas(
				"John Smith and Black Brown, Peter", true, false));

			assertEquals("von Neumann, John, Smith, John and Black Brown, Peter", AuthorList
				.fixAuthor_lastNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", false, false));
			assertEquals("von Neumann, J., Smith, J. and Black Brown, P.", AuthorList
				.fixAuthor_lastNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", true, false));

			assertEquals("von Neumann, J. P.", AuthorList.fixAuthor_lastNameFirstCommas(
				"John Peter von Neumann", true, false));
		}
		{ // Oxford Commas
			assertEquals("", AuthorList.fixAuthor_lastNameFirstCommas("", true, true));
			assertEquals("", AuthorList.fixAuthor_lastNameFirstCommas("", false, true));

			assertEquals("Smith, John", AuthorList.fixAuthor_lastNameFirstCommas("John Smith",
				false, true));
			assertEquals("Smith, J.", AuthorList.fixAuthor_lastNameFirstCommas("John Smith", true,
				true));

			String a = AuthorList.fixAuthor_lastNameFirstCommas(
				"John von Neumann and John Smith and Black Brown, Peter", true, true);
			String b = AuthorList.fixAuthor_lastNameFirstCommas("John von Neumann"
				+ (0 == 1 ? "" : " and ") + "John Smith and Black Brown, Peter", true, true);

			// Check caching
			assertEquals(a, b);
			assertTrue(a == b);

			assertEquals("Smith, John and Black Brown, Peter", AuthorList
				.fixAuthor_lastNameFirstCommas("John Smith and Black Brown, Peter", false, true));
			assertEquals("Smith, J. and Black Brown, P.", AuthorList.fixAuthor_lastNameFirstCommas(
				"John Smith and Black Brown, Peter", true, true));

			assertEquals("von Neumann, John, Smith, John, and Black Brown, Peter", AuthorList
				.fixAuthor_lastNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", false, true));
			assertEquals("von Neumann, J., Smith, J., and Black Brown, P.", AuthorList
				.fixAuthor_lastNameFirstCommas(
					"John von Neumann and John Smith and Black Brown, Peter", true, true));

			assertEquals("von Neumann, J. P.", AuthorList.fixAuthor_lastNameFirstCommas(
				"John Peter von Neumann", true, true));
		}
	}

	public void testSize() {

		assertEquals(0, size(""));
		assertEquals(1, size("Bar"));
		assertEquals(1, size("Foo Bar"));
		assertEquals(1, size("Foo von Bar"));
		assertEquals(1, size("von Bar, Foo"));
		assertEquals(1, size("Bar, Foo"));
		assertEquals(1, size("Bar, Jr., Foo"));
		assertEquals(1, size("Bar, Foo"));
		assertEquals(2, size("John Neumann and Foo Bar"));
		assertEquals(2, size("John von Neumann and Bar, Jr, Foo"));

		assertEquals(3, size("John von Neumann and John Smith and Black Brown, Peter"));

		String s = "John von Neumann";
		for (int i = 0; i < 25; i++) {
			assertEquals(i + 1, size(s));
			s += " and Albert Einstein";
		}
	}

	public void testGetAuthorsFirstFirst() {

		AuthorList al;

		al = AuthorList.getAuthorList("");
		assertEquals("", al.getAuthorsFirstFirst(true, false));
		assertEquals("", al.getAuthorsFirstFirst(false, false));
		assertEquals("", al.getAuthorsFirstFirst(true, true));
		assertEquals("", al.getAuthorsFirstFirst(false, true));

		al = AuthorList.getAuthorList("John Smith");
		assertEquals("John Smith", al.getAuthorsFirstFirst(false, false));
		assertEquals("J. Smith", al.getAuthorsFirstFirst(true, false));
		assertEquals("John Smith", al.getAuthorsFirstFirst(false, true));
		assertEquals("J. Smith", al.getAuthorsFirstFirst(true, true));

		al = AuthorList.getAuthorList("John Smith and Black Brown, Peter");
		assertEquals("John Smith and Peter Black Brown", al.getAuthorsFirstFirst(false, false));
		assertEquals("J. Smith and P. Black Brown", al.getAuthorsFirstFirst(true, false));
		assertEquals("John Smith and Peter Black Brown", al.getAuthorsFirstFirst(false, true));
		assertEquals("J. Smith and P. Black Brown", al.getAuthorsFirstFirst(true, true));

		al = AuthorList.getAuthorList("John von Neumann and John Smith and Black Brown, Peter");
		assertEquals("John von Neumann, John Smith and Peter Black Brown", al.getAuthorsFirstFirst(
			false, false));
		assertEquals("J. von Neumann, J. Smith and P. Black Brown", al.getAuthorsFirstFirst(true,
			false));
		assertEquals("John von Neumann, John Smith, and Peter Black Brown", al
			.getAuthorsFirstFirst(false, true));
		assertEquals("J. von Neumann, J. Smith, and P. Black Brown", al.getAuthorsFirstFirst(true,
			true));

		al = AuthorList.getAuthorList("John Peter von Neumann");
		assertEquals("John Peter von Neumann", al.getAuthorsFirstFirst(false, false));
		assertEquals("John Peter von Neumann", al.getAuthorsFirstFirst(false, true));
		assertEquals("J. P. von Neumann", al.getAuthorsFirstFirst(true, false));
		assertEquals("J. P. von Neumann", al.getAuthorsFirstFirst(true, true));
	}

}

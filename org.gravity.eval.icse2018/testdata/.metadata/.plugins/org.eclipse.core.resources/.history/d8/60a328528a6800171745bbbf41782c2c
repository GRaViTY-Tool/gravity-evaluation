package edu.ncsu.csc.itrust.exception;

import java.util.List;

import org.junit.Test;

import edu.ncsu.csc.itrust.action.AddExerciseEntryAction;
import edu.ncsu.csc.itrust.action.AddFoodEntryAction;
import edu.ncsu.csc.itrust.action.AddSleepEntryAction;
import edu.ncsu.csc.itrust.action.EditExerciseEntryAction;
import edu.ncsu.csc.itrust.action.EditFoodEntryAction;
import edu.ncsu.csc.itrust.action.EditPatientAction;
import edu.ncsu.csc.itrust.action.EditSleepEntryAction;
import edu.ncsu.csc.itrust.action.ViewExerciseEntryAction;
import edu.ncsu.csc.itrust.action.ViewFoodEntryAction;
import edu.ncsu.csc.itrust.action.ViewSleepEntryAction;
import edu.ncsu.csc.itrust.beans.ExerciseEntryBean;
import edu.ncsu.csc.itrust.beans.FoodEntryBean;
import edu.ncsu.csc.itrust.beans.SleepEntryBean;
import edu.ncsu.csc.itrust.unit.testutils.EvilDAOFactory;

/**
 * A specialized exception class for displaying iTrust error messages.
 * This exception is handled by the default iTrust exception handler.
 */
public class ITrustException extends Exception {
	private static final long serialVersionUID = 1L;
	String message = null;

	/**
	 * The typical constructor.
	 * @param message A message to be displayed to the screen.
	 */
	public ITrustException(String message) {
		this.message = message;
	}

	/**
	 * For messages which are displayed to the user. Usually, this is a very general message for security
	 * reasons.
	 */
	@Override
	public String getMessage() {
		if (message == null)
			return "An error has occurred. Please see log for details.";
		return message;
	}

	
	/**
	 * For exceptions which show a lot of technical detail, usually delegated to a subclass
	 * 
	 * @return
	 */
	public String getExtendedMessage() {
		return "No extended information.";
	}

	/**
	 * Ensures HCPs with specialty of nutritionist can still view a food diary
	 * even when the food diary is empty.
	 */
	@Test
	public void testViewingEmptyFoodDiaryAsHCP() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			List<FoodEntryBean> foodDiary = action.getDiary(333);
			assertEquals(0, foodDiary.size());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test that a patient can view his food diary.
	 */
	@Test
	public void testViewingFoodDiaryAsPatient() {
		action = new ViewFoodEntryAction(factory, 334);
		try {
			List<FoodEntryBean> foodDiary = action.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean entry1 = foodDiary.get(0);
			FoodEntryBean entry2 = foodDiary.get(1);
			//now that we know we have 2 of them, 
			//make sure they are the right ones
			assertEquals("09/30/2012", entry1.getDateEatenStr().toString());
			assertEquals("Breakfast", entry1.getMealType().name());
			assertEquals("Hot dog", entry1.getFood());
			assertEquals(4.0, entry1.getServings(), .001);
			assertEquals(80.0, entry1.getCalories(), .001);
			assertEquals(5.0, entry1.getFatGrams(), .001);
			assertEquals(480.0, entry1.getMilligramsSodium(), .001);
			assertEquals(2.0, entry1.getCarbGrams(), .001);
			assertEquals(0.0, entry1.getFiberGrams(), .001);
			assertEquals(0.0, entry1.getSugarGrams(), .001);
			assertEquals(5.0, entry1.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			assertEquals("09/30/2012", entry2.getDateEatenStr().toString());
			assertEquals("Lunch", entry2.getMealType().name());
			assertEquals("Mango Passionfruit Juice", entry2.getFood());
			assertEquals(1.2, entry2.getServings(), .001);
			assertEquals(130.0, entry2.getCalories(), .001);
			assertEquals(0.0, entry2.getFatGrams(), .001);
			assertEquals(25.0, entry2.getMilligramsSodium(), .001);
			assertEquals(32.0, entry2.getCarbGrams(), .001);
			assertEquals(0.0, entry2.getFiberGrams(), .001);
			assertEquals(29.0, entry2.getSugarGrams(), .001);
			assertEquals(1.0, entry2.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			//now check the totals
			List<FoodEntryBean> totals = action.getDiaryTotals(334);
			assertEquals(1, totals.size());
			FoodEntryBean total = totals.get(0);
			assertEquals(476.0, total.getCalories(), .001);
			assertEquals(20.0, total.getFatGrams(), .001);
			assertEquals(1950.0, total.getMilligramsSodium(), .001);
			assertEquals(46.4, total.getCarbGrams(), .001);
			assertEquals(0.0, total.getFiberGrams(), .001);
			assertEquals(34.8, total.getSugarGrams(), .001);
			assertEquals(21.2, total.getProteinGrams(), .001);
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test with evil factory
	 */
	@Test
	public void testEvilFactoryGetDiaryTotals() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new ViewFoodEntryAction(evil, 1);
		try {
			action.getDiaryTotals(1);
			fail("Working with evil factory");
		} catch (ITrustException d) {
			assertEquals("Error retrieving Food Diary", d.getMessage());
		}
	}

	/**
	 * Ensures a patient can still view his food diary even when it is empty.
	 */
	@Test
	public void testViewingEmptyFoodDiaryAsPatient() {
		action = new ViewFoodEntryAction(factory, 333);
		try {
			List<FoodEntryBean> foodDiary = action.getDiary(333);
			assertEquals(0, foodDiary.size());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test with evil factory
	 */
	@Test
	public void testEvilFactoryGetBoundedDiaryTotals() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new ViewFoodEntryAction(evil, 1);
		try {
			action.getBoundedDiaryTotals("", "", 1);
			fail("Working with evil factory");
		} catch (ITrustException d) {
			assertEquals("Error retrieving Food Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Try to view it as a nutritionist that isn't designated
	 */
	@Test
	public void testNonDesignatedNutritionistTotals() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			action.getDiaryTotals(1);
			fail("Not his designated nutritionist");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		}
	}

	/**
	 * Try to view it as a nutritionist that isn't designated
	 */
	@Test
	public void testNonDesignatedNutritionist() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			action.getDiary(1);
			fail("Not his designated nutritionist");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		}
	}

	/**
	 * Ensure patients can't view the food diary of other patients.
	 */
	@Test
	public void testViewFoodDiaryOfOtherPatient() {
		action = new ViewFoodEntryAction(factory, 333);
		try {
			action.getDiary(334);
			fail("You should not be able to view other patient's food diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		}
	}

	/**
	 * Try to view it as a nutritionist that isn't designated
	 */
	@Test
	public void testNonDesignatedNutritionistBounded() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			action.getBoundedDiary("02/02/2014", "02/02/2014", 1);
			fail("Not his designated nutritionist");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Test with evil factory
	 */
	@Test
	public void testEvilFactoryGetDiary() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new ViewFoodEntryAction(evil, 1);
		try {
			action.getDiary(1);
			fail("Working with evil factory");
		} catch (ITrustException d) {
			assertEquals("Error retrieving Food Diary", d.getMessage());
		}
	}

	/**
	 * Log in as the HCP Spencer Reid who does have the specialty of
	 * nutritionist, so she should be able to view food entries. View
	 * the Food Entries for Patient Jennifer Jareau who has some
	 * food entries already in her diary.
	 */
	@Test
	public void testViewingFoodDiaryWithEntriesAsNutritionist() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			List<FoodEntryBean> foodDiary = action.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean entry1 = foodDiary.get(0);
			FoodEntryBean entry2 = foodDiary.get(1);
			//now that we know we have 2 of them, make sure they are the 
			//right ones
			assertEquals("09/30/2012", entry1.getDateEatenStr().toString());
			assertEquals("Breakfast", entry1.getMealType().name());
			assertEquals("Hot dog", entry1.getFood());
			assertEquals(4.0, entry1.getServings(), .001);
			assertEquals(80.0, entry1.getCalories(), .001);
			assertEquals(5.0, entry1.getFatGrams(), .001);
			assertEquals(480.0, entry1.getMilligramsSodium(), .001);
			assertEquals(2.0, entry1.getCarbGrams(), .001);
			assertEquals(0.0, entry1.getFiberGrams(), .001);
			assertEquals(0.0, entry1.getSugarGrams(), .001);
			assertEquals(5.0, entry1.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			assertEquals("09/30/2012", entry2.getDateEatenStr().toString());
			assertEquals("Lunch", entry2.getMealType().name());
			assertEquals("Mango Passionfruit Juice", entry2.getFood());
			assertEquals(1.2, entry2.getServings(), .001);
			assertEquals(130.0, entry2.getCalories(), .001);
			assertEquals(0.0, entry2.getFatGrams(), .001);
			assertEquals(25.0, entry2.getMilligramsSodium(), .001);
			assertEquals(32.0, entry2.getCarbGrams(), .001);
			assertEquals(0.0, entry2.getFiberGrams(), .001);
			assertEquals(29.0, entry2.getSugarGrams(), .001);
			assertEquals(1.0, entry2.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			//now check the totals
			List<FoodEntryBean> totals = action.getDiaryTotals(334);
			assertEquals(1, totals.size());
			FoodEntryBean total = totals.get(0);
			assertEquals(476.0, total.getCalories(), .001);
			assertEquals(20.0, total.getFatGrams(), .001);
			assertEquals(1950.0, total.getMilligramsSodium(), .001);
			assertEquals(46.4, total.getCarbGrams(), .001);
			assertEquals(0.0, total.getFiberGrams(), .001);
			assertEquals(34.8, total.getSugarGrams(), .001);
			assertEquals(21.2, total.getProteinGrams(), .001);
			
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
			
	}

	/**
	 * Test with evil factory
	 */
	@Test
	public void testEvilFactoryGetBoundedDiary() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new ViewFoodEntryAction(evil, 1);
		try {
			action.getBoundedDiary("", "", 1);
			fail("Working with evil factory");
		} catch (ITrustException d) {
			assertEquals("Error retrieving Food Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Ensure patients can't view the bounded food diary of other patients.
	 */
	@Test
	public void testViewFoodDiaryOfOtherPatientBoundedTotals() {
		action = new ViewFoodEntryAction(factory, 333);
		try {
			action.getBoundedDiaryTotals("12/12/2014", "12/12/2014", 334);
			fail("You should not be able to view other patient's food diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail("Not your food diary");
		}
	}

	/**
	 * Try to view it as a nutritionist that isn't designated
	 */
	@Test
	public void testNonDesignatedNutritionistBoundedTotals() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			action.getBoundedDiaryTotals("02/02/2014", "02/02/2014", 1);
			fail("Not his designated nutritionist");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Ensure patients can't view the bounded food diary of other patients.
	 */
	@Test
	public void testViewFoodDiaryOfOtherPatientBounded() {
		action = new ViewFoodEntryAction(factory, 333);
		try {
			action.getBoundedDiary("12/12/2014", "12/12/2014", 334);
			fail("You should not be able to view other patient's food diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail("Not your food diary");
		}
	}

	/**
	 * Test that HCP's that are not specialists in nutrition are unable to
	 * view Food Diary Entries.
	 */
	@Test
	public void testViewingFoodDiaryWithEntriesAsNonNutritionistHCP() {
		action = new ViewFoodEntryAction(factory, 9000000000L); 
		//log in as Doctor Kelly
		List<FoodEntryBean> foodDiary = null;
		try {
			foodDiary = action.getDiary(334); 
			fail("Non Nutritionist can view Food Diary");
		} catch (ITrustException d) {
			assertEquals("You do not have permission"
					+ " to view the Food Diary!", d.getMessage());
			assertNull(foodDiary);
		}
	}

	public void testNonExistent() throws Exception {
		try {
			action = new EditPatientAction(factory, 0L, "200");
			fail("exception should have been thrown");
		} catch (ITrustException e) {
			assertEquals("Patient does not exist", e.getMessage());
		}
	}

	public void testWrongFormat() throws Exception {
		try {
			action = new EditPatientAction(factory, 0L, "hello!");
			fail("exception should have been thrown");
		} catch (ITrustException e) {
			assertEquals("Patient ID is not a number: hello!", e.getMessage());
		}
	}

	public void testNull() throws Exception {
		try {
			action = new EditPatientAction(factory, 0L, null);
			fail("exception should have been thrown");
		} catch (ITrustException e) {
			assertEquals("Patient ID is not a number: null", e.getMessage());
		}
	}

	/**
	 * Test that you can add an entry and then turn around and edit it.
	 */
	@Test
	public void testAddEditEntry() {
		addAction = new AddSleepEntryAction(factory, 1);
		action = new EditSleepEntryAction(factory, 1);
		viewAction = new ViewSleepEntryAction(factory, 1);
		try {
			addAction.addEntry(sleepBean);
			
			assertEquals(3, viewAction.getDiary(1).size());
			SleepEntryBean bean = viewAction.getDiary(1).get(0);
			assertEquals("12/14/2012", bean.getStrDate());
			assertEquals("Nap", bean.getSleepType().getName());
			assertEquals(1.0, bean.getHoursSlept());
			
			bean.setStrDate("12/11/2012");
			bean.setSleepType("Nightly");
			bean.setHoursSlept(2.0);
			action.editEntry(bean);
			
			assertEquals(3, viewAction.getDiary(1).size());
			
			bean = viewAction.getDiary(1).get(2);
			assertEquals("12/11/2012", bean.getStrDate());
			assertEquals("Nightly", bean.getSleepType().getName());
			assertEquals(2.0, bean.getHoursSlept());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		} catch (ITrustException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Tests that the information included still has to be correct and pass
	 * the same validation as adding a new one
	 */
	@Test
	public void testEditInvalidServings() {
		addAction = new AddSleepEntryAction(factory, 1);
		action = new EditSleepEntryAction(factory, 1);
		viewAction = new ViewSleepEntryAction(factory, 1);
		sleepBean.setHoursSlept(2.0);
		try {
			addAction.addEntry(sleepBean);
			
			SleepEntryBean bean = viewAction.getDiary(1).get(0);
			assertEquals(1.0, bean.getHoursSlept());
			bean.setHoursSlept(-2.0);
			action.editEntry(bean);
			fail("Invalid number of hours");
		} catch (FormValidationException d) {
			assertTrue(d.getMessage().contains("Number of Hours must be "
					+ "greater than 0"));
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test with an evil factory
	 */
	@Test
	public void testEvilFactory() {
		EvilDAOFactory evil = new EvilDAOFactory(0);
		addAction = new AddSleepEntryAction(factory, 1);
		action = new EditSleepEntryAction(evil, 1);
		viewAction = new ViewSleepEntryAction(factory, 1);
		try {
			addAction.addEntry(sleepBean);
			
			SleepEntryBean bean = viewAction.getDiary(1).get(0);
			bean.setHoursSlept(2.0);
			action.editEntry(bean);
			fail("Using evil factory. Should have failed");
		} catch (ITrustException e) {
			assertTrue(e.getMessage().contains("Error updating entry from "
					+ "Sleep Diary"));
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Tests that users cannot edit other people sleep entries
	 */
	@Test
	public void testOtherUsersEntry() {
		addAction = new AddSleepEntryAction(factory, 1);
		action = new EditSleepEntryAction(factory, 2);
		viewAction = new ViewSleepEntryAction(factory, 1);
		try {
			addAction.addEntry(sleepBean);
			
			List<SleepEntryBean> sleepDiary = viewAction.getDiary(1);
			assertEquals(3, sleepDiary.size());
			SleepEntryBean firstEntry = sleepDiary.get(0);
			assertEquals(1.0, firstEntry.getHoursSlept());
			firstEntry.setHoursSlept(2.0);
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(-1, numUpdated);
			assertEquals(3, viewAction.getDiary(1).size());
			firstEntry = viewAction.getDiary(1).get(0);
			assertEquals(1.0, firstEntry.getHoursSlept());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that a user can edit their own sleep entries.
	 */
	@Test
	public void testEditExistingEntry() {
		addAction = new AddSleepEntryAction(factory, 1);
		action = new EditSleepEntryAction(factory, 1);
		viewAction = new ViewSleepEntryAction(factory, 1);
		try {
			addAction.addEntry(sleepBean);
			
			List<SleepEntryBean> sleepDiary = viewAction.getDiary(1);
			assertEquals(3, sleepDiary.size());
			SleepEntryBean firstEntry = sleepDiary.get(0);
			assertEquals(1.0, firstEntry.getHoursSlept());
			firstEntry.setHoursSlept(2.0);
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(1, numUpdated);
			assertEquals(3, viewAction.getDiary(1).size());
			firstEntry = viewAction.getDiary(1).get(0);
			assertEquals(2.0, firstEntry.getHoursSlept());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
		
	}

	/**
	 * Tests that nothing happens when a user tries to udpate
	 * a nonexistent sleep entry. Random Person (1) has no entries.
	 */
	@Test
	public void testEditNoEntry() {
		action = new EditSleepEntryAction(factory, 1);
		viewAction = new ViewSleepEntryAction(factory, 1);
		try {
			sleepBean.setEntryID(100);
			assertEquals(0, action.editEntry(sleepBean));
		} catch (ITrustException e) {
			fail(e.getMessage());
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Try to get a bounded exercise diary totals of other patient.
	 */
	@Test
	public void testBoundedDiaryTotalsOtherPatient() {
		action = new ViewExerciseEntryAction(factory, 1);
		try {
			action.getBoundedDiaryTotals("", "", 2);
			fail("You should not be able to view other patient's exercise diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Exercise Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail("Wrong patient");
		}
	}

	/**
	 * Try to get a bounded exercise diary of other patient.
	 */
	@Test
	public void testBoundedDiaryOtherPatient() {
		action = new ViewExerciseEntryAction(factory, 1);
		try {
			action.getBoundedDiary("", "", 2);
			fail("You should not be able to view other patient's exercise diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Exercise Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail("Wrong patient");
		}
	}

	/**
	 * Test that HCP's that are not specialists in nutrition are unable to
	 * view Exercise Diary Entries.
	 */
	@Test
	public void testViewingExerciseDiaryWithEntriesAsNonTrainerHCP() {
		action = new ViewExerciseEntryAction(factory, 9000000000L); 
		//log in as Doctor Kelly
		List<ExerciseEntryBean> exerciseDiary = null;
		try {
			exerciseDiary = action.getDiary(1); 
			fail("Non Trainer can view Exercise Diary");
		} catch (ITrustException d) {
			assertEquals("You do not have permission"
					+ " to view the Exercise Diary!", d.getMessage());
			assertNull(exerciseDiary);
		}
	}

	/**
	 * Ensures a patient can still view their exercise diary even when it is empty.
	 */
	@Test
	public void testViewingEmptyExerciseDiaryAsPatient() {
		action = new ViewExerciseEntryAction(factory, 2);
		try {
			List<ExerciseEntryBean> exerciseDiary = action.getDiary(2);
			assertEquals(0, exerciseDiary.size());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testExerciseDiaryBadFactory() {
		action = new ViewExerciseEntryAction(evil, 1);
		try {
			action.getDiary(1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Exercise Diary", d.getMessage());
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testExerciseDiaryBadFactoryBoundedDatesTotals() {
		action = new ViewExerciseEntryAction(evil, 1);
		try {
			action.getBoundedDiaryTotals("", "", 1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Exercise Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail("Made it with evil factory");
		}
	}

	/**
	 * Ensures HCPs with specialty of trainer can still view a exercise diary
	 * even when the exercise diary is empty.
	 */
	@Test
	public void testViewingEmptyExerciseDiaryAsHCP() {
		action = new ViewExerciseEntryAction(factory, 9000000081L);
		try {
			List<ExerciseEntryBean> exerciseDiary = action.getDiary(2);
			assertEquals(0, exerciseDiary.size());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testExerciseDiaryBadFactoryBoundedDates() {
		action = new ViewExerciseEntryAction(evil, 1);
		try {
			action.getBoundedDiary("", "", 1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Exercise Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail("Made it with evil factory");
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testExerciseDiaryBadFactoryTotals() {
		action = new ViewExerciseEntryAction(evil, 1);
		try {
			action.getDiaryTotals(1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Exercise Diary", d.getMessage());
		}
	}

	/**
	 * Ensure patients can't view the exercise diary of other patients.
	 */
	@Test
	public void testViewExerciseDiaryOfOtherPatient() {
		action = new ViewExerciseEntryAction(factory, 1);
		try {
			action.getDiary(2);
			fail("You should not be able to view other patient's exercise diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Exercise Diary!",
					e.getMessage());
		}
	}

	/**
	 * Tests that a patient can add a new exercise entry to a diary that already
	 * has some entries in it.
	 */
	@Test
	public void testAddExerciseEntryToNonEmptyDiary() {
		action = new AddExerciseEntryAction(factory, 1);
		viewAction = new ViewExerciseEntryAction(factory, 1);
		
		String result;
		try {
			result = action.addEntry(exerciseBean);
			exerciseBean.setStrName("Bicep Curls");
			
			assertEquals(viewAction.getDiary(1).size(), 3);
		} catch (Exception e1) {
			fail(e1.getMessage());
		}
		try {
			result = action.addEntry(exerciseBean);
			assertEquals("Success: Bicep Curls for 12/12/2012 was added "
					+ "successfully!", result);
			try {
				List<ExerciseEntryBean> exerciseDiary = viewAction.getDiary(1);
				assertEquals(4, exerciseDiary.size());
				ExerciseEntryBean bean = exerciseDiary.get(0);
				assertEquals("12/14/2012", bean.getStrDate().toString());
				assertEquals("Weights", bean.getExerciseType().name());
				assertEquals("Bench Press", bean.getStrName());
				assertEquals(50, bean.getCaloriesBurned());
				assertEquals(0.5, bean.getHoursWorked());
				assertEquals(3, bean.getNumSets());
				assertEquals(10, bean.getNumReps());
				assertEquals(1, bean.getPatientID());
				
				ExerciseEntryBean bean2 = exerciseDiary.get(3);
				assertEquals("12/12/2012", bean2.getStrDate().toString());
				assertEquals("Weights", bean2.getExerciseType().name());
				assertEquals("Bicep Curls", bean2.getStrName());
				assertEquals(50, bean.getCaloriesBurned());
				assertEquals(0.5, bean.getHoursWorked());
				assertEquals(3, bean.getNumSets());
				assertEquals(10, bean.getNumReps());
				assertEquals(1, bean.getPatientID());
				
				List<ExerciseEntryBean> totals = 
						viewAction.getDiaryTotals(1);
				assertEquals(2, totals.size());
				ExerciseEntryBean prevTotal = totals.get(0);
				assertEquals("12/14/2012", prevTotal.getStrDate());
				assertEquals(50, prevTotal.getCaloriesBurned());
				assertEquals(0.5, prevTotal.getHoursWorked());
				ExerciseEntryBean total = totals.get(1);
				assertEquals("12/12/2012", total.getStrDate());
				assertEquals(200, total.getCaloriesBurned());
				assertEquals(3.0, total.getHoursWorked(), .001);
			} catch (ITrustException e) {
				fail(e.getMessage());
			}
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that a patient can add a new exercise entry to an empty diary.
	 * Log in as the patient Random Person who has no prior exercise entries.
	 */
	@Test
	public void testAddNewExerciseEntryToEmptyDiary() {
		action = new AddExerciseEntryAction(factory, 1);
		viewAction = new ViewExerciseEntryAction(factory, 1);
		try {
			String result = action.addEntry(exerciseBean);
			assertEquals("Success: Bench Press for 12/12/2012 was added "
					+ "successfully!", result);
			try {
				List<ExerciseEntryBean> exerciseDiary = viewAction.getDiary(1);
				assertEquals(3, exerciseDiary.size());
				ExerciseEntryBean bean = exerciseDiary.get(0);
				assertEquals(81, bean.getEntryID());
				assertEquals("12/14/2012", bean.getStrDate().toString());
				assertEquals("Weights", bean.getExerciseType().name());
				assertEquals("Bench Press", bean.getStrName());
				assertEquals(50, bean.getCaloriesBurned());
				assertEquals(0.5, bean.getHoursWorked());
				assertEquals(3, bean.getNumSets());
				assertEquals(10, bean.getNumReps());
				assertEquals(1, bean.getPatientID());
				
				List<ExerciseEntryBean> exerciseTotals = 
						viewAction.getDiaryTotals(1);
				assertEquals(2, exerciseTotals.size());
				ExerciseEntryBean total = exerciseTotals.get(0);
				assertEquals("12/14/2012", total.getStrDate());
				assertEquals(50, total.getCaloriesBurned());
				assertEquals(0.5, total.getHoursWorked());
				ExerciseEntryBean total2 = exerciseTotals.get(1);
				assertEquals("12/12/2012", total2.getStrDate());
				assertEquals(150, total2.getCaloriesBurned());
				assertEquals(2.0, total2.getHoursWorked(), .001);
			} catch (ITrustException e) {
				fail(e.getMessage());
			}
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test that you can add an entry and then turn around and edit it.
	 */
	@Test
	public void testAddEditEntry() {
		action = new EditFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		addAction = new AddFoodEntryAction(factory, 333);
		try {
			addAction.addEntry(foodBean);
			assertEquals(1, viewAction.getDiary(333).size());
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals("12/12/2012", bean.getDateEatenStr());
			assertEquals("Breakfast", bean.getMealType().getName());
			assertEquals("Ice Cream", bean.getFood());
			assertEquals(2.0, bean.getServings(), .001);
			assertEquals(30.5, bean.getCalories(), .001);
			assertEquals(4.0, bean.getFatGrams(), .001);
			assertEquals(2.0, bean.getMilligramsSodium(), .001);
			assertEquals(6.0, bean.getCarbGrams(), .001);
			assertEquals(1.0, bean.getSugarGrams(), .001);
			assertEquals(4.3, bean.getFiberGrams(), .001);
			assertEquals(3.5, bean.getProteinGrams(), .001);
			
			bean.setDateEatenStr("01/01/2013");
			bean.setMealType("Dinner");
			bean.setFood("Hot dog");
			bean.setServings(1.0);
			bean.setCalories(10.0);
			bean.setFatGrams(3.0);
			bean.setMilligramsSodium(100.0);
			bean.setCarbGrams(10.0);
			bean.setSugarGrams(11.0);
			bean.setFiberGrams(1.0);
			bean.setProteinGrams(3.0);
			
			action.editEntry(bean);
			assertEquals(1, viewAction.getDiary(333).size());
			bean = viewAction.getDiary(333).get(0);
			assertEquals("01/01/2013", bean.getDateEatenStr());
			assertEquals("Dinner", bean.getMealType().getName());
			assertEquals("Hot dog", bean.getFood());
			assertEquals(1.0, bean.getServings(), .001);
			assertEquals(10.0, bean.getCalories(), .001);
			assertEquals(3.0, bean.getFatGrams(), .001);
			assertEquals(100.0, bean.getMilligramsSodium(), .001);
			assertEquals(10.0, bean.getCarbGrams(), .001);
			assertEquals(11.0, bean.getSugarGrams(), .001);
			assertEquals(1.0, bean.getFiberGrams(), .001);
			assertEquals(3.0, bean.getProteinGrams(), .001);
		} catch (FormValidationException e) {
			fail(e.getMessage());
		} catch (ITrustException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Tests that users cannot edit other people food entries
	 */
	@Test
	public void testOtherUsersEntry() {
		action = new EditFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			List<FoodEntryBean> foodDiary = viewAction.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean firstEntry = foodDiary.get(0);
			assertEquals("Breakfast", firstEntry.getMealType().toString());
			firstEntry.setMealType("Dinner");
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(-1, numUpdated);
			assertEquals(2, viewAction.getDiary(334).size());
			firstEntry = viewAction.getDiary(334).get(0);
			assertEquals("Breakfast", firstEntry.getMealType().getName());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that the information included still has to be correct and pass
	 * the same validation as adding a new one
	 */
	@Test
	public void testEditInvalidServings() {
		action = new EditFoodEntryAction(factory, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		foodBean.setServings(0.0);
		try {
			FoodEntryBean bean = viewAction.getDiary(334).get(0);
			assertEquals(4.0, bean.getServings());
			bean.setServings(0.0);
			action.editEntry(bean);
			fail("Invalid number of servings");
		} catch (FormValidationException d) {
			assertTrue(d.getMessage().contains("Number of Servings must be "
					+ "greater than 0"));
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that a user can edit his own food entries.
	 */
	@Test
	public void testEditExistingEntry() {
		action = new EditFoodEntryAction(factory, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			List<FoodEntryBean> foodDiary = viewAction.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean firstEntry = foodDiary.get(0);
			assertEquals("Breakfast", firstEntry.getMealType().toString());
			firstEntry.setMealType("Dinner");
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(1, numUpdated);
			assertEquals(2, viewAction.getDiary(334).size());
			firstEntry = viewAction.getDiary(334).get(0);
			assertEquals("Dinner", firstEntry.getMealType().toString());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
		
	}

	/**
	 * Tests that nothing happens when a user tries to udpate
	 * a nonexistent food entry. Derek Morgan (333) has no entries.
	 */
	@Test
	public void testEditNoEntry() {
		action = new EditFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		try {
			foodBean.setEntryID(100);
			assertEquals(0, action.editEntry(foodBean));
		} catch (ITrustException e) {
			fail(e.getMessage());
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Test with an evil factory
	 */
	@Test
	public void testEvilFactory() {
		EvilDAOFactory evil = new EvilDAOFactory(0);
		action = new EditFoodEntryAction(evil, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			FoodEntryBean bean = viewAction.getDiary(334).get(0);
			bean.setCalories(100.0);
			action.editEntry(bean);
			fail("Using evil factory. Should have failed");
		} catch (ITrustException e) {
			assertTrue(e.getMessage().contains("Error updating entry from "
					+ "Food Diary"));
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testSleepDiaryBadFactoryBoundedDates() {
		action = new ViewSleepEntryAction(evil, 1);
		try {
			action.getBoundedDiary("", "", 1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Sleep Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail("Made it with evil factory");
		}
	}

	/**
	 * Try to get a bounded exercise diary totals of other patient.
	 */
	@Test
	public void testBoundedDiaryTotalsOtherPatient() {
		action = new ViewSleepEntryAction(factory, 1);
		try {
			action.getBoundedDiaryTotals("", "", 2);
			fail("You should not be able to view other patient's exercise diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Sleep Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail("Wrong patient");
		}
	}

	/**
	 * Ensure patients can't view the sleep diary of other patients.
	 */
	@Test
	public void testViewSleepDiaryOfOtherPatient() {
		action = new ViewSleepEntryAction(factory, 1);
		try {
			action.getDiary(2);
			fail("You should not be able to view ottheir patient's sleep diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Sleep Diary!",
					e.getMessage());
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testSleepDiaryBadFactoryTotals() {
		action = new ViewSleepEntryAction(evil, 1);
		try {
			action.getDiaryTotals(1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Sleep Diary", d.getMessage());
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testSleepDiaryBadFactory() {
		action = new ViewSleepEntryAction(evil, 1);
		try {
			action.getDiary(1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Sleep Diary", d.getMessage());
		}
	}

	/**
	 * Ensures a patient can still view their sleep diary even when it is empty.
	 */
	@Test
	public void testViewingEmptySleepDiaryAsPatient() {
		action = new ViewSleepEntryAction(factory, 2);
		try {
			List<SleepEntryBean> sleepDiary = action.getDiary(2);
			assertEquals(0, sleepDiary.size());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Try to get a bounded exercise diary of other patient.
	 */
	@Test
	public void testBoundedDiaryOtherPatient() {
		action = new ViewSleepEntryAction(factory, 1);
		try {
			action.getBoundedDiary("", "", 2);
			fail("You should not be able to view other patient's exercise diary.");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Sleep Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail("Wrong patient");
		}
	}

	/**
	 * Test with a bad factory
	 */
	@Test
	public void testSleepDiaryBadFactoryBoundedDatesTotals() {
		action = new ViewSleepEntryAction(evil, 1);
		try {
			action.getBoundedDiaryTotals("", "", 1);
		} catch (ITrustException d) {
			assertEquals("Error retrieving Sleep Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail("Made it with evil factory");
		}
	}

	/**
	 * Ensures HCPs with specialty of trainer can still view a sleep diary
	 * even when the sleep diary is empty.
	 */
	@Test
	public void testViewingEmptySleepDiaryAsHCP() {
		action = new ViewSleepEntryAction(factory, 9000000001L);
		try {
			List<SleepEntryBean> sleepDiary = action.getDiary(2);
			assertEquals(0, sleepDiary.size());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that nothing happens when a user tries to udpate
	 * a nonexistent exercise entry. Random Person (1) has no entries.
	 */
	@Test
	public void testEditNoEntry() {
		action = new EditExerciseEntryAction(factory, 1);
		viewAction = new ViewExerciseEntryAction(factory, 1);
		try {
			exerciseBean.setEntryID(100);
			assertEquals(0, action.editEntry(exerciseBean));
		} catch (ITrustException e) {
			fail(e.getMessage());
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Test with an evil factory
	 */
	@Test
	public void testEvilFactory() {
		EvilDAOFactory evil = new EvilDAOFactory(0);
		addAction = new AddExerciseEntryAction(factory, 1);
		action = new EditExerciseEntryAction(evil, 1);
		viewAction = new ViewExerciseEntryAction(factory, 1);
		try {
			addAction.addEntry(exerciseBean);
			
			ExerciseEntryBean bean = viewAction.getDiary(1).get(0);
			bean.setHoursWorked(2.0);
			action.editEntry(bean);
			fail("Using evil factory. Should have failed");
		} catch (ITrustException e) {
			assertTrue(e.getMessage().contains("Error updating entry from "
					+ "Exercise Diary"));
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Tests that users cannot edit other people exercise entries
	 */
	@Test
	public void testOtherUsersEntry() {
		addAction = new AddExerciseEntryAction(factory, 1);
		action = new EditExerciseEntryAction(factory, 2);
		viewAction = new ViewExerciseEntryAction(factory, 1);
		try {
			addAction.addEntry(exerciseBean);
			
			List<ExerciseEntryBean> exerciseDiary = viewAction.getDiary(1);
			assertEquals(3, exerciseDiary.size());
			ExerciseEntryBean firstEntry = exerciseDiary.get(0);
			assertEquals("Bench Press", firstEntry.getStrName().toString());
			firstEntry.setStrName("Bicep Curls");
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(-1, numUpdated);
			assertEquals(3, viewAction.getDiary(1).size());
			firstEntry = viewAction.getDiary(1).get(0);
			assertEquals("Bench Press", firstEntry.getStrName());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that the information included still has to be correct and pass
	 * the same validation as adding a new one
	 */
	@Test
	public void testEditInvalidServings() {
		addAction = new AddExerciseEntryAction(factory, 1);
		action = new EditExerciseEntryAction(factory, 1);
		viewAction = new ViewExerciseEntryAction(factory, 1);
		exerciseBean.setHoursWorked(2.0);
		try {
			addAction.addEntry(exerciseBean);
			
			ExerciseEntryBean bean = viewAction.getDiary(1).get(0);
			assertEquals(0.5, bean.getHoursWorked());
			bean.setHoursWorked(-2.0);
			action.editEntry(bean);
			fail("Invalid number of hours");
		} catch (FormValidationException d) {
			assertTrue(d.getMessage().contains("Number of Hours must be "
					+ "greater than 0"));
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that a user can edit their own exercise entries.
	 */
	@Test
	public void testEditExistingEntry() {
		addAction = new AddExerciseEntryAction(factory, 1);
		action = new EditExerciseEntryAction(factory, 1);
		viewAction = new ViewExerciseEntryAction(factory, 1);
		try {
			addAction.addEntry(exerciseBean);
			
			List<ExerciseEntryBean> exerciseDiary = viewAction.getDiary(1);
			assertEquals(3, exerciseDiary.size());
			ExerciseEntryBean entry = exerciseDiary.get(0);
			assertEquals("Bench Press", entry.getStrName().toString());
			entry.setStrName("Bicep Curls");
			int numUpdated = action.editEntry(entry);
			assertEquals(1, numUpdated);
			assertEquals(3, viewAction.getDiary(1).size());
			entry = viewAction.getDiary(1).get(0);
			assertEquals("Bicep Curls", entry.getStrName());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
		
	}
}

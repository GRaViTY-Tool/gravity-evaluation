/*
 animated about dialog

Copyright (C) 2005 Raik Nagel <kiar@users.sourceforge.net>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
* Neither the name of the author nor the names of its contributors may be
  used to endorse or promote products derived from this software without
  specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// created by : r.nagel 05.05.2005
//
// function : set of animated lines
//
// modified :

package net.sf.jabref.about ;

import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.util.Iterator;
import java.util.Vector;

public class TextBlock implements Iterable<AboutTextLine> {

  private Vector<AboutTextLine> textLines ;
  private AboutTextLine headLine ;
  private boolean visible ;

  public TextBlock()
  {
    textLines = new Vector<AboutTextLine>() ;
    visible = false ;
  }

// ---------------------------------------------------------------------------

  public void add(AboutTextLine line)
  {
    textLines.add(line);
  }

  public Iterator<AboutTextLine> iterator() { 
	  return textLines.iterator(); 
  }

// ---------------------------------------------------------------------------
  public void setHeading(AboutTextLine head)
  {
    headLine = head ;
  }

  public AboutTextLine getHeading() { return headLine ; }

// ---------------------------------------------------------------------------
  public boolean isVisible()
  {
    return visible;
  }

  public void setVisible(boolean pVisible)
  {
    this.visible = pVisible;
  }

// ----------------------------------------------------------------------------

  public void paintComponent( Graphics g )
  {
    if (thread.mode == 0)
    {
      thread.start();
//      thread.setEnabled(true);
    }
    else
    if (thread.mode == 1)
    {
      image.paintIcon(this, g, 0, 0);

      FontMetrics fm = g.getFontMetrics( font1 ) ;

      int x1 = ( getWidth() - fm.stringWidth( versionStr ) ) / 2 ;
      int y1 = getHeight() - fm.getHeight() - 4 ;
      int y2 = getHeight() - 5 ;
/*
      int x1 = ( getWidth() - fm.stringWidth( versionStr ) ) / 2 ;
      int y1 = 4 ;
      int y2 = fm.getHeight() +4 ;
*/
      g.setFont( font1 ) ;

      g.setColor( Color.black ) ;
      g.drawString( versionStr, x1, y1 ) ;
      g.drawString( buildStr, x1, y2 ) ;

      g.setFont( font2) ;
      fm = g.getFontMetrics( font2 ) ;
      g.drawString( "JabRef", (getWidth() - fm.stringWidth("JabRef")) /2, fm.getHeight()+10) ;


      for ( TextBlock block : textBlocks){
        if (block.isVisible()) // only if Block is marked as visible
        {
          // print Heading
          AboutTextLine head = block.getHeading() ;
          drawLine(head, g) ;

          for (AboutTextLine line : block){
            drawLine(line, g) ;
          }
        }
      }
    }
    else
    {
      image.paintIcon(this, g, 0, 0);
    }
  }


}

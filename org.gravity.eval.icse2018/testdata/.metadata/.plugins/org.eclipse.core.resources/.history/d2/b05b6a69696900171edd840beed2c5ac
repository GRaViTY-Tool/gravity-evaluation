package edu.ncsu.csc.itrust.action;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.junit.Test;

import edu.ncsu.csc.itrust.action.base.ViewEntryAction;
import edu.ncsu.csc.itrust.beans.FoodEntryBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.FoodEntryDAO;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.ITrustException;
import edu.ncsu.csc.itrust.unit.testutils.EvilDAOFactory;

/**
 * We need to decide how we want to do this. We can include a check here in
 * getting a food diary to ensure that the person viewing it is either a patient
 * or an HCP with the specialty of 'nutritionist' before letting them get the
 * food diary, or we could break this up into separate classes and separate jsp
 * pages. ViewFoodEntryAction.java Version 1 2/21/2015 Copyright notice: none
 */
public class ViewFoodEntryAction implements ViewEntryAction {

	private FoodEntryDAO foodEntryDAO;
	private PatientDAO patientDAO;
	private long loggedInMID;
	private PersonnelDAO personnelDAO;

	/**
	 * Uses the factory to construct foodentrydao and patientdao
	 * 
	 * @param factory
	 *            DAO factory to use
	 * @param loggedInMID
	 *            who is currently logged in
	 */
	public ViewFoodEntryAction(DAOFactory factory, long loggedInMID) {
		this.patientDAO = factory.getPatientDAO();
		this.personnelDAO = factory.getPersonnelDAO();
		this.foodEntryDAO = factory.getFoodEntryDAO();
		this.loggedInMID = loggedInMID;
	}

	/**
	 * Takes in which patient you want to view the food diary for, and then
	 * returns all of the food dairy entries for that patient. It first checks
	 * to ensure that the person requesting the food diary is either a patient,
	 * or is an HCP with a specialty of nutritionist.
	 * 
	 * @param patientMID
	 *            the id of the patient whose food diary we want
	 * @return a list of the patient's food diary entries
	 */
	public List<FoodEntryBean> getDiary(long patientMID)
			throws ITrustException {

		PersonnelBean personnel;
		try {
			/*
			 * This nightmare if-statement just checks for two things. Either:
			 * 1) The patient is viewing their own diary.
			 * 2) A nutritionist designated for the provided PID is viewing the diary.
			 * the Nutritionist must be the designated nutritionist
			 */
			if ((patientDAO.checkPatientExists(loggedInMID) && loggedInMID == patientMID)
					|| (((personnel = personnelDAO.getPersonnel(loggedInMID)) != null) && personnel
							.getSpecialty() != null && personnel.getSpecialty().equalsIgnoreCase("Nutritionist") && 
							(patientDAO.getDesignatedNutritionist(patientMID) == loggedInMID))) {
				return foodEntryDAO.getPatientFoodDiary(patientMID);
			} else {
				throw new ITrustException("You do not have permission to "
						+ "view the Food Diary!");
			}
		} catch (DBException d) {
			throw new ITrustException("Error retrieving Food Diary");
		}
	}

	/**
	 * Gets the totals of carbs, protein, sugar, calories, sodium, fat, and
	 * fiber a user has eaten sorted by day.
	 * 
	 * @param patientMID
	 *            the patient we are looking at
	 * @return an entry that contains the totals for each day that a user has an
	 *         entry in his food diary
	 * @throws ITrustException
	 */
	public List<FoodEntryBean> getDiaryTotals(long patientMID)
			throws ITrustException {

		PersonnelBean personnel;
		try {
			/*
			 * This nightmare if-statement just checks for two things. Either:
			 * 1) The patient is viewing their own diary.
			 * 2) A nutritionist designated for the provided PID is viewing the diary.
			 */
			if ((patientDAO.checkPatientExists(loggedInMID) && loggedInMID == patientMID)
					|| (((personnel = personnelDAO.getPersonnel(loggedInMID)) != null) && personnel
							.getSpecialty() != null && personnel.getSpecialty().equalsIgnoreCase("Nutritionist") && 
							(patientDAO.getDesignatedNutritionist(patientMID) == loggedInMID))) {
				return foodEntryDAO.getPatientFoodDiaryTotals(patientMID);
			} else {
				throw new ITrustException("You do not have permission to "
						+ "view the Food Diary!");
			}
		} catch (DBException d) {
			throw new ITrustException("Error retrieving Food Diary");
		}
	}

	/**
	 * Returns a list of food diary entries between two dates.
	 * 
	 * @param lowerDate
	 *            the first date
	 * @param upperDate
	 *            the second date
	 * @return list of TransactionBeans
	 * @throws DBException
	 * @throws FormValidationException
	 */
	public List<FoodEntryBean> getBoundedDiary(String lowerDate,
			String upperDate, long patientMID) throws ITrustException,
			FormValidationException {
		PersonnelBean personnel;
		try {
			/*
			 * This nightmare if-statement just checks for two things. Either:
			 * 1) The patient is viewing their own diary.
			 * 2) A nutritionist designated for the provided PID is viewing the diary.
			 */
			if ((patientDAO.checkPatientExists(loggedInMID) && loggedInMID == patientMID)
					|| (((personnel = personnelDAO.getPersonnel(loggedInMID)) != null) && personnel
							.getSpecialty() != null && personnel.getSpecialty().equalsIgnoreCase("Nutritionist") && 
									(patientDAO.getDesignatedNutritionist(patientMID) == loggedInMID))) {

				/*
				 * Month can have 1 or 2 digits, same with day, and year must
				 * have 4.
				 */
				Pattern p = Pattern
						.compile("[0-9]{1,2}?/[0-9]{1,2}?/[0-9]{4}?");
				Matcher m = p.matcher(lowerDate);
				Matcher n = p.matcher(upperDate);
				/*
				 * If it fails to match either of them, throw the form
				 * validation exception
				 */
				if (!m.matches() || !n.matches()) {
					throw new FormValidationException(
							"Enter dates in MM/dd/yyyy");
				}

				Date lower = new SimpleDateFormat("MM/dd/yyyy")
						.parse(lowerDate);
				Date upper = new SimpleDateFormat("MM/dd/yyyy")
						.parse(upperDate);

				if (lower.after(upper)) {
					throw new FormValidationException(
							"Start date must be before end date!");
				}

				return foodEntryDAO.getBoundedFoodDiary(lower, upper,
						patientMID);
			} else {
				throw new ITrustException("You do not have permission to "
						+ "view the Food Diary!");
			}
		} catch (DBException e) {
			throw new ITrustException("Error retrieving Food Diary");
		} catch (ParseException d) {
			throw new ITrustException("Error parsing Dates");
		}
	}

	/**
	 * Gets the totals of carbs, protein, sugar, calories, sodium, fat, and
	 * fiber a user has eaten in a given date range, sorted by day.
	 * 
	 * @param lowerDate
	 *            the first date
	 * @param upperDate
	 *            the second date
	 * @param patientMID
	 *            the patient we are looking at
	 * @return an entry that contains the totals for each day in the given range
	 *         for the patient
	 * @throws ITrustException
	 */
	public List<FoodEntryBean> getBoundedDiaryTotals(String lowerDate,
			String upperDate, long patientMID) throws ITrustException,
			FormValidationException {
		PersonnelBean personnel;
		try {
			/*
			 * This nightmare if-statement just checks for two things. Either:
			 * 1) The patient is viewing their own diary.
			 * 2) A nutritionist designated for the provided PID is viewing the diary.
			 */
			if ((patientDAO.checkPatientExists(loggedInMID) && loggedInMID == patientMID)
					|| (((personnel = personnelDAO.getPersonnel(loggedInMID)) != null) && personnel
							.getSpecialty() != null && personnel.getSpecialty().equalsIgnoreCase("Nutritionist") && 
									(patientDAO.getDesignatedNutritionist(patientMID) == loggedInMID))) {

				/*
				 * Month can have 1 or 2 digits, same with day, and year must
				 * have 4.
				 */
				Pattern p = Pattern
						.compile("[0-9]{1,2}?/[0-9]{1,2}?/[0-9]{4}?");
				Matcher m = p.matcher(lowerDate);
				Matcher n = p.matcher(upperDate);
				/*
				 * If it fails to match either of them, throw the form
				 * validation exception
				 */
				if (!m.matches() || !n.matches()) {
					throw new FormValidationException(
							"Enter dates in MM/dd/yyyy");
				}

				Date lower = new SimpleDateFormat("MM/dd/yyyy")
						.parse(lowerDate);
				Date upper = new SimpleDateFormat("MM/dd/yyyy")
						.parse(upperDate);

				if (lower.after(upper)) {
					throw new FormValidationException(
							"Start date must be before end date!");
				}

				return foodEntryDAO.getBoundedFoodDiaryTotals(lower, upper,
						patientMID);
			} else {
				throw new ITrustException("You do not have permission to "
						+ "view the Food Diary!");
			}
		} catch (DBException e) {
			throw new ITrustException("Error retrieving Food Diary");
		} catch (ParseException d) {
			throw new ITrustException("Error parsing Dates");
		}
	}

	/**
	 * Test that the number of sodium cannot be negative.
	 * @throws ITrustException 
	 */
	@Test
	public void testNumSodiumNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setMilligramsSodium(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getMilligramsSodium());
			//now try to make them negative
			foodBean.setMilligramsSodium(-1);
			try {
				action.addEntry(foodBean);
				fail("Sodium cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Milligrams of Sodium"
						+ " per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of sodium can be 0");
		}
	}

	/**
	 * Tests that the grams of protein per serving cannot be negative
	 */
	@Test
	public void testNumGramsProteinNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setProteinGrams(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getProteinGrams());
			//now try to make them negative
			foodBean.setProteinGrams(-1);
			try {
				action.addEntry(foodBean);
				fail("Grams of Protein cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Grams of Protein "
								+ "per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of protein grams can be 0");
		}
	}

	/**
	 * Tests that a patient can add a new food entry to an empty diary.
	 * Log in as the patient Derek Morgan who has no prior food entries.
	 */
	@Test
	public void testAddNewFoodEntryToEmptyDiary() {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			try {
				List<FoodEntryBean> foodDiary = viewAction.getDiary(333);
				assertEquals(1, foodDiary.size());
				FoodEntryBean bean = foodDiary.get(0);
				assertEquals(36, bean.getEntryID());
				assertEquals("12/12/2012", bean.getDateEatenStr().toString());
				assertEquals("Breakfast", bean.getMealType().name());
				assertEquals("Ice Cream", bean.getFood());
				assertEquals(2.0, bean.getServings());
				assertEquals(30.5, bean.getCalories());
				assertEquals(333, bean.getPatientID());
				
				List<FoodEntryBean> foodTotals = 
						viewAction.getDiaryTotals(333);
				assertEquals(1, foodTotals.size());
				FoodEntryBean total = foodTotals.get(0);
				assertEquals("12/12/2012", total.getDateEatenStr());
				assertEquals(61.0, total.getCalories());
				assertEquals(8.0, total.getFatGrams());
				assertEquals(4.0, total.getMilligramsSodium());
				assertEquals(12.0, total.getCarbGrams());
				assertEquals(2.0, total.getSugarGrams());
				assertEquals(8.6, total.getFiberGrams());
				assertEquals(7.0, total.getProteinGrams());
			} catch (ITrustException e) {
				fail(e.getMessage());
			}
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that a patient can add a new food entry to a diary that already
	 * has some entries in it.
	 */
	@Test
	public void testAddFoodEntryToNonEmptyDiary() {
		action = new AddFoodEntryAction(factory, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			assertEquals(viewAction.getDiary(334).size(), 2);
		} catch (ITrustException e1) {
			fail(e1.getMessage());
		}
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			try {
				List<FoodEntryBean> foodDiary = viewAction.getDiary(334);
				assertEquals(3, foodDiary.size());
				FoodEntryBean bean = foodDiary.get(0);
				assertEquals("12/12/2012", bean.getDateEatenStr().toString());
				assertEquals("Breakfast", bean.getMealType().name());
				assertEquals("Ice Cream", bean.getFood());
				assertEquals(2.0, bean.getServings());
				assertEquals(30.5, bean.getCalories());
				assertEquals(334, bean.getPatientID());
				
				FoodEntryBean bean2 = foodDiary.get(1);
				assertEquals("09/30/2012", bean2.getDateEatenStr().toString());
				assertEquals("Breakfast", bean2.getMealType().name());
				assertEquals("Hot dog", bean2.getFood());
				assertEquals(4.0, bean2.getServings());
				assertEquals(80.0, bean2.getCalories());
				assertEquals(5.0, bean2.getFatGrams());
				assertEquals(480.0, bean2.getMilligramsSodium());
				assertEquals(2.0, bean2.getCarbGrams());
				assertEquals(0.0, bean2.getFiberGrams());
				assertEquals(0.0, bean2.getSugarGrams());
				assertEquals(5.0, bean2.getProteinGrams());
				assertEquals(334, bean2.getPatientID());
				
				List<FoodEntryBean> totals = 
						viewAction.getDiaryTotals(334);
				assertEquals(2, totals.size());
				FoodEntryBean prevTotal = totals.get(1);
				assertEquals(476.0, prevTotal.getCalories());
				assertEquals(20.0, prevTotal.getFatGrams());
				assertEquals(1950.0, prevTotal.getMilligramsSodium());
				assertEquals(46.4, prevTotal.getCarbGrams());
				assertEquals(0.0, prevTotal.getFiberGrams());
				assertEquals(34.8, prevTotal.getSugarGrams());
				assertEquals(21.2, prevTotal.getProteinGrams());
			} catch (ITrustException e) {
				fail(e.getMessage());
			}
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that the grams of fiber per serving cannot be negative
	 */
	@Test
	public void testNumGramsFiberNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setFiberGrams(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getFiberGrams());
			//now try to make them negative
			foodBean.setFiberGrams(-1);
			try {
				action.addEntry(foodBean);
				fail("Grams of Fiber cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Grams of Fiber "
								+ "per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of fiber grams can be 0");
		}
	}

	/**
	 * Test that the number of sugars cannot be negative.
	 * @throws ITrustException 
	 */
	@Test
	public void testNumSugarNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setSugarGrams(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getSugarGrams());
			//now try to make them negative
			foodBean.setSugarGrams(-1);
			try {
				action.addEntry(foodBean);
				fail("Sugar cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Grams of Sugars"
						+ " per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of sugar can be 0");
		}
	}

	/**
	 * Tests that the grams of fat per serving cannot be negative
	 */
	@Test
	public void testNumGramsFatNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setFatGrams(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getFatGrams());
			//now try to make them negative
			foodBean.setFatGrams(-1);
			try {
				action.addEntry(foodBean);
				fail("Grams of Fat cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Grams of Fat "
								+ "per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of fat grams can be 0");
		}
	}

	/**
	 * Tests that the grams of fat per serving cannot be negative
	 */
	@Test
	public void testNumGramsCarbsNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setCarbGrams(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getCarbGrams());
			//now try to make them negative
			foodBean.setCarbGrams(-1);
			try {
				action.addEntry(foodBean);
				fail("Grams of Carbs cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Grams of Carbs "
								+ "per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of carb grams can be 0");
		}
	}

	/**
	 * Test that the number of calories cannot be negative.
	 * @throws ITrustException 
	 */
	@Test
	public void testNumCaloriesNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setCalories(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getCalories());
			//now try to make them negative
			foodBean.setCalories(-1);
			try {
				action.addEntry(foodBean);
				fail("Calories cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Calories per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of calories can be 0");
		}
	}

	/**
	 * Test that you can add an entry and then turn around and edit it.
	 */
	@Test
	public void testAddEditEntry() {
		action = new EditFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		addAction = new AddFoodEntryAction(factory, 333);
		try {
			addAction.addEntry(foodBean);
			assertEquals(1, viewAction.getDiary(333).size());
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals("12/12/2012", bean.getDateEatenStr());
			assertEquals("Breakfast", bean.getMealType().getName());
			assertEquals("Ice Cream", bean.getFood());
			assertEquals(2.0, bean.getServings(), .001);
			assertEquals(30.5, bean.getCalories(), .001);
			assertEquals(4.0, bean.getFatGrams(), .001);
			assertEquals(2.0, bean.getMilligramsSodium(), .001);
			assertEquals(6.0, bean.getCarbGrams(), .001);
			assertEquals(1.0, bean.getSugarGrams(), .001);
			assertEquals(4.3, bean.getFiberGrams(), .001);
			assertEquals(3.5, bean.getProteinGrams(), .001);
			
			bean.setDateEatenStr("01/01/2013");
			bean.setMealType("Dinner");
			bean.setFood("Hot dog");
			bean.setServings(1.0);
			bean.setCalories(10.0);
			bean.setFatGrams(3.0);
			bean.setMilligramsSodium(100.0);
			bean.setCarbGrams(10.0);
			bean.setSugarGrams(11.0);
			bean.setFiberGrams(1.0);
			bean.setProteinGrams(3.0);
			
			action.editEntry(bean);
			assertEquals(1, viewAction.getDiary(333).size());
			bean = viewAction.getDiary(333).get(0);
			assertEquals("01/01/2013", bean.getDateEatenStr());
			assertEquals("Dinner", bean.getMealType().getName());
			assertEquals("Hot dog", bean.getFood());
			assertEquals(1.0, bean.getServings(), .001);
			assertEquals(10.0, bean.getCalories(), .001);
			assertEquals(3.0, bean.getFatGrams(), .001);
			assertEquals(100.0, bean.getMilligramsSodium(), .001);
			assertEquals(10.0, bean.getCarbGrams(), .001);
			assertEquals(11.0, bean.getSugarGrams(), .001);
			assertEquals(1.0, bean.getFiberGrams(), .001);
			assertEquals(3.0, bean.getProteinGrams(), .001);
		} catch (FormValidationException e) {
			fail(e.getMessage());
		} catch (ITrustException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Test with an evil factory
	 */
	@Test
	public void testEvilFactory() {
		EvilDAOFactory evil = new EvilDAOFactory(0);
		action = new EditFoodEntryAction(evil, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			FoodEntryBean bean = viewAction.getDiary(334).get(0);
			bean.setCalories(100.0);
			action.editEntry(bean);
			fail("Using evil factory. Should have failed");
		} catch (ITrustException e) {
			assertTrue(e.getMessage().contains("Error updating entry from "
					+ "Food Diary"));
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Tests that the information included still has to be correct and pass
	 * the same validation as adding a new one
	 */
	@Test
	public void testEditInvalidServings() {
		action = new EditFoodEntryAction(factory, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		foodBean.setServings(0.0);
		try {
			FoodEntryBean bean = viewAction.getDiary(334).get(0);
			assertEquals(4.0, bean.getServings());
			bean.setServings(0.0);
			action.editEntry(bean);
			fail("Invalid number of servings");
		} catch (FormValidationException d) {
			assertTrue(d.getMessage().contains("Number of Servings must be "
					+ "greater than 0"));
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that users cannot edit other people food entries
	 */
	@Test
	public void testOtherUsersEntry() {
		action = new EditFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			List<FoodEntryBean> foodDiary = viewAction.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean firstEntry = foodDiary.get(0);
			assertEquals("Breakfast", firstEntry.getMealType().toString());
			firstEntry.setMealType("Dinner");
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(-1, numUpdated);
			assertEquals(2, viewAction.getDiary(334).size());
			firstEntry = viewAction.getDiary(334).get(0);
			assertEquals("Breakfast", firstEntry.getMealType().getName());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Tests that a user can edit his own food entries.
	 */
	@Test
	public void testEditExistingEntry() {
		action = new EditFoodEntryAction(factory, 334);
		viewAction = new ViewFoodEntryAction(factory, 334);
		try {
			List<FoodEntryBean> foodDiary = viewAction.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean firstEntry = foodDiary.get(0);
			assertEquals("Breakfast", firstEntry.getMealType().toString());
			firstEntry.setMealType("Dinner");
			int numUpdated = action.editEntry(firstEntry);
			assertEquals(1, numUpdated);
			assertEquals(2, viewAction.getDiary(334).size());
			firstEntry = viewAction.getDiary(334).get(0);
			assertEquals("Dinner", firstEntry.getMealType().toString());
		} catch (ITrustException d) {
			fail(d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
		
	}

	/**
	 * Test with evil factory
	 */
	@Test
	public void testEvilFactoryGetBoundedDiary() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new ViewFoodEntryAction(evil, 1);
		try {
			action.getBoundedDiary("", "", 1);
			fail("Working with evil factory");
		} catch (ITrustException d) {
			assertEquals("Error retrieving Food Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Try to view it as a nutritionist that isn't designated
	 */
	@Test
	public void testNonDesignatedNutritionistBoundedTotals() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			action.getBoundedDiaryTotals("02/02/2014", "02/02/2014", 1);
			fail("Not his designated nutritionist");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
	}

	/**
	 * Try to view it as a nutritionist that isn't designated
	 */
	@Test
	public void testNonDesignatedNutritionist() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			action.getDiary(1);
			fail("Not his designated nutritionist");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		}
	}

	/**
	 * Test start date after end date
	 */
	@Test
	public void testStartAfterEnd() {
		action = new ViewFoodEntryAction(factory, 335);
		try {
			action.getBoundedDiary("12/12/2014", "12/10/2014", 335);
			fail("Start date after end date");
		} catch (ITrustException d) {
			fail("Why the error?");
		} catch (FormValidationException e) {
			assertEquals("This form has not been validated correctly. "
					+ "The following field are not properly filled in: "
					+ "[Start date must be before end date!]", 
					e.getMessage());
		}
	}

	/**
	 * Test with evil factory
	 */
	@Test
	public void testEvilFactoryGetDiary() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new ViewFoodEntryAction(evil, 1);
		try {
			action.getDiary(1);
			fail("Working with evil factory");
		} catch (ITrustException d) {
			assertEquals("Error retrieving Food Diary", d.getMessage());
		}
	}

	/**
	 * Test getting a bounded food diary
	 */
	@Test
	public void testBoundedFoodDiary() {
		//aaron has multiple days
		action = new ViewFoodEntryAction(factory, 335);
		try {
			List<FoodEntryBean> beans = 
					action.getBoundedDiary("04/13/2014", "04/13/2014", 335);
			assertEquals(1, beans.size());
			FoodEntryBean entry = beans.get(0);
			assertEquals("Snack", entry.getMealType().toString());
			assertEquals("Oreos", entry.getFood());
			assertEquals(53.0, entry.getServings(), .001);
			assertEquals(140.0, entry.getCalories(), .001);
			assertEquals(7.0, entry.getFatGrams(), .001);
			assertEquals(90.0, entry.getMilligramsSodium(), .001);
			assertEquals(21.0, entry.getCarbGrams(), .001);
			assertEquals(13.0, entry.getSugarGrams(), .001);
			assertEquals(1.0, entry.getFiberGrams(), .001);
			assertEquals(0.0, entry.getProteinGrams(), .001);
			
			//now get the totals
			List<FoodEntryBean> totals = 
					action.getBoundedDiaryTotals("04/13/2014", "04/13/2014", 335);
			assertEquals(1, totals.size());
			FoodEntryBean total = totals.get(0);
			assertEquals(7420.0, total.getCalories(), .001);
			assertEquals(371.0, total.getFatGrams(), .001);
			assertEquals(4770.0, total.getMilligramsSodium(), .001);
			assertEquals(1113.0, total.getCarbGrams(), .001);
			assertEquals(53.0, total.getFiberGrams(), .001);
			assertEquals(689.0, total.getSugarGrams(), .001);
			assertEquals(0.0, total.getProteinGrams(), .001);
		} catch (ITrustException d) {
			fail("Why the error?");
		} catch (FormValidationException d) {
			fail("No errors in dates");
		}
	}

	/**
	 * Test start date after end date
	 */
	@Test
	public void testStartAfterEndTotals() {
		action = new ViewFoodEntryAction(factory, 335);
		try {
			action.getBoundedDiaryTotals("12/12/2014", "12/10/2014", 335);
			fail("Start date after end date");
		} catch (ITrustException d) {
			fail("Why the error?");
		} catch (FormValidationException e) {
			assertEquals("This form has not been validated correctly. "
					+ "The following field are not properly filled in: "
					+ "[Start date must be before end date!]", 
					e.getMessage());
		}
	}

	/**
	 * Try to view it as a nutritionist that isn't designated
	 */
	@Test
	public void testNonDesignatedNutritionistTotals() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			action.getDiaryTotals(1);
			fail("Not his designated nutritionist");
		} catch (ITrustException e) {
			assertEquals("You do not have permission to view the Food Diary!",
					e.getMessage());
		}
	}

	/**
	 * Test that a patient can view his food diary.
	 */
	@Test
	public void testViewingFoodDiaryAsPatient() {
		action = new ViewFoodEntryAction(factory, 334);
		try {
			List<FoodEntryBean> foodDiary = action.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean entry1 = foodDiary.get(0);
			FoodEntryBean entry2 = foodDiary.get(1);
			//now that we know we have 2 of them, 
			//make sure they are the right ones
			assertEquals("09/30/2012", entry1.getDateEatenStr().toString());
			assertEquals("Breakfast", entry1.getMealType().name());
			assertEquals("Hot dog", entry1.getFood());
			assertEquals(4.0, entry1.getServings(), .001);
			assertEquals(80.0, entry1.getCalories(), .001);
			assertEquals(5.0, entry1.getFatGrams(), .001);
			assertEquals(480.0, entry1.getMilligramsSodium(), .001);
			assertEquals(2.0, entry1.getCarbGrams(), .001);
			assertEquals(0.0, entry1.getFiberGrams(), .001);
			assertEquals(0.0, entry1.getSugarGrams(), .001);
			assertEquals(5.0, entry1.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			assertEquals("09/30/2012", entry2.getDateEatenStr().toString());
			assertEquals("Lunch", entry2.getMealType().name());
			assertEquals("Mango Passionfruit Juice", entry2.getFood());
			assertEquals(1.2, entry2.getServings(), .001);
			assertEquals(130.0, entry2.getCalories(), .001);
			assertEquals(0.0, entry2.getFatGrams(), .001);
			assertEquals(25.0, entry2.getMilligramsSodium(), .001);
			assertEquals(32.0, entry2.getCarbGrams(), .001);
			assertEquals(0.0, entry2.getFiberGrams(), .001);
			assertEquals(29.0, entry2.getSugarGrams(), .001);
			assertEquals(1.0, entry2.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			//now check the totals
			List<FoodEntryBean> totals = action.getDiaryTotals(334);
			assertEquals(1, totals.size());
			FoodEntryBean total = totals.get(0);
			assertEquals(476.0, total.getCalories(), .001);
			assertEquals(20.0, total.getFatGrams(), .001);
			assertEquals(1950.0, total.getMilligramsSodium(), .001);
			assertEquals(46.4, total.getCarbGrams(), .001);
			assertEquals(0.0, total.getFiberGrams(), .001);
			assertEquals(34.8, total.getSugarGrams(), .001);
			assertEquals(21.2, total.getProteinGrams(), .001);
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test bounded diary with bad dates
	 */
	@Test
	public void testFoodDiaryBadDates() {
		action = new ViewFoodEntryAction(factory, 1);
		try {
			action.getBoundedDiary("", "", 1);
			fail("Bad dates");
		} catch (FormValidationException e) {
			assertEquals("This form has not been validated correctly. "
					+ "The following field are not properly "
					+ "filled in: [Enter dates in MM/dd/yyyy]", 
					e.getMessage());
		} catch (ITrustException d) {
			fail("Wanted bad dates");
		}
	}

	/**
	 * Log in as the HCP Spencer Reid who does have the specialty of
	 * nutritionist, so she should be able to view food entries. View
	 * the Food Entries for Patient Jennifer Jareau who has some
	 * food entries already in her diary.
	 */
	@Test
	public void testViewingFoodDiaryWithEntriesAsNutritionist() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			List<FoodEntryBean> foodDiary = action.getDiary(334);
			assertEquals(2, foodDiary.size());
			FoodEntryBean entry1 = foodDiary.get(0);
			FoodEntryBean entry2 = foodDiary.get(1);
			//now that we know we have 2 of them, make sure they are the 
			//right ones
			assertEquals("09/30/2012", entry1.getDateEatenStr().toString());
			assertEquals("Breakfast", entry1.getMealType().name());
			assertEquals("Hot dog", entry1.getFood());
			assertEquals(4.0, entry1.getServings(), .001);
			assertEquals(80.0, entry1.getCalories(), .001);
			assertEquals(5.0, entry1.getFatGrams(), .001);
			assertEquals(480.0, entry1.getMilligramsSodium(), .001);
			assertEquals(2.0, entry1.getCarbGrams(), .001);
			assertEquals(0.0, entry1.getFiberGrams(), .001);
			assertEquals(0.0, entry1.getSugarGrams(), .001);
			assertEquals(5.0, entry1.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			assertEquals("09/30/2012", entry2.getDateEatenStr().toString());
			assertEquals("Lunch", entry2.getMealType().name());
			assertEquals("Mango Passionfruit Juice", entry2.getFood());
			assertEquals(1.2, entry2.getServings(), .001);
			assertEquals(130.0, entry2.getCalories(), .001);
			assertEquals(0.0, entry2.getFatGrams(), .001);
			assertEquals(25.0, entry2.getMilligramsSodium(), .001);
			assertEquals(32.0, entry2.getCarbGrams(), .001);
			assertEquals(0.0, entry2.getFiberGrams(), .001);
			assertEquals(29.0, entry2.getSugarGrams(), .001);
			assertEquals(1.0, entry2.getProteinGrams(), .001);
			assertEquals(334, entry1.getPatientID());
			
			//now check the totals
			List<FoodEntryBean> totals = action.getDiaryTotals(334);
			assertEquals(1, totals.size());
			FoodEntryBean total = totals.get(0);
			assertEquals(476.0, total.getCalories(), .001);
			assertEquals(20.0, total.getFatGrams(), .001);
			assertEquals(1950.0, total.getMilligramsSodium(), .001);
			assertEquals(46.4, total.getCarbGrams(), .001);
			assertEquals(0.0, total.getFiberGrams(), .001);
			assertEquals(34.8, total.getSugarGrams(), .001);
			assertEquals(21.2, total.getProteinGrams(), .001);
			
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
			
	}

	/**
	 * Ensures HCPs with specialty of nutritionist can still view a food diary
	 * even when the food diary is empty.
	 */
	@Test
	public void testViewingEmptyFoodDiaryAsHCP() {
		action = new ViewFoodEntryAction(factory, 9000000071L);
		try {
			List<FoodEntryBean> foodDiary = action.getDiary(333);
			assertEquals(0, foodDiary.size());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test with evil factory
	 */
	@Test
	public void testEvilFactoryGetBoundedDiaryTotals() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new ViewFoodEntryAction(evil, 1);
		try {
			action.getBoundedDiaryTotals("", "", 1);
			fail("Working with evil factory");
		} catch (ITrustException d) {
			assertEquals("Error retrieving Food Diary", d.getMessage());
		} catch (FormValidationException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test that HCP's that are not specialists in nutrition are unable to
	 * view Food Diary Entries.
	 */
	@Test
	public void testViewingFoodDiaryWithEntriesAsNonNutritionistHCP() {
		action = new ViewFoodEntryAction(factory, 9000000000L); 
		//log in as Doctor Kelly
		List<FoodEntryBean> foodDiary = null;
		try {
			foodDiary = action.getDiary(334); 
			fail("Non Nutritionist can view Food Diary");
		} catch (ITrustException d) {
			assertEquals("You do not have permission"
					+ " to view the Food Diary!", d.getMessage());
			assertNull(foodDiary);
		}
	}
}

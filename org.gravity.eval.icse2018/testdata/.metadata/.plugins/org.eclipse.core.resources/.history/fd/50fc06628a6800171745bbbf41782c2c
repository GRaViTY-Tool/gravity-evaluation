package edu.ncsu.csc.itrust.beans.forms;

import java.util.List;

import edu.ncsu.csc.itrust.action.RequestRecordsReleaseAction;
import edu.ncsu.csc.itrust.beans.RecordsReleaseBean;

public class RecordsReleaseForm{
	private String releaseHospitalID = "";
	private String recipientFirstName = "";
	private String recipientLastName = "";
	private String recipientPhone = "";
	private String recipientEmail = "";
	private String recipientHospitalName = "";
	private String recipientHospitalAddress = "";
	private String requestJustification = " ";
	
	private Boolean digitalSignature = false;
	
	public RecordsReleaseForm(){};
	
	public String getReleaseHospitalID(){
		return releaseHospitalID;
	}
	
	public void setReleaseHospitalID(String hospitalID){
		this.releaseHospitalID = hospitalID;
	}
	
	public String getRecipientFirstName(){
		return recipientFirstName;
	}
	
	public void setRecipientFirstName(String firstName){
		this.recipientFirstName = firstName;
	}
	
	public String getRecipientLastName(){
		return recipientLastName;
	}
	
	public void setRecipientLastName(String lastName){
		this.recipientLastName = lastName;
	}
	
	public String getRecipientPhone(){
		return recipientPhone;
	}
	
	public void setRecipientPhone(String phone){
		this.recipientPhone = phone;
	}
	
	public String getRecipientEmail(){
		return recipientEmail;
	}
	
	public void setRecipientEmail(String email){
		this.recipientEmail = email;
	}
	
	public String getRecipientHospitalName(){
		return recipientHospitalName;
	}
	
	public void setRecipientHospitalName(String hospitalName){
		this.recipientHospitalName = hospitalName;
	}
	
	public String getRecipientHospitalAddress(){
		return recipientHospitalAddress;
	}
	
	public void setRecipientHospitalAddress(String hospitalAddress){
		this.recipientHospitalAddress = hospitalAddress;
	}
	
	public String getRequestJustification(){
		return requestJustification;
	}
	
	public void setRequestJustification(String justification){
		this.requestJustification = justification;
	}
	
	public Boolean getDigitalSignature(){
		return digitalSignature;
	}
	
	public void setDigitalSignature(Boolean signed){
		this.digitalSignature = signed;
	}

	public void testGetAllPatientReleaseRequests() {
		//Get the initial amount of release requests for the patient
		List<RecordsReleaseBean> releases = action.getAllPatientReleaseRequests();
		int size = releases.size();
		
		RecordsReleaseForm form = new RecordsReleaseForm();
		form.setReleaseHospitalID("1");
		form.setRecipientHospitalName("New Hospital");
		form.setRecipientHospitalAddress("123 Fake Street");
		form.setRecipientFirstName("BillyBob");
		form.setRecipientLastName("Joe");
		form.setRecipientPhone("919-123-4567");
		form.setRecipientEmail("bbjoe@yahoo.com");
		form.setRequestJustification("Just for kicks n' giggles");
		form.setDigitalSignature(true);
		
		//Insert 1 record first
		assertEquals("Request successfully sent", action.addRecordsRelease(form));
		//Get new list of release requests and check that the size has incremented by 1
		releases = action.getAllPatientReleaseRequests();
		assertEquals(++size, releases.size());
		
		//Insert another record
		assertEquals("Request successfully sent", action.addRecordsRelease(form));
		//Get new list of release requests and check that the size has incremented by 1
		releases = action.getAllPatientReleaseRequests();
		assertEquals(++size, releases.size());
	}

	public void testEvilFactory() {
		action = new RequestRecordsReleaseAction(evilFactory, 102L);
		
		//Attempt to insert a good request form
		RecordsReleaseForm form = new RecordsReleaseForm();
		form.setReleaseHospitalID("1");
		form.setRecipientHospitalName("New Hospital");
		form.setRecipientHospitalAddress("123 Fake Street");
		form.setRecipientFirstName("BillyBob");
		form.setRecipientLastName("Joe");
		form.setRecipientPhone("919-123-4567");
		form.setRecipientEmail("bbjoe@yahoo.com");
		form.setRequestJustification("Just for kicks n' giggles");
		form.setDigitalSignature(true);
		assertEquals("Error: There was an error in the database", action.addRecordsRelease(form));
		
		//Attempt to get the patient's records release requests
		assertTrue(action.getAllPatientReleaseRequests().isEmpty());
		
		//Attempt to get the patient's name
		assertEquals("", action.getPatientName());
		
		//Attempt to get a hospital's name
		assertEquals("", action.getHospitalName(""));
		
		//Attempt to get all patient hospitals
		assertTrue(action.getAllPatientHospitals().isEmpty());
		
		//Attempt to get the patient's list of represented patients
		assertTrue(action.getRepresented().isEmpty());
	}

	public void testAddRecordsRelease() {
		//Insert a good request
		RecordsReleaseForm form = new RecordsReleaseForm();
		form.setReleaseHospitalID("1");
		form.setRecipientHospitalName("New Hospital");
		form.setRecipientHospitalAddress("123 Fake Street");
		form.setRecipientFirstName("BillyBob");
		form.setRecipientLastName("Joe");
		form.setRecipientPhone("919-123-4567");
		form.setRecipientEmail("bbjoe@yahoo.com");
		form.setRequestJustification("Just for kicks n' giggles");
		form.setDigitalSignature(true);
		assertEquals("Request successfully sent", action.addRecordsRelease(form));
		
		//Insert a bad request form without a digital signature
		RecordsReleaseForm noSigForm = new RecordsReleaseForm();
		noSigForm.setReleaseHospitalID("1");
		noSigForm.setRecipientHospitalName("New Hospital");
		noSigForm.setRecipientHospitalAddress("123 Fake Street");
		noSigForm.setRecipientFirstName("BillyBob");
		noSigForm.setRecipientLastName("Joe");
		noSigForm.setRecipientPhone("919-123-4567");
		noSigForm.setRecipientEmail("bbjoe@yahoo.com");
		noSigForm.setRequestJustification("Just for kicks n' giggles");
		noSigForm.setDigitalSignature(false);
		assertEquals("Error: Digital signature does not match name on record", action.addRecordsRelease(noSigForm));
		
		//Insert a bad request form that has not been filled
		RecordsReleaseForm unfilledForm = new RecordsReleaseForm();
		String unfilledFormMsg = "This form has not been validated correctly. The following field are not properly "
				+ "filled in: [Release Hospital ID: Between 1 and 10 digits, Recipient hospital name: "
				+ "Between 1 and 30 alphanumerics, space, ', and ., Recipient hospital address: Up to 100 "
				+ "alphanumeric characters, comma, and ., Doctor's first name: Up to 20 Letters, space, ' and -, "
				+ "Doctor's last name: Up to 20 Letters, space, ' and -, Doctor's phone number: xxx-xxx-xxxx, "
				+ "Doctor's email address: Up to 30 alphanumeric characters and symbols . and _ @], "
				+ "Digital signature does not match name on record";
		assertEquals(unfilledFormMsg, action.addRecordsRelease(unfilledForm));
		
		//Insert a bad request form completely unfilled except for the digital signature
		unfilledForm.setDigitalSignature(true);
		String unfilledFormMsg2 = "This form has not been validated correctly. The following field are not properly "
				+ "filled in: [Release Hospital ID: Between 1 and 10 digits, Recipient hospital name: "
				+ "Between 1 and 30 alphanumerics, space, ', and ., Recipient hospital address: Up to 100 "
				+ "alphanumeric characters, comma, and ., Doctor's first name: Up to 20 Letters, space, ' and -, "
				+ "Doctor's last name: Up to 20 Letters, space, ' and -, Doctor's phone number: xxx-xxx-xxxx, "
				+ "Doctor's email address: Up to 30 alphanumeric characters and symbols . and _ @]";
		assertEquals(unfilledFormMsg2, action.addRecordsRelease(unfilledForm));
		
	}

	public void testNoRequestJustification() throws Exception {
		RecordsReleaseForm rr = new RecordsReleaseForm();
		rr.setReleaseHospitalID("1");
		rr.setRecipientHospitalName("New Hospital");
		rr.setRecipientHospitalAddress("123 Fake Street");
		rr.setRecipientFirstName("BillyBob");
		rr.setRecipientLastName("Joe");
		rr.setRecipientPhone("919-123-4567");
		rr.setRecipientEmail("bbjoe@yahoo.com");
		rr.setRequestJustification("");
		rr.setDigitalSignature(true);
		validator.validate(rr);
	}
	
}
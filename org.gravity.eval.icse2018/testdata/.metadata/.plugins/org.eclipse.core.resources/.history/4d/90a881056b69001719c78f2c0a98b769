/**
 * BSD-style license; for more info see http://pmd.sourceforge.net/license.html
 */
package net.sourceforge.pmd.typeresolution.rules;

import net.sourceforge.pmd.AbstractRule;
import net.sourceforge.pmd.ast.ASTBlock;
import net.sourceforge.pmd.ast.ASTBlockStatement;
import net.sourceforge.pmd.ast.ASTClassOrInterfaceType;
import net.sourceforge.pmd.ast.ASTFormalParameters;
import net.sourceforge.pmd.ast.ASTMethodDeclaration;
import net.sourceforge.pmd.ast.ASTMethodDeclarator;

import java.util.List;

/**
 * The method clone() should only be implemented if the class implements the
 * Cloneable interface with the exception of a final method that only throws
 * CloneNotSupportedException. This version uses PMD's type resolution
 * facilities, and can detect if the class implements or extends a Cloneable
 * class
 * 
 * @author acaplan
 * 
 */
public class CloneMethodMustImplementCloneable extends AbstractRule {

    public Object visit(ASTMethodDeclaration node, Object data) {

        if (node.isFinal()) {
            List blocks = node.findChildrenOfType(ASTBlock.class);
            if (blocks.size() == 1) {
                blocks = node.findChildrenOfType(ASTBlockStatement.class);
                if (blocks.size() == 1) {
                    ASTBlockStatement block = (ASTBlockStatement) blocks.get(0);
                    ASTClassOrInterfaceType type = (ASTClassOrInterfaceType) block.getFirstChildOfType(ASTClassOrInterfaceType.class);
                    if (type != null && type.getType() != null && type.getNthParent(9).equals(node) && type.getType().equals(CloneNotSupportedException.class)) {
                        return data;
                    } else if (type != null && type.getType() == null && "CloneNotSupportedException".equals(type.getImage())) {
                        return data;
                    }
                }
            }
        }
        return super.visit(node, data);
    }

    public Object visit(ASTMethodDeclarator node, Object data) {
        if (!"clone".equals(node.getImage())) {
            return data;
        }
        int countParams = ((ASTFormalParameters) node.jjtGetChild(0)).jjtGetNumChildren();
        if (countParams != 0) {
            return data;
        }
        addViolation(data, node);
        return data;
    }
}
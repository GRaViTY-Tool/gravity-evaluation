/*
 * ProjectResource.java
 *
 * Created on 27. Mai 2003, 08:11
 */

package net.sourceforge.ganttproject.resource;

import java.awt.Color;
import java.awt.Graphics;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

import net.sourceforge.ganttproject.GanttProject;
import net.sourceforge.ganttproject.GanttTask;
import net.sourceforge.ganttproject.GanttTree;
import net.sourceforge.ganttproject.roles.Role;
import net.sourceforge.ganttproject.task.ResourceAssignment;
import net.sourceforge.ganttproject.task.Task;

/**
 *
 * @author  barmeier
 */
public abstract class ProjectResource {
    
    protected int id;
    protected String name;
    private double costsPerUnit;
    private int maximumUnitsPerDay;
    private String unitMeasure; // means hours, days, meter, ...
    private String description;
    
    public void setName(String name) {
        this.name=name;
    }
    
    public String getName() {
        return name;
    }
    
    public void setDescription(String description) {
        this.description=description;
    }
    
    public String getDescription() {
        return description;
    }

    public void setUnitMeasure(String unitMeasure) {
        this.unitMeasure=unitMeasure;
    }
    
    public String getUnitMeasure() {
        return unitMeasure;
    }
    
    public void setCostsPerUnit(double costsPerUnit) {
        this.costsPerUnit=costsPerUnit;
    }
    
    public double getCostsPerUnit() {
        return costsPerUnit;
    }
    
    public void setMaximumUnitsPerDay(int maximumUnitsPerDay) {
        this.maximumUnitsPerDay=maximumUnitsPerDay;
    }
    
    public int getMaximumUnitsPerDay() {
        return maximumUnitsPerDay;
    }
    
    public void setId(int id) {
        if (this.id==-1)        // setting the id is only allowed when id is not assigned
            this.id=id;
    }
    
    public int getId() {
        return id;
    }
    
    
    public String toString() {
        return name;
    }

	/** Paint the assigned resources after the task */
	public void paintResources (int x, int y, Task task, Graphics g) {
		//Draw the assigned resources name
		//ArrayList users = task.getUsersList();
	    ResourceAssignment[] assignments = task.getAssignments();
		if(assignments.length>0) {
			
			String resourceList="";
			
			for(int i=assignments.length-1;i>=0;i--) {
	            ProjectResource next = assignments[i].getResource();
	            resourceList+=next.getName();
	            if(i!=0) {
	                resourceList+=", ";
	            }
			}
		
			g.setColor(Color.black);
			g.drawString(resourceList,x,y);		
		}
	}

	/** write the resources. */
	private void writeResources(OutputStreamWriter out) throws IOException 
	{
		//parse all resources
		for (int i = 0; i < resources.size(); i++)
	    {
	    	HumanResource p = (HumanResource) resources.get(i);
	    	
	    	//ID
			if(csvOptions.bExportResourceID)
				out.write(correctField(""+p.getId())+
						(bFixedSize?"":csvOptions.sSeparatedChar));
			//Name
			if(csvOptions.bExportResourceName)
				out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
						correctField(p.getName())+
						(bFixedSize?"":csvOptions.sSeparatedTextChar+
						csvOptions.sSeparatedChar));
			//Mail
			if(csvOptions.bExportResourceMail)
				out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
						correctField(p.getMail())+
						(bFixedSize?"":csvOptions.sSeparatedTextChar+
						csvOptions.sSeparatedChar));
			//Phone
			if(csvOptions.bExportResourcePhone)
				out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
						correctField(p.getPhone())+
						(bFixedSize?"":csvOptions.sSeparatedTextChar+
						csvOptions.sSeparatedChar));
			//Role
			if(csvOptions.bExportResourcePhone) {
				Role role = p.getRole();
		        String sRoleID = "0";
		        if(role != null) sRoleID = role.getPersistentID();
		        
				out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
						correctField(sRoleID)+
						(bFixedSize?"":csvOptions.sSeparatedTextChar+
						csvOptions.sSeparatedChar));
			}
			out.write("\n");
	    }
	} //end of write resources

	/**set the maximum size for all strings. */
	void getMaxSize()
	{
		iMaxSize = 0;
		for(Iterator it=lot.iterator(); it.hasNext();)
	    {
			DefaultMutableTreeNode node = (DefaultMutableTreeNode) it.next();
			if(!node.isRoot())
			{
				GanttTask task = (GanttTask)(node.getUserObject());
	
				if(csvOptions.bExportTaskID){
					String s=""+task.getTaskID();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskName){
					String s=""+getName(node, task);
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskStartDate){
					String s=""+task.getStart();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskEndDate){
					String s=""+task.getEnd();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskDuration){
					String s=""+task.getLength();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskPercent){
					String s=""+task.getCompletionPercentage();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskWebLink){
					String s=""+getWebLink(task);
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskResources){
					String s=""+getAssignments(task);
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskNotes){
					String s=""+task.getNotes();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}	
				
			}
	    }
		
		//parse all resources
		for (int i = 0; i < resources.size(); i++)
		{
		   	HumanResource p = (HumanResource) resources.get(i);
		   	
		   	if(csvOptions.bExportResourceID){
				String s=""+p.getId();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourceName){
				String s=""+p.getName();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourceMail){
				String s=""+p.getMail();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourcePhone){
				String s=""+p.getPhone();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourceRole){
		   		Role role = p.getRole();
		        String sRoleID = "0";
		        if(role != null) sRoleID = role.getPersistentID();
				String s=""+sRoleID;
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		}
		
	} //get maxIndentation end

	/** Write the resources on the file */
	  public void writeResources(Writer fout) {
	    try {
	      ArrayList resources = peop.getPeople();
	      int cpt_resources = 1;
	      for (int i = 0; i < resources.size(); i++, cpt_resources++) {
	        HumanResource p = (HumanResource) resources.get(i);
	        String string = p.getName();
	        byte[] btf8 = string.getBytes("UTF-8");
	
	        fout.write(s + s + "<resource id=\"" + p.getId() + "\" name=\"" +
	                   (p.getName()!=null?correct(p.getName()):"") +
	                   "\" function=\"" + p.getRole().getPersistentID() + "\" contacts=\"" +
	                   (p.getMail()!=null?correct(p.getMail()):"") + "\" phone=\""+ (p.getPhone()!=null?correct(p.getPhone()):"") +"\" />\n");
	
	        usersId.put(p.getName(), new Integer(cpt_resources));
	      }
	    }
	    catch (Exception e) {
	      System.out.println(e);
	    }
	  }

	/** Write the resources */
		private static String writeResources(GanttProject appli)
		{
			StringBuffer out = new StringBuffer();				
			
			HumanResourceManager resMan=(HumanResourceManager) appli.getHumanResourceManager();
	        ArrayList lor=resMan.getResources();
			
	//		String []_function=RoleManager.Access.getInstance().getRoleNames();
			for(int i=0, j=lor.size(); i < j; i++) {
				HumanResource p = (HumanResource)lor.get(i);
				out.append("\t\t<resource>\n");
				out.append("\t\t\t<name>" + correct(p.toString()) + "</name>\n");
				out.append("\t\t\t<role>" + correct(p.getRole().getName()) + "</role>\n");
				out.append("\t\t\t<mail>" + (p.getMail()==null || p.getMail().length() == 0 ? " " : correct(p.getMail())) + "</mail>\n");
				out.append("\t\t\t<phone>" + (p.getPhone()==null || p.getPhone().length() == 0 ? " " : correct(p.getPhone())) + "</phone>\n");
				out.append("\t\t</resource>\n");
			}
			return out.toString();
		}

	/** Write the tasks */
	private static String writeTasks(GanttTree tree) {	
		StringBuffer out = new StringBuffer();
		ArrayList lot=tree.getAllTasks();
		for(int i=0, k=lot.size(); i < k; i++) {
	  DefaultMutableTreeNode node = (DefaultMutableTreeNode)lot.get(i);
			Task t = (Task) (node).getUserObject();
	        
	  int depth = 0;
	  TreeNode up = node;
	   while ((up = up.getParent()) != null && up != tree.getRoot()) {
	      depth += 1;
	   }
	
			if(t!=t.getManager().getRootTask()) {
				out.append("\t\t<task depth=\""+depth+"\">\n");
				out.append("\t\t\t<name>" + correct(t.getName())  + "</name>\n");
				out.append("\t\t\t<begin>" + t.getStart()  + "</begin>\n");
				out.append("\t\t\t<end>" + t.getEnd()  + "</end>\n");
				out.append("\t\t\t<milestone>" + (t.isMilestone() ? "true" : "false")  + "</milestone>\n");
				out.append("\t\t\t<progress>" + t.getCompletionPercentage()  + "</progress>\n");
				// list all assigned users
	            StringBuffer usersS = new StringBuffer();
	            ResourceAssignment[] assignments = t.getAssignments();
				if (assignments.length>0) {
				    usersS.append(assignments[0].getResource().getName());
	            }
				for(int j=1;j<assignments.length;j++) {
					usersS.append(", " + assignments[j].getResource().getName());
	            }
				out.append("\t\t\t<assigned-to>" + correct(usersS.toString())  + "</assigned-to>\n");
				out.append("\t\t\t<notes><![CDATA[" + ((t.getNotes() == null || t.getNotes().length() == 0) ? " " : t.getNotes())  + "]]></notes>\n");
				out.append("\t\t</task>\n");				    
			}
		}
		return out.toString();
	}
    
}

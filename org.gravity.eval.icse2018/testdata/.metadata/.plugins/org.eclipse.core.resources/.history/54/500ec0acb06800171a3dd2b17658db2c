/*
 * Created on Oct 25, 2004
 * Updated on May 03, 2007
 *
 */
package net.sf.jabref.mods;

import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import wsi.ra.tool.WSITools;


import net.sf.jabref.AuthorList;

/**
 * @author Michael Wrighton, S M Mahbub Murshed
 *
 * S M Mahbub Murshed : added few functions for convenience. May 15, 2007
 */
public class PersonName {
    protected String givenName = null;
    protected String surname = null;
    protected String middleName = null;

    public PersonName() {
    }

    public PersonName(String name) {
        parseName(name);
    }

    public PersonName(String firstName, String _middleName, String lastName) {
        givenName = firstName;
        middleName = _middleName;
        surname = lastName;
    }

    protected void parseName(String author) {
            // TODO: replace special characters
            Vector<String> v = new Vector<String>();
            String authorMod = AuthorList.fixAuthor_firstNameFirst(author);

            WSITools.tokenize(v, authorMod, " \n\r");

            if (v.size() == 1)
                surname = v.get(0);
            else if (v.size() == 2) {
                givenName = v.get(0);
                surname = v.get(1);
            }
            else {
                givenName = v.get(0);
                middleName = v.get(1);
                surname = v.get(2);
            }
    }

    public String getGivenNames() {
        String result = "";
        if (givenName != null)
            result += givenName;
        if (middleName != null)
            result += " " + middleName;
        return result;
    }

    public String getSurname()
    {
        return surname;
    }

    public void setSurname(String lastName)
    {
        surname = lastName;
    }

    public String getFirstname()
    {
        return givenName;
    }

    public void setFirstname(String firstName)
    {
        givenName = firstName;
    }

    public String getMiddlename()
    {
        return middleName;
    }

    public void setMiddlename(String _middleName)
    {
        middleName = _middleName;
    }

    public String getFullname()
    {
    	String fullName = "";
    	if(givenName != null && givenName != "")
    		fullName += givenName + " "; 
    	if(middleName != null && middleName != "")
    		fullName += middleName + " ";
    	if(surname != null && surname != "")
    		fullName += surname;
    	
    	return fullName.trim();
    }

    public String toString() {
        return surname;
    }

	public Element getDOMrepresentation(Document d) {
	   	try {
	   		Element mods = d.createElement(entryType);
	   		mods.setAttribute("version", "3.0");
	   		// mods.setAttribute("xmlns:xlink:", "http://www.w3.org/1999/xlink");
	   		// title
	   		if(title != null) {
	   			Element titleInfo = d.createElement("titleInfo");
	   			Element mainTitle = d.createElement("title");
	   			mainTitle.appendChild(d.createTextNode(stripNonValidXMLCharacters(title)));
	   			titleInfo.appendChild(mainTitle);
		   		mods.appendChild(titleInfo);
	   		}
	   		if (authors != null) {
	   			for(Iterator<PersonName> iter = authors.iterator(); iter.hasNext();) {
	   				PersonName name = iter.next();
	   				Element modsName = d.createElement("name");
	   				modsName.setAttribute("type", "personal");
	   				if (name.getSurname() != null) {
	   					Element namePart = d.createElement("namePart");
	   					namePart.setAttribute("type", "family");
	   					namePart.appendChild(d.createTextNode(stripNonValidXMLCharacters(name.getSurname())));
	   					modsName.appendChild(namePart);
	   				}
	   				if (name.getGivenNames() != null) {
	   					Element namePart = d.createElement("namePart");
	   					namePart.setAttribute("type", "given");
	   					namePart.appendChild(d.createTextNode(stripNonValidXMLCharacters(name.getGivenNames())));
	   					modsName.appendChild(namePart);
	   				}
	   				Element role = d.createElement("role");
	   				Element roleTerm = d.createElement("roleTerm");
	   				roleTerm.setAttribute("type", "text");
	   				roleTerm.appendChild(d.createTextNode("author"));
	   				role.appendChild(roleTerm);
	   				modsName.appendChild(role);
	   				mods.appendChild(modsName);
	   			}
	   		}
	   		//publisher
	   		Element originInfo = d.createElement("originInfo");
	   		mods.appendChild(originInfo);
	   		if (this.publisher != null) {
	   			Element publisher = d.createElement("publisher");
				publisher.appendChild(d.createTextNode(stripNonValidXMLCharacters(this.publisher)));
	   			originInfo.appendChild(publisher);
	   		}
	   		if (date != null) {
	   			Element dateIssued = d.createElement("dateIssued");
	   			dateIssued.appendChild(d.createTextNode(stripNonValidXMLCharacters(date)));
	   			originInfo.appendChild(dateIssued);
	   		}
	   		Element issuance = d.createElement("issuance");
	   		issuance.appendChild(d.createTextNode(stripNonValidXMLCharacters(this.issuance)));
	   		originInfo.appendChild(issuance);
	   		
	   		if (id != null) {
	   			Element idref = d.createElement("identifier");
	   			idref.appendChild(d.createTextNode(stripNonValidXMLCharacters(id)));
	   			mods.appendChild(idref);
	   			mods.setAttribute("ID", id);
		   		
	   		}
	   		Element typeOfResource = d.createElement("typeOfResource");
	   		typeOfResource.appendChild(d.createTextNode(stripNonValidXMLCharacters(type)));
	   		mods.appendChild(typeOfResource);
	   		
	   		if (genre != null) {
	   			Element genreElement = d.createElement("genre");
	   			genreElement.setAttribute("authority", "marc");
	   			genreElement.appendChild(d.createTextNode(stripNonValidXMLCharacters(genre)));
	   			mods.appendChild(genreElement);
	   		}
	   		
	   		if (host != null) {
	   			Element relatedItem = host.getDOMrepresentation(d);	   			
	   			relatedItem.setAttribute("type","host");	   			
	   			mods.appendChild(relatedItem);
	   		}
	   		if (pages != null) {
	   			mods.appendChild(pages.getDOMrepresentation(d));
	   		}
	   		
	   		/* now generate extension fields for unhandled data */
	   		for(Map.Entry<String, String> theEntry : extensionFields.entrySet()){
	   			Element extension = d.createElement("extension");
	   			String field = theEntry.getKey();
	   			String value = theEntry.getValue();
	   			if (handledExtensions.contains(field))
	   				continue;
	   			Element theData = d.createElement(field);
	   			theData.appendChild(d.createTextNode(stripNonValidXMLCharacters(value)));
	   			extension.appendChild(theData);
	   			mods.appendChild(extension);
	   		}
	   		return mods;
	   	}
	   	catch (Exception e)
		{
	   		System.out.println("Exception caught..." + e);
	   		e.printStackTrace();
	   		throw new Error(e);
		}
	   	// return result;
	   }
}

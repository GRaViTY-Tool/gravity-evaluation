package edu.ncsu.csc.itrust.unit.action;

import junit.framework.TestCase;
import edu.ncsu.csc.itrust.action.ViewHealthRecordsHistoryAction;
import edu.ncsu.csc.itrust.beans.NormalBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.NormalDAO;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.unit.datagenerators.TestDataGenerator;
import edu.ncsu.csc.itrust.unit.testutils.TestDAOFactory;

public class ViewHealthRecordsHistoryActionTest extends TestCase{
	
	private DAOFactory factory = TestDAOFactory.getTestInstance();
	private TestDataGenerator gen = new TestDataGenerator();
	private ViewHealthRecordsHistoryAction action;

	@Override
	protected void setUp() throws Exception {
		gen.clearAllTables();
		gen.standardData();
		
		action = new ViewHealthRecordsHistoryAction(factory, "102", 9000000001L);
	}
	
	public void testGetPercentile() throws DBException {
		NormalDAO normalDAO = new NormalDAO(factory);
		
		double leastPercent = 0;
		double maxPercent = 100;
		double tooLowScore =  -999;
		double tooHighScore = 999;
		assertEquals(maxPercent, action.getPercentile(tooHighScore));
		assertEquals(leastPercent, action.getPercentile(tooLowScore));
		
		double fiftyPercent = 50;
		double midScore = 0;
		assertEquals(fiftyPercent, action.getPercentile(midScore));
		
		//Check all values contained in the normal bean
		double testScore = 2.00;
		NormalBean normalValue = normalDAO.getNormal(testScore);
		double testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_00() * 100));
		assertEquals(testPercent, action.getPercentile(testScore));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_01() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .01));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_02() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .02));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_03() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .03));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_04() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .04));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_05() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .05));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_06() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .06));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_07() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .07));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_08() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .08));
		testPercent = Double.parseDouble(String.format("%.2f", normalValue.get_09() * 100));
		assertEquals(testPercent, action.getPercentile(testScore + .09));
	}
}





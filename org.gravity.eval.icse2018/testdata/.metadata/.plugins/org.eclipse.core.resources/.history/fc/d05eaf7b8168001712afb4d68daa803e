package net.sourceforge.ganttproject.gui;

/**
 *
 * <p>Title: </p>
 *
 * <p>Description: Provide the properties of selected task</p>
 *
 * <p>Copyright: Copyright (c) 2003</p>
 *
 * <p>Company: </p>
 *
 * @author ganttproject
 *
 * @version 1.0
 *
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Vector;

import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.TableColumn;

import net.sourceforge.ganttproject.GanttCalendar;
import net.sourceforge.ganttproject.GanttProject;
import net.sourceforge.ganttproject.GanttTask;
import net.sourceforge.ganttproject.GanttTree;
import net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel;
import net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel;
import net.sourceforge.ganttproject.language.GanttLanguage;
import net.sourceforge.ganttproject.resource.HumanResource;
import net.sourceforge.ganttproject.resource.HumanResourceManager;
import net.sourceforge.ganttproject.shape.JPaintCombo;
import net.sourceforge.ganttproject.shape.ShapePaint;
import net.sourceforge.ganttproject.task.Task;


/**
  *Real panel for editing task properties
  */
public class GanttTaskPropertiesBean

    extends JPanel {

  //Input attributes

  protected GanttTask selectedTask; //Task whose properties will be shown
  
  protected Vector savePredecessors;

  private GanttTree tree; //GanttTree that contain all the tasks information

  private GanttLanguage language = GanttLanguage.getInstance(); // language the panel will display

  private JDialog parent;

  //Output attributes: you can find the definition is GanttTask

//  private String name;

  private int length;

  private int percentComplete;

  private int priority;

  private GanttCalendar start;

  private GanttCalendar end;

  private boolean bilan;

  private String notes;

//  private Hashtable managerHash;
//
//  private Hashtable assignedResources = new Hashtable();
  //private attributes for internal use

  GridBagConstraints gbc = new GridBagConstraints();

  FlowLayout flowL = new FlowLayout(FlowLayout.LEFT, 10, 10);

  JTabbedPane tabbedPane; //TabbedPane that include the following four items

  JPanel generalPanel;

  JPanel predecessorsPanel;

  JPanel resourcesPanel;

  JPanel notesPanel;

  //Components on general pannel

  JPanel firstRowPanel1; //components in first row

  JTextField nameField1;

  JTextField durationField1;

  JLabel nameLabel1;

  JLabel durationLabel1;
  
  JLabel lblWebLink;
  JTextField tfWebLink;
  JButton bWebLink;

  JPanel secondRowPanel1; //components in second row

  JSpinner percentCompleteSlider;

  JLabel percentCompleteLabel1;

  JLabel priorityLabel1;

  JComboBox priorityComboBox;

  JPanel thirdRowPanel1; //componets in third row

  JTextField startDateField1;

  JTextField finishDateField1;

  JLabel startDateLabel1;

  JLabel finishDateLabel1;

  JButton startDateButton1;

  JButton finishDateButton1;

  JPanel lastRowPanel1; //components in last row
  JPanel webLinkPanel; //components in web link panel

  JLabel mileStoneLabel1;

  JCheckBox mileStoneCheckBox1;

  JButton colorButton;

  JButton colorSpace;

  JPanel colorPanel;
  
  /** Shape chooser combo Box */
  JPaintCombo shapeComboBox;

  //Components on predecessors pannel

  JLabel nameLabel2; //first row, here the textfield is un-editable

  JLabel durationLabel2;

  JTextField nameField2;

  JPanel firstRowPanel2;

  JScrollPane predecessorsScrollPane; //second row, a table

  JLabel nameLabelNotes;

  JLabel durationLabelNotes;

  JTextField nameFieldNotes;

  JTextField durationFieldNotes;

  JScrollPane scrollPaneNotes;

  JTextArea noteAreaNotes;

  JPanel firstRowPanelNotes;

  JPanel secondRowPanelNotes;

  //Component on the SOUTH ok CANCEL buttons

  public JButton okButton;

  JButton cancelButton;

  JPanel southPanel;
//    private ResourcesTableModel myResourcesTableModel;
    private TaskDependenciesPanel myDependenciesPanel;
    private TaskAllocationsPanel myAllocationsPanel;
    private boolean isStartFixed;
    private final HumanResourceManager myHumanResourceManager;

    /**add a component to container by using GridBagConstraints.*/

  private void addUsingGBL(Container container, Component component,

                           GridBagConstraints gbc, int x,

                           int y, int w, int h) {
    gbc.gridx = x;
    gbc.gridy = y;
    gbc.gridwidth = w;
    gbc.gridheight = h;
    gbc.weighty = 0;
    container.add(component, gbc);
  }

  /**set the first row in all the tabbed pane. thus give them a common look*/

  private void setFirstRow(Container container, GridBagConstraints gbc,
                           JLabel nameLabel, JTextField nameField,
                           JLabel durationLabel, JTextField durationField) {
    container.setLayout(new GridBagLayout());
    gbc.weightx = 0;
    gbc.weighty = 0;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.insets.right = 15;
    gbc.insets.left = 10;
    gbc.insets.top = 10;
    addUsingGBL(container, nameLabel, gbc, 0, 0, 1, 1);
    addUsingGBL(container, nameField, gbc, 1, 0, 1, 1);
    addUsingGBL(container, durationLabel, gbc, 2, 0, 1, 1);
    gbc.weightx = 1;
    addUsingGBL(container, durationField, gbc, 3, 0, 1, 1);
  }


  /** Add the differents action listener on the differents widgets */
  public void addActionListener(ActionListener l) {

    nameField1.addActionListener(l);
    
    startDateButton1.addActionListener(l);

    finishDateButton1.addActionListener(l);

    okButton.addActionListener(l);

    cancelButton.addActionListener(l);

    durationField1.addActionListener(l);

  }
  
  /** Change the name of the task on all textfiled of task name */
  public void changeNameOfTask() {
  	if(nameField1!=null && nameFieldNotes!=null) {
		String nameOfTask = nameField1.getText().trim();
	  	nameField1.setText(nameOfTask);
		  myDependenciesPanel.nameChanged(nameOfTask);
          myAllocationsPanel.nameChanged(nameOfTask);
		nameFieldNotes.setText(nameOfTask);
	}
  }

  /**Construct the predecessors tabbed pane*/

  private void constructPredecessorsPanel() {
      myDependenciesPanel = new TaskDependenciesPanel(selectedTask);
    predecessorsPanel = myDependenciesPanel.getComponent();
  }

  /**construct the notes pannel*/

  private void constructNotesPanel() {

    notesPanel = new JPanel(new GridBagLayout());

    //first row

    nameLabelNotes = new JLabel(language.getText("name") + ":");

    nameFieldNotes = new JTextField(20);

    durationLabelNotes = new JLabel(language.getText("length") + ":");

    durationFieldNotes = new JTextField(8);

    nameFieldNotes.setEditable(false);

    durationFieldNotes.setEditable(false);

    firstRowPanelNotes = new JPanel();

    setFirstRow(firstRowPanelNotes, gbc, nameLabelNotes, nameFieldNotes,

                durationLabelNotes, durationFieldNotes);

    secondRowPanelNotes = new JPanel();

    secondRowPanelNotes.setBorder(new TitledBorder(new EtchedBorder(),
        language.getText("notesTask") + ":"));

    noteAreaNotes = new JTextArea(8, 40);
    noteAreaNotes.setLineWrap(true);
    noteAreaNotes.setWrapStyleWord(true);
    noteAreaNotes.setBackground(new Color(1.0f, 1.0f, 1.0f));

    scrollPaneNotes = new JScrollPane(noteAreaNotes);

    secondRowPanelNotes.add(scrollPaneNotes);

    JButton bdate = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(
        "/icons/clock_16.gif")));
    bdate.setToolTipText(GanttProject.getToolTip(language.getText("putDate")));
    bdate.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        noteAreaNotes.append("\n"+ GanttCalendar.getDateAndTime() +"\n");
      }
    });
    secondRowPanelNotes.add(bdate);

    gbc.anchor = GridBagConstraints.WEST;

    gbc.insets.right = 15;

    gbc.insets.left = 10;

    gbc.insets.top = 10;

    gbc.weighty = 0;

    addUsingGBL(notesPanel, firstRowPanelNotes, gbc, 0, 0, 1, 1);

    gbc.weighty = 1;

    gbc.gridx = 0;

    gbc.gridy = 1;

    gbc.gridwidth = 1;

    gbc.gridheight = 1;

    notesPanel.add(secondRowPanelNotes, gbc);

  }

  /**Construct the south panel*/

  private void constructSouthPanel() {

    okButton = new JButton(language.getText("ok"));

    okButton.setName("ok");

    if(getRootPane() != null)
    	getRootPane().setDefaultButton(okButton); //set ok the defuault button when press "enter"  --> check because getRootPane()==null !!!
    
    
    
    cancelButton = new JButton(language.getText("cancel"));

    cancelButton.setName("cancel");

    southPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 50, 10));

    southPanel.add(okButton);

    southPanel.add(cancelButton);

  }

  /** Constructor */
  public GanttTaskPropertiesBean(JDialog parent, GanttTask selectedTask,
                                 GanttTree tree,
                                 Hashtable managerHash) {

    this.parent = parent;

    this.selectedTask = selectedTask;
	savePredecessors=selectedTask.getPredecessorsOld();
    myHumanResourceManager  = (HumanResourceManager) managerHash.get(
        "HUMAN_RESOURCE");
    init();

    //this.managerHash = managerHash;

    setSelectedTask(selectedTask);

    setTree(tree);
    
    

    //set predecessor comboBox

    //setUpPredecessorComboColumn(predecessorsTable.getColumnModel().getColumn(1), predecessorsTable); //set column editor

    //setUpTypeComboColumn(predecessorsTable.getColumnModel().getColumn(2)); //set column editor

    //set resources comboBox

    /*      setUpResourcesComboColumn(((ResourceManager)managerHash.get("HUMAN_RESOURCE")).getResources(),
            resourcesTable.getColumnModel().getColumn(0)); //set column editor
     */

    /*
         tabbedPane = new JTabbedPane();
         constructGeneralPanel();
         tabbedPane.add("General", generalPanel);
         constructPredecessorsPanel();
         tabbedPane.add("Predecessors", predecessorsPanel);
         constructResourcesPanel();
         tabbedPane.add("Resources", resourcesPanel);
         constructNotesPanel();
         tabbedPane.add("Notes", notesPanel);
         add(tabbedPane);*/

  }

  /** Init the widgets */
  public void init() {

    tabbedPane = new JTabbedPane();
    tabbedPane.getModel().addChangeListener(new ChangeListener() {
    	public void stateChanged(ChangeEvent e) {
    		changeNameOfTask();
            fireDurationChanged();
	    }
    });
    constructGeneralPanel();

    tabbedPane.addTab(language.getText("general"), 
    		new ImageIcon(getClass().getResource("/icons/properties_16.gif")),generalPanel);

    constructPredecessorsPanel();

    tabbedPane.addTab(language.getText("predecessors"), 
    		new ImageIcon(getClass().getResource("/icons/relashion.gif")),predecessorsPanel);

    constructResourcesPanel();

    tabbedPane.addTab(GanttProject.correctLabel(language.getText("human")), 
    		new ImageIcon(getClass().getResource("/icons/res_16.gif")),resourcesPanel);

    constructNotesPanel();

    tabbedPane.addTab(language.getText("notesTask"), 
    		new ImageIcon(getClass().getResource("/icons/note_16.gif")),notesPanel);
    
    setLayout(new BorderLayout());

    add(tabbedPane, BorderLayout.CENTER);

    constructSouthPanel();

    add(southPanel, BorderLayout.SOUTH);

  }

  
  //Input methods

  /**as the name indicated, it will not replace the original GanttTask in the Tree. */

  public Task getReturnTask() {
      myAllocationsPanel.getTableModel().commit();
    GanttTask returnTask = selectedTask;
    //returnTask.setTaskID(selectedTask.getTaskID());
    returnTask.setName(getTaskName()); //getName()
    returnTask.setWebLink(getWebLink()); //getName()
    returnTask.setMilestone(isBilan());
    returnTask.setChecked(false);
    returnTask.setStart(getStart());
    returnTask.setEnd(getEnd());
    returnTask.setLength(getLength());
    returnTask.setNotes(getNotes());
    returnTask.setCompletionPercentage(getPercentComplete());
    returnTask.setPriority(getPriority());
      returnTask.setStartFixed(isStartFixed);
    returnTask.setColor(colorButton.getBackground());
    if(shapeComboBox.getSelectedIndex()!=0) //only if it's not the default shape
    	returnTask.setShape(new ShapePaint((ShapePaint)shapeComboBox.getSelectedPaint(), Color.white, colorButton.getBackground()));
      myDependenciesPanel.getTableModel().commit();

    return returnTask;

  }

  /**as the name indicated*/

  public void setTree(GanttTree tree) {

    this.tree = tree;

  }

  //Output methods

  /**as the name indicated*/

  public boolean isBilan() {

    bilan = mileStoneCheckBox1.isSelected();

    return bilan;

  }

  /**as the name indicated*/

  public GanttCalendar getEnd() {

    return end;

  }

  /**as the name indicated*/

  public int getLength() {

    length = Integer.parseInt(durationField1.getText().trim());

    return length;

  }

    public void fireDurationChanged() {
        String value = durationField1.getText();
        try {
            int duration = Integer.parseInt(value);
            changeLength(duration);
        }
        catch (NumberFormatException e) {

        }

    }
  /**as the name indicated*/

  public String getNotes() {

    notes = noteAreaNotes.getText();

    return notes;

  }

  /** Return the name of the task*/

  public String getTaskName() {
    String text = nameField1.getText();
    return text == null ? "" : text.trim();
  }
  /** @return the web link of the task. */
  public String getWebLink() {
    String text = tfWebLink.getText();
    return text == null ? "" : text.trim();
  }
  

  /**as the name indicated*/

  public int getPercentComplete() {

    percentComplete = ((Integer)percentCompleteSlider.getValue()).hashCode();

    return percentComplete;

  }

  /** Return the priority level of the task */

  public int getPriority() {
    priority = priorityComboBox.getSelectedIndex();
    return priority;
  }


    public void setStartFixed(boolean startFixed) {
        isStartFixed = startFixed;
        startDateField1.setForeground(isStartFixed ? Color.BLACK : Color.GRAY);
    }

    /** Return the start date of the task */
  public GanttCalendar getStart() {
      start.setFixed(isStartFixed);
    return start;

  }
}


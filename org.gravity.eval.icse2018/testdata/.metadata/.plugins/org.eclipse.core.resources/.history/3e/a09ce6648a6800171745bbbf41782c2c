package edu.ncsu.csc.itrust.beans.forms;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import edu.ncsu.csc.itrust.DBUtil;
import edu.ncsu.csc.itrust.DateUtil;
import edu.ncsu.csc.itrust.beans.VisitFlag;
import edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader;
import edu.ncsu.csc.itrust.exception.DBException;

/**
 * A form to contain data coming from reminding a user about an upcoming office visit.
 * 
 * A form is a bean, kinda. You could say that it's a form of a bean :) 
 * Think of a form as a real-life administrative form that you would fill out to get 
 * something done, not necessarily making sense by itself.
 */
public class VisitReminderReturnForm {

	private long hcpID;
	private long patientID;
	private String lastName;
	private String firstName;
	private String phoneNumber;
	private ArrayList<VisitFlag> visitFlags;

	public VisitReminderReturnForm(long hcpID, long patientID, String lastName, String firstName,
			String phone) {
		this.hcpID = hcpID;
		this.patientID = patientID;
		this.lastName = lastName;
		this.firstName = firstName;
		setPhoneNumber(phone);
	}

	public long getHcpID() {
		return hcpID;
	}

	public void setHcpID(long hcpID) {
		this.hcpID = hcpID;
	}

	public long getPatientID() {
		return patientID;
	}

	public void setPatientID(long patientID) {
		this.patientID = patientID;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phone) {
		this.phoneNumber = phone;
	}

	public VisitFlag[] getVisitFlags() {
		//Keep similar flags next to each other
		Collections.sort(visitFlags, new Comparator<VisitFlag>() {
			public int compare(VisitFlag vf1, VisitFlag vf2) {
				return vf1.getType().compareToIgnoreCase(vf2.getType());
			}
		});
		return visitFlags.toArray(new VisitFlag[visitFlags.size()]);
	}

	public void setVisitFlags(VisitFlag[] visitFlags) {
		this.visitFlags = new ArrayList<VisitFlag>();
		for (VisitFlag flag : visitFlags) {
			this.visitFlags.add(flag);
		}
	}

	public void addVisitFlag(VisitFlag flag) {
		if (null == visitFlags)
			visitFlags = new ArrayList<VisitFlag>();
		visitFlags.add(flag);
	}

	public void testGetDiagnosedVisitNeeders() throws DBException, IOException, FileNotFoundException,
			SQLException {
		gen.patient1();
		gen.patient2();
		gen.patient3();
		List<VisitReminderReturnForm> visRems = visRemDAO.getDiagnosedVisitNeeders(LHCP);
		VisitReminderReturnForm reminder = visRems.get(0);
		assertEquals(reminder.getLastName(), "Person");
		assertEquals(reminder.getPatientID(), 1);
		assertEquals(reminder.getVisitFlags()[0].getType(), VisitFlag.DIAGNOSED);
		assertEquals(reminder.getVisitFlags()[0].getValue(), "250.00");
	}

	public void testGetFluShotDelinquentsEmptyList() throws Exception {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		gen.patient1();
		gen.patient2();
		gen.patient3();
		boolean thisYear = DateUtil.currentlyInMonthRange(9, 12);
	
		java.sql.Date september = new java.sql.Date(0l), december = new java.sql.Date(0l);
		DateUtil.setSQLMonthRange(september, 8, thisYear ? 0 : 1, december, 11, thisYear ? 0 : 1);
		try {
			conn = factory.getConnection();
			ps = conn.prepareStatement("SELECT DISTINCT "
					+ "? as hid, ov.patientid, p.lastname, p.firstname, " + "p.phone "
					+ "FROM officevisits ov, patients p " + "WHERE ov.patientid=p.mid "
					+ "AND p.dateofdeath IS NULL "
					+ "AND p.dateofbirth < DATE_SUB(CURDATE(), INTERVAL 50 YEAR) " + "AND patientid NOT IN "
					+ "(SELECT patientid FROM officevisits ov, ovmedication om " + "WHERE ov.id=om.visitid "
					+ "AND NDCode IN (90656, 90658, 90660) " + "AND ((StartDate BETWEEN ? AND ?) "
					+ "OR (EndDate BETWEEN ? AND ?))) " + "ORDER BY lastname, firstname, ov.patientid");
			ps.setLong(1, this.LHCP);
			ps.setDate(2, september);
			ps.setDate(3, december);
			ps.setDate(4, september);
			ps.setDate(5, december);
			rs = ps.executeQuery();
			VisitReminderReturnFormLoader loader = new VisitReminderReturnFormLoader();
			List<VisitReminderReturnForm> patients = loader.loadList(rs);
			assertEquals(2, patients.size());
			VisitReminderReturnForm patient1 = patients.get(0);
			assertEquals(9000000003l, patient1.getHcpID());
			assertEquals(3l, patient1.getPatientID());
			assertEquals("Care", patient1.getFirstName());
			assertEquals("919-971-0000", patient1.getPhoneNumber());
		} finally {
			DBUtil.closeConnection(conn, ps);
		}
	}
}

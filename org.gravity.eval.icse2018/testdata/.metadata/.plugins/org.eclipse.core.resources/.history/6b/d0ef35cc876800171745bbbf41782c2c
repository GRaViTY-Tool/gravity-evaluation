/*
 * @(#)BezierNodeHandle.java  1.0.1  2006-04-21
 *
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 */

package org.jhotdraw.draw;

import org.jhotdraw.util.*;
import org.jhotdraw.undo.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.util.*;
import org.jhotdraw.geom.*;
/**
 * BezierNodeHandle.
 *
 *
 * @author Werner Randelshofer
 * @version 1.0.1 2006-04-21 Don't change node type when right mouse button
 * is down.
 * <br>1.0 January 20, 2006 Created.
 */
public class BezierNodeHandle extends AbstractHandle {
    protected int index;
    private CompositeEdit edit;
    private BezierPath.Node oldNode;
    
    /** Creates a new instance. */
    public BezierNodeHandle(BezierFigure owner, int index) {
        super(owner);
        this.index = index;
    }
    protected BezierFigure getBezierFigure() {
        return (BezierFigure) getOwner();
    }
    
    protected Point getLocation() {
        return getBezierFigure().getPointCount() > index ?
            view.drawingToView(getBezierFigure().getPoint(index, 0)) :
            new Point(10,10);
    }
    
    protected Rectangle basicGetBounds() {
        Rectangle r = new Rectangle(getLocation());
        r.grow(getHandlesize() / 2, getHandlesize() / 2);
        return r;
    }
    
    
    
    public void trackStep(Point anchor, Point lead, int modifiersEx) {
        BezierFigure figure = getBezierFigure();
        figure.willChange();
        Point2D.Double p = view.getConstrainer().constrainPoint(view.viewToDrawing(lead));
        BezierPath.Node n = figure.getNode(index);
        fireAreaInvalidated(n);
        n.moveTo(p);
        fireAreaInvalidated(n);
        figure.basicSetNode(index, n);
        figure.changed();
    }
    
    private void fireAreaInvalidated(BezierPath.Node v) {
        Rectangle2D.Double dr = new Rectangle2D.Double(v.x[0], v.y[0], 0, 0);
        for (int i=1; i < 3; i++) {
            dr.add(v.x[i], v.y[i]);
        }
        Rectangle vr = view.drawingToView(dr);
        vr.grow(getHandlesize(), getHandlesize());
        fireAreaInvalidated(vr);
    }
    
    @Override public boolean isCombinableWith(Handle h) {
       /*
        if (super.isCombinableWith(h)) {
            BezierNodeHandle that = (BezierNodeHandle) h;
            return that.index == this.index &&
                    that.getBezierFigure().getNodeCount() ==
                    this.getBezierFigure().getNodeCount();
        }*/
        return false;
    }
}

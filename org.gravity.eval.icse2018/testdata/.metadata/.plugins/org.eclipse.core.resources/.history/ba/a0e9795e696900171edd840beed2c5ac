package edu.ncsu.csc.itrust.unit.action;

import junit.framework.TestCase;

import org.junit.Test;

import edu.ncsu.csc.itrust.action.AddFoodEntryAction;
import edu.ncsu.csc.itrust.action.ViewFoodEntryAction;
import edu.ncsu.csc.itrust.beans.FoodEntryBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.ITrustException;
import edu.ncsu.csc.itrust.unit.datagenerators.TestDataGenerator;
import edu.ncsu.csc.itrust.unit.testutils.EvilDAOFactory;
import edu.ncsu.csc.itrust.unit.testutils.TestDAOFactory;

/**
 * Tests adding food entries to the food diary
 *
 */
public class AddFoodEntryActionTest extends TestCase {

	private AddFoodEntryAction action;
	private ViewFoodEntryAction viewAction;
	private DAOFactory factory = TestDAOFactory.getTestInstance();
	private TestDataGenerator gen;
	private FoodEntryBean foodBean;
	
	@Override
	protected void setUp() throws Exception {
		gen = new TestDataGenerator();
		gen.clearAllTables();
		gen.standardData();	
		foodBean = new FoodEntryBean();
		foodBean.setDateEatenStr("12/12/2012");
		foodBean.setMealType("Breakfast");
		foodBean.setFood("Ice Cream");
		foodBean.setServings(2.0);
		foodBean.setCalories(30.5);
		foodBean.setFatGrams(4.0);
		foodBean.setMilligramsSodium(2.0);
		foodBean.setCarbGrams(6.0);
		foodBean.setSugarGrams(1.0);
		foodBean.setFiberGrams(4.3);
		foodBean.setProteinGrams(3.5);
	}
	
	/**
	 * Clears all of the tables.
	 */
	protected void tearDown() throws Exception {
		gen.clearAllTables();
	}
	
	/**
	 * Tests that dates in the future cannot be entered in.
	 * Eventually this test will fail because I am hardcoding in the date.
	 * However, since it is in the future 100 years, I do not expect this to be
	 * a problem (I spent about 30 minutes trying to use the Calendar class to 
	 * add one day to today's date, but I could'nt get it to format correctly).
	 */
	@Test
	public void testFoodEntryFutureDate() {
		action = new AddFoodEntryAction(factory, 333);
		String date = "03/17/2115";
		foodBean.setDateEatenStr(date);
		try {
			action.addEntry(foodBean);
			fail("Date is in the future");
		} catch (FormValidationException e) {
			assertTrue(e.getMessage().contains("The Date Eaten must be before "
					+ "or on today's Date."));
		}
	}
	
	/**
	 * Ensures that only breakfast, lunch, dinner, or snack is allowed
	 * as the meal type
	 */
	@Test
	public void testInvalidMealType() {
		action = new AddFoodEntryAction(factory, 333);
		try {
			foodBean.setMealType("Brunch");
			action.addEntry(foodBean);
			fail("Invalid meal type");
		} catch (IllegalArgumentException d) {
			assertEquals("Meal Type Brunch does not exist", d.getMessage());
		} catch (FormValidationException e) {
			fail("Setting meal type to brunch should have failed");
		}
	}
	
	/**
	 * Test that the number of calories cannot be negative.
	 * @throws ITrustException 
	 */
	@Test
	public void testNumCaloriesNotNegative() throws ITrustException {
		action = new AddFoodEntryAction(factory, 333);
		viewAction = new ViewFoodEntryAction(factory, 333);
		foodBean.setCalories(0);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("Success: Ice Cream for 12/12/2012 was added "
					+ "successfully!", result);
			FoodEntryBean bean = viewAction.getDiary(333).get(0);
			assertEquals(1, viewAction.getDiary(333).size());
			assertEquals(0.0, bean.getCalories());
			//now try to make them negative
			foodBean.setCalories(-1);
			try {
				action.addEntry(foodBean);
				fail("Calories cannot be negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Calories per Serving"));
			}
		} catch (FormValidationException e) {
			fail("Number of calories can be 0");
		}
	}
	
	/**
	 * Test with an evil factory
	 */
	@Test
	public void testEvilFactory() {
		EvilDAOFactory evil = new EvilDAOFactory();
		action = new AddFoodEntryAction(evil, 333);
		try {
			String result = action.addEntry(foodBean);
			assertEquals("A database exception has occurred. Please see "
					+ "the log in the console for stacktrace", result);
		} catch (FormValidationException d) {
			fail(d.getMessage());
		}
		
	}


}

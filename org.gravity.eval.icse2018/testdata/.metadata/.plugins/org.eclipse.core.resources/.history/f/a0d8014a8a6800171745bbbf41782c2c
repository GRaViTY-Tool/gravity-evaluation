package edu.ncsu.csc.itrust.beans;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.junit.Test;

import edu.ncsu.csc.itrust.action.AddExerciseEntryAction;
import edu.ncsu.csc.itrust.action.ViewExerciseEntryAction;
import edu.ncsu.csc.itrust.enums.ExerciseType;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.ITrustException;

;

/**
 * ExerciseEntryBean.java Version 1 4/2/2015 Copyright notice: none Contains all
 * of the information for an entry into the Exercise Diary.
 */
public class ExerciseEntryBean extends EntryBean {

	/**
	 * Unique Primary key so entries can be edited and deleted
	 */
	private long entryID;

	/**
	 * The Date this exercise was performed
	 */
	private String strDate = new SimpleDateFormat("MM/dd/yyyy")
			.format(new Date());

	/**
	 * Was the exercise cardio or weights?
	 */
	private ExerciseType exerciseType;

	/**
	 * The name of the exercise.
	 */
	private String strName;

	/**
	 * How many hours were spent exercising?
	 */
	private double hoursWorked;

	/**
	 * How many calories were burned?
	 */
	private int caloriesBurned;

	/**
	 * If we're weight training, how many sets were performed?
	 */
	private int numSets;

	/**
	 * If we're weight training, how many reps were in each set?
	 */
	private int numReps;

	/**
	 * The MID of the user this exercise entry belongs to
	 */
	private long patientID;

	/**
	 * EntryID of the label belonging to this entry
	 */
	private long labelID;
	
	/**
	 * Returns the id of this entry so it can be edited/deleted.
	 * 
	 * @return unique id of the exercise entry
	 */
	public long getEntryID() {
		return entryID;
	}

	/**
	 * Sets the id of this entry
	 * 
	 * @param id
	 *            the unique id of a exercise entry
	 */
	public void setEntryID(long id) {
		entryID = id;
	}

	/**
	 * Returns a string representation of when the exercise was performed
	 * 
	 * @return string representation of the date on which the exercise was
	 *         performed
	 */
	public String getStrDate() {
		return strDate;
	}

	/**
	 * Parses the strDate to produce a date in the format MM/dd/yyyy
	 * 
	 * @return the date on which the exercise was performed
	 */
	public Date getDate() {
		try {
			return new SimpleDateFormat("MM/dd/yyyy").parse(strDate);
		} catch (ParseException e) {

			return null;
		}
	}

	/**
	 * Sets the date as a string
	 * 
	 * @param strDate
	 *            when the exercise was performed
	 */
	public void setStrDate(String strDate) {
		this.strDate = strDate;
	}

	/**
	 * Which type of exercise was performed?
	 * 
	 * @return the type of exercise
	 */
	public ExerciseType getExerciseType() {
		return exerciseType;
	}

	/**
	 * Sets the exercise type
	 * 
	 * @param exerciseType
	 *            what type of exercise was it
	 */
	public void setExerciseType(String exerciseType) {
		this.exerciseType = ExerciseType.parse(exerciseType);
	}

	/**
	 * @return the strName
	 */
	public String getStrName() {
		return strName;
	}

	/**
	 * @param strName
	 *            the strName to set
	 */
	public void setStrName(String strName) {
		this.strName = strName;
	}

	/**
	 * @return the hoursWorked
	 */
	public double getHoursWorked() {
		return hoursWorked;
	}

	/**
	 * @param hoursWorked
	 *            the hoursWorked to set
	 */
	public void setHoursWorked(double hoursWorked) {
		this.hoursWorked = hoursWorked;
	}

	/**
	 * @return the caloriesBurned
	 */
	public int getCaloriesBurned() {
		return caloriesBurned;
	}

	/**
	 * @param caloriesBurned
	 *            the caloriesBurned to set
	 */
	public void setCaloriesBurned(int caloriesBurned) {
		this.caloriesBurned = caloriesBurned;
	}

	/**
	 * @return the numSets
	 */
	public int getNumSets() {
		return numSets;
	}

	/**
	 * @param numSets
	 *            the numSets to set
	 */
	public void setNumSets(int numSets) {
		this.numSets = numSets;
	}

	/**
	 * @return the numReps
	 */
	public int getNumReps() {
		return numReps;
	}

	/**
	 * @param numReps
	 *            the numReps to set
	 */
	public void setNumReps(int numReps) {
		this.numReps = numReps;
	}

	/**
	 * The patient that performed this exercise
	 * 
	 * @return patient ID that performed this exercise
	 */
	public long getPatientID() {
		return patientID;
	}

	/**
	 * Patient that performed this exercise
	 * 
	 * @param patientID
	 *            patient id of who performed this exercise
	 */
	public void setPatientID(long patientID) {
		this.patientID = patientID;
	}
	
	/**
	 * Label of this meal
	 * @return label of this meal
	 */
	public long getLabelID() {
		return labelID;
	}
	
	/**
	 * Label of this meal
	 * @param label of this meal
	 */
	public void setLabelID(long labelID) {
		this.labelID = labelID;
	}

	/**
	 * Log in as the HCP Duyu Ivanlyft who does have the specialty of
	 * trainer, so she should be able to view exercise entries. View
	 * the Exercise Entries for Patient Random Person who has some
	 * exercise entries already in their diary.
	 */
	@Test
	public void testViewingExerciseDiaryWithEntriesAsTrainer() {
		action = new ViewExerciseEntryAction(factory, 9000000081L);
		try {
			List<ExerciseEntryBean> exerciseDiary = action.getDiary(1);
			assertEquals(2, exerciseDiary.size());
			ExerciseEntryBean entry1 = exerciseDiary.get(0);
			ExerciseEntryBean entry2 = exerciseDiary.get(1);
			//now that we know we have 2 of them, make sure they are the 
			//right ones
			assertEquals("12/14/2012", entry1.getStrDate().toString());
			assertEquals("Weights", entry1.getExerciseType().name());
			assertEquals("Bench Press", entry1.getStrName());
			assertEquals(0.5, entry1.getHoursWorked());
			assertEquals(50, entry1.getCaloriesBurned());
			assertEquals(1, entry1.getPatientID());
			
			assertEquals("12/12/2012", entry2.getStrDate().toString());
			assertEquals("Cardio", entry2.getExerciseType().name());
			assertEquals("Running", entry2.getStrName());
			assertEquals(1.0, entry2.getHoursWorked());
			assertEquals(100, entry2.getCaloriesBurned());
			assertEquals(1, entry1.getPatientID());
			
			//now check the totals
			List<ExerciseEntryBean> totals = action.getDiaryTotals(1);
			assertEquals(2, totals.size());
			ExerciseEntryBean total = totals.get(0);
			assertEquals(.5, total.getHoursWorked(), .0001);
			assertEquals(50, total.getCaloriesBurned());
			ExerciseEntryBean total2 = totals.get(1);
			assertEquals(1.0, total2.getHoursWorked(), .0001);
			assertEquals(100, total2.getCaloriesBurned());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
			
	}

	/**
	 * Testing that we can get the diary when we are searching for range of dates
	 */
	@Test
	public void testViewExerciseDiaryDateRange() {
		action = new ViewExerciseEntryAction(factory, 1);
		try {
			List<ExerciseEntryBean> exerciseDiary = action.getBoundedDiary("12/12/2012", "12/12/2012", 1);
			assertEquals(1, exerciseDiary.size());
			ExerciseEntryBean entry1 = exerciseDiary.get(0);
			//now that we know we have 1 of them, make sure they are the 
			//right ones
			assertEquals("12/12/2012", entry1.getStrDate().toString());
			assertEquals("Cardio", entry1.getExerciseType().name());
			assertEquals("Running", entry1.getStrName());
			assertEquals(1.0, entry1.getHoursWorked());
			assertEquals(100, entry1.getCaloriesBurned());
			assertEquals(1, entry1.getPatientID());
			
			
			//now check the totals
			List<ExerciseEntryBean> totals = action.getBoundedDiaryTotals("12/12/2012", "12/12/2012", 1);
			assertEquals(1, totals.size());
			ExerciseEntryBean total = totals.get(0);
			assertEquals(1.0, total.getHoursWorked(), .001);
			assertEquals(100, total.getCaloriesBurned());
		} catch (ITrustException e) {
			fail(e.getMessage());
		} catch (FormValidationException d) {
			fail("Do not want an exception");
		}
	}

	/**
	 * Test that a patient can view their exercise diary.
	 */
	@Test
	public void testViewingExerciseDiaryAsPatient() {
		action = new ViewExerciseEntryAction(factory, 1);
		try {
			List<ExerciseEntryBean> exerciseDiary = action.getDiary(1);
			assertEquals(2, exerciseDiary.size());
			ExerciseEntryBean entry1 = exerciseDiary.get(0);
			ExerciseEntryBean entry2 = exerciseDiary.get(1);
			//now that we know we have 2 of them, 
			//make sure they are the right ones
			assertEquals("12/14/2012", entry1.getStrDate().toString());
			assertEquals("Weights", entry1.getExerciseType().name());
			assertEquals("Bench Press", entry1.getStrName());
			assertEquals(0.5, entry1.getHoursWorked());
			assertEquals(50, entry1.getCaloriesBurned());
			assertEquals(1, entry1.getPatientID());
			
			assertEquals("12/12/2012", entry2.getStrDate().toString());
			assertEquals("Cardio", entry2.getExerciseType().name());
			assertEquals("Running", entry2.getStrName());
			assertEquals(1.0, entry2.getHoursWorked());
			assertEquals(100, entry2.getCaloriesBurned());
			assertEquals(1, entry1.getPatientID());
			
			//now check the totals
			List<ExerciseEntryBean> totals = action.getDiaryTotals(1);
			assertEquals(2, totals.size());
			ExerciseEntryBean total = totals.get(0);
			assertEquals(.5, total.getHoursWorked(), .0001);
			assertEquals(50, total.getCaloriesBurned());
			ExerciseEntryBean total2 = totals.get(1);
			assertEquals(1.0, total2.getHoursWorked(), .0001);
			assertEquals(100, total2.getCaloriesBurned());
		} catch (ITrustException e) {
			fail(e.getMessage());
		}
	}

	/**
	 * Test that the name of the exercise cannot be null or empty
	 */
	@Test
	public void testNullOrEmptyExerciseName() {
		action = new AddExerciseEntryAction(factory, 1);
		try {
			exerciseBean.setExerciseType(null);
			action.addEntry(exerciseBean);
			fail("Exercise Name is null");
		} catch (IllegalArgumentException d) {
			assertEquals("Exercise Type null does not exist", d.getMessage());
			try {
				exerciseBean.setExerciseType("");
				action.addEntry(exerciseBean);
				fail("Exercise Name is empty");
			} catch (IllegalArgumentException dd) {
				assertEquals("Exercise Type  does not exist", dd.getMessage());
			} catch (FormValidationException e) {
				fail("Should have already been caught");
			}
		} catch (FormValidationException ee) {
			fail("Should have already been caught");
		}
	}

	/**
	 * Tests that dates in the future cannot be entered in.
	 * Eventually this test will fail because I am hardcoding in the date.
	 * However, since it is in the future 100 years, I do not expect this to be
	 * a problem (I spent about 30 minutes trying to use the Calendar class to 
	 * add one day to today's date, but I could'nt get it to format correctly).
	 */
	@Test
	public void testExerciseEntryFutureDate() {
		action = new AddExerciseEntryAction(factory, 1);
		String date = "03/17/2115";
		exerciseBean.setStrDate(date);
		try {
			action.addEntry(exerciseBean);
			fail("Date is in the future");
		} catch (FormValidationException e) {
			assertTrue(e.getMessage().contains("The Date Performed must be before "
					+ "or on today's Date."));
		}
	}

	/**
	 * Tests that dates must be entered in the correct format.
	 */
	@Test
	public void testExerciseEntryInvalidDateFormat() {
		action = new AddExerciseEntryAction(factory, 1);
		exerciseBean.setStrDate("2014/04/04");
		try {
			action.addEntry(exerciseBean);
			fail("Date is in the wrong format");
		} catch (FormValidationException e) {
			assertEquals("This form has not been validated correctly. "
					+ "The following field are not properly filled in: "
					+ "[Date Performed: MM/DD/YYYY]", e.getMessage());
		}
	}

	/**
	 * Test that the number of hours worked must be a positive number
	 */
	@Test
	public void testNumHoursPositive() {
		action = new AddExerciseEntryAction(factory, 1);
		exerciseBean.setHoursWorked(0);
		try {
			action.addEntry(exerciseBean);
			fail("Hours are 0");
		} catch (FormValidationException e) {
			assertTrue(e.getMessage().contains("Number of Hours"));
			exerciseBean.setHoursWorked(-1);
			try {
				action.addEntry(exerciseBean);
				fail("Hours are negative");
			} catch (FormValidationException d) {
				assertTrue(d.getMessage().contains("Number of Hours"));
			}
		}
	}
}
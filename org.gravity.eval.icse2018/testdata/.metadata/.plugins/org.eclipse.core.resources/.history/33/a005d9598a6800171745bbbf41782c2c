package edu.ncsu.csc.itrust.unit.report;

import java.util.List;

import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.PatientDAO;
import edu.ncsu.csc.itrust.report.DemographicReportFilter;
import edu.ncsu.csc.itrust.report.DemographicReportFilter.DemographicReportFilterType;
import edu.ncsu.csc.itrust.unit.datagenerators.TestDataGenerator;
import edu.ncsu.csc.itrust.unit.testutils.TestDAOFactory;
import junit.framework.TestCase;

public class DemographicReportFilterTest extends TestCase {

	private DAOFactory factory = TestDAOFactory.getTestInstance();
	private PatientDAO pDAO = factory.getPatientDAO();
	private List<PatientBean> allPatients;
	private DemographicReportFilter filter;
	private TestDataGenerator gen = new TestDataGenerator();

	public void testFilterByParentFirstNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_FIRST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}
	
	public void testFilterByChildFirstNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CHILD_FIRST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}
	
	public void testFilterByChildLastNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CHILD_LAST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}
	
	public void testFilterByInsuranceZip() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_ZIP, "19003-2715", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(5, res.size());
		assertTrue(res.get(0).getMID() == 2L);
		assertTrue(res.get(1).getMID() == 22L);
		assertTrue(res.get(2).getMID() == 25L);
		assertTrue(res.get(3).getMID() == 23L);
		assertTrue(res.get(4).getMID() == 24L);
	}

	public void testFilterByInsuranceZipNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_ZIP, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}
	
	public void testFilterByLowerAge() throws Exception { 
		filter = new DemographicReportFilter(DemographicReportFilterType.LOWER_AGE_LIMIT, "60", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(9, res.size());
		assertTrue(res.get(0).getMID() == 1L);
		assertTrue(res.get(1).getMID() == 3L);
		assertTrue(res.get(2).getMID() == 4L);
		assertTrue(res.get(3).getMID() == 42L);
	}

	public void testFilterByLowerAgeNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.LOWER_AGE_LIMIT, "Dalpe", factory);
		try{
			@SuppressWarnings("unused")
			List<PatientBean> res = filter.filter(allPatients);
		}catch(NumberFormatException e){
			//exception is good.
			return;
		}
		assertTrue(false);
	}

	public void testFilterByInvalidUpperAge() throws Exception { 
		filter = new DemographicReportFilter(DemographicReportFilterType.UPPER_AGE_LIMIT, "-1", factory);
		try{
			@SuppressWarnings("unused")
			List<PatientBean> res = filter.filter(allPatients);
		}catch(NumberFormatException e){
			//exception is good
			return;
		}
		assertTrue(false);
	}
	
	public void testFilterByICState() throws Exception {
		PatientBean testPat = pDAO.getPatient(1L);
		testPat.setIcState("MO");
		pDAO.editPatient(testPat, 9000000000L);
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_STATE, "MO", factory);
		List<PatientBean> filteredList = filter.filter(pDAO.getAllPatients());
		
		int originalFromMOSize = 0;
		for (PatientBean p : allPatients) {
			if (p.getIcState().equals("MO"))
				originalFromMOSize++;
		}
		
		assertEquals(originalFromMOSize + 1, filteredList.size());
		PatientBean patient = filteredList.get(0);
		assertEquals(1L, patient.getMID());
	}
	
	public void testFilterByICAddress1() throws Exception {
		PatientBean testPat = pDAO.getPatient(1L);
		testPat.setIcAddress1("FilterTest");
		pDAO.editPatient(testPat, 9000000000L);
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_ADDR, "FilterTest", factory);
		List<PatientBean> filteredList = filter.filter(pDAO.getAllPatients());
		
		assertEquals(1, filteredList.size());
		PatientBean patient = filteredList.get(0);
		assertEquals(1L, patient.getMID());
	}
	
	public void testFilterByICAddress3() throws Exception {
		PatientBean testPat = pDAO.getPatient(1L);
		testPat.setIcAddress1("Filter");
		testPat.setIcAddress2("Test");
		pDAO.editPatient(testPat, 9000000000L);
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_ADDR, "Filter Test", factory);
		List<PatientBean> filteredList = filter.filter(pDAO.getAllPatients());
		
		assertEquals(1, filteredList.size());
		PatientBean patient = filteredList.get(0);
		assertEquals(1L, patient.getMID());
	}
	
	public void testGetFilterTypeString() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.DEACTIVATED, "only", factory);
		assertEquals("DEACTIVATED", filter.getFilterTypeString());
		
		filter = new DemographicReportFilter(DemographicReportFilterType.STATE, "only", factory);
		assertEquals("STATE", filter.getFilterTypeString());
	}
}

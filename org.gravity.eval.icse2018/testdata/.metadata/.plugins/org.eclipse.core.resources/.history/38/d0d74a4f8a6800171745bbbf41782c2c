package edu.ncsu.csc.itrust.unit.action;

import java.util.ArrayList;
import java.util.List;

import edu.ncsu.csc.itrust.action.EditLabProceduresAction;
import edu.ncsu.csc.itrust.beans.LabProcedureBean;
import edu.ncsu.csc.itrust.beans.PersonnelBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.unit.datagenerators.TestDataGenerator;
import edu.ncsu.csc.itrust.unit.testutils.TestDAOFactory;
import junit.framework.TestCase;

/**
 * EditLabProceduresActionTest
 */
public class EditLabProceduresActionTest extends TestCase {
	
	private DAOFactory factory = TestDAOFactory.getTestInstance();
	private TestDataGenerator gen = new TestDataGenerator();
	private EditLabProceduresAction action;

	@Override
	protected void setUp() throws Exception {
		super.setUp();
		gen.clearAllTables();
		gen.standardData();
	}

	/**
	 * testEditLabProcedure
	 * @throws Exception
	 */
	public void testEditLabProcedure() throws Exception {
		action = new EditLabProceduresAction(factory, 9000000000L, "2", "952");
		assertEquals(1, action.getLabProcedures().size());
		LabProcedureBean bean = action.getLabProcedures().get(0);
		assertEquals("Performed the procedure", bean.getCommentary());
		bean.setCommentary("But I don't want to be a pirate!");
		bean.setOvID(952);
		bean.setPid(2);
		action.editLabProcedure(bean);
		assertEquals(1, action.getLabProcedures().size());
		bean = action.getLabProcedures().get(0);
		assertEquals("But I don't want to be a pirate!", bean.getCommentary());
	}

	/**
	 * testAutoAssignLabTech
	 * @throws Exception
	 */
	public void testAutoAssignLabTech() throws Exception {
		//setup: assign lab procs to techs
		//the lab tech with the least amount of work should get the assignment
	}
	
	/**
	 * testGetLabTechs
	 * @throws Exception
	 */
	public void testGetLabTechs() throws Exception {
		action = new EditLabProceduresAction(factory, 9000000000L, "1", "11");
		List<PersonnelBean> list = action.getLabTechs();
		assertEquals(3, list.size());
		ArrayList<String> names = new ArrayList<String>();
		for (PersonnelBean bean: list) {
			names.add(bean.getFullName());
		}
		assertTrue(names.contains("Lab Dude"));
		assertTrue(names.contains("Nice Guy"));
		assertTrue(names.contains("Cool Person"));
	}
	
	/**
	 * testGetLabTechQueueSize
	 * @throws Exception
	 */
	public void testGetLabTechQueueSize() throws Exception {
		action = new EditLabProceduresAction(factory, 9000000000L, "1", "11");
		assertEquals(19, action.getLabTechQueueSize(5000000001L));
		assertEquals(26, action.getLabTechQueueSize(5000000002L));
		assertEquals(0, action.getLabTechQueueSize(5000000003L));
		assertEquals(0, action.getLabTechQueueSize(5432100001L)); // bad id
	}

}

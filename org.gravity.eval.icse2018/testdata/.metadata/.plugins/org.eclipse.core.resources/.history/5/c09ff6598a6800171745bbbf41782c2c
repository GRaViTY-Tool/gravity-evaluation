package edu.ncsu.csc.itrust.report;

import java.util.ArrayList;
import java.util.List;
import edu.ncsu.csc.itrust.beans.FamilyMemberBean;
import edu.ncsu.csc.itrust.beans.PatientBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.mysql.FamilyDAO;

/**
 * 
 *
 */
public class DemographicReportFilter extends ReportFilter {

	/**
	 * 
	 *
	 */
	public enum DemographicReportFilterType {
		MID("MID"),
		GENDER("GENDER"),
		LAST_NAME("LAST NAME"),
		FIRST_NAME("FIRST NAME"),
		CONTACT_EMAIL("CONTACT EMAIL"),
		STREET_ADDR("STREET ADDRESS"),
		CITY("CITY"),
		STATE("STATE"),
		ZIP("ZIPCODE"),
		PHONE("PHONE #"),
		EMER_CONTACT_NAME("EMERGENCY CONTACT NAME"),
		EMER_CONTACT_PHONE("EMERGENCY CONTACT PHONE #"),
		INSURE_NAME("INSURANCE COMPANY NAME"),
		INSURE_ADDR("INSURANCE COMPANY ADDRESS"),
		INSURE_CITY("INSURANCE COMPANY CITY"),
		INSURE_STATE("INSURANCE COMPANY STATE"),
		INSURE_ZIP("INSURANCE COMPANY ZIPCODE"),
		INSURE_PHONE("INSURANCE COMPANY PHONE #"),
		INSURE_ID("INSURANCE COMPANY ID"),
		PARENT_FIRST_NAME("PARENT'S FIRST NAME"),
		PARENT_LAST_NAME("PARENT'S LAST NAME"),
		CHILD_FIRST_NAME("CHILD'S FIRST NAME"),
		CHILD_LAST_NAME("CHILD'S LAST NAME"),
		SIBLING_FIRST_NAME("SIBLING'S FIRST NAME"),
		SIBLING_LAST_NAME("SIBLING'S LAST NAME"),
		LOWER_AGE_LIMIT("LOWER AGE LIMIT"),
		UPPER_AGE_LIMIT("UPPER AGE LIMIT"),
		DEACTIVATED("DEACTIVATED");

		private final String name;

		/**
		 * 
		 * @param name
		 */
		private DemographicReportFilterType(String name) {
			this.name = name;
		}

		/**
		 * 
		 */
		@Override
		public String toString() {
			return this.name;
		}
	}

	private DemographicReportFilterType filterType;
	private String filterValue;
	private FamilyDAO fDAO;

	/**
	 * 
	 * @param filterType
	 * @param filterValue
	 */
	public DemographicReportFilter(DemographicReportFilterType filterType, String filterValue,
			DAOFactory factory) {
		this.filterType = filterType;
		this.filterValue = filterValue;
		fDAO = factory.getFamilyDAO();
	}

	/**
	 * 
	 * @param name
	 * @return
	 */
	public static DemographicReportFilterType filterTypeFromString(String name) {
		for (DemographicReportFilterType type : DemographicReportFilterType.values()) {
			if (type.name().equalsIgnoreCase(name)) {
				return type;
			}
		}
		return null;
	}

	/**
	 * 
	 */
	@Override
	public List<PatientBean> filter(List<PatientBean> patients) {
		List<PatientBean> prunedList = new ArrayList<PatientBean>();
		boolean add = filterValue != null && !filterValue.isEmpty();
		if (add) {
			for (PatientBean patient : patients) {
				add = false;
				switch (filterType) {
				case MID:
					add = filterValue.equalsIgnoreCase(Long.toString(patient.getMID()));
					break;
				case GENDER:
					add = filterValue.equalsIgnoreCase(patient.getGender().toString());
					break;
				case LAST_NAME:
					add = patient.getLastName().equalsIgnoreCase(filterValue);
					break;
				case FIRST_NAME:
					add = patient.getFirstName().equalsIgnoreCase(filterValue);
					break;
				case CONTACT_EMAIL:
					add = patient.getEmail().equalsIgnoreCase(filterValue);
					break;
				case STREET_ADDR:
					add = patient.getStreetAddress1().equalsIgnoreCase(filterValue)
							|| patient.getStreetAddress2().equalsIgnoreCase(filterValue)
							|| (patient.getStreetAddress1() + " " + patient.getStreetAddress2())
									.equalsIgnoreCase(filterValue);
					break;
				case CITY:
					add = patient.getCity().equalsIgnoreCase(filterValue);
					break;
				case STATE:
					add = patient.getState().equalsIgnoreCase(filterValue);
					break;
				case ZIP:
					add = patient.getZip().contains(filterValue);
					break;
				case PHONE:
					add = patient.getPhone().equalsIgnoreCase(filterValue);
					break;
				case EMER_CONTACT_NAME:
					add = patient.getEmergencyName().equalsIgnoreCase(filterValue);
					break;
				case EMER_CONTACT_PHONE:
					add = patient.getEmergencyPhone().equalsIgnoreCase(filterValue);
					break;
				case INSURE_NAME:
					add = patient.getIcName().equalsIgnoreCase(filterValue);
					break;
				case INSURE_ADDR:
					add = patient.getIcAddress1().equalsIgnoreCase(filterValue)
							|| patient.getIcAddress2().equalsIgnoreCase(filterValue)
							|| (patient.getIcAddress1() + " " + patient.getIcAddress2())
									.equalsIgnoreCase(filterValue);
					break;
				case INSURE_CITY:
					add = patient.getIcCity().equalsIgnoreCase(filterValue);
					break;
				case INSURE_STATE:
					add = patient.getIcState().equalsIgnoreCase(filterValue);
					break;
				case INSURE_ZIP:
					add = patient.getIcZip().equalsIgnoreCase(filterValue);
					break;
				case INSURE_PHONE:
					add = patient.getIcPhone().equalsIgnoreCase(filterValue);
					break;
				case INSURE_ID:
					add = patient.getIcID().equalsIgnoreCase(filterValue);
					break;
				case PARENT_FIRST_NAME:
					try {
						List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());
						for (FamilyMemberBean parent : parents) {
							if (filterValue.equalsIgnoreCase(parent.getFirstName())) {
								add = true;
								break;
							}
						}
					} catch (Exception e) {
						break;
					}
					break;
				case PARENT_LAST_NAME:
					try {
						List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());
						for (FamilyMemberBean parent : parents) {
							if (parent.getLastName().equals(filterValue)) {
								add = true;
								break;
							}
						}
					} catch (Exception e) {
						break;
					}
					break;
				case CHILD_FIRST_NAME:
					try {
						List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());
						for (FamilyMemberBean child : children) {
							if (child.getFirstName().equals(filterValue)) {
								add = true;
								break;
							}
						}
					} catch (Exception e) {
						break;
					}
					break;
				case CHILD_LAST_NAME:
					try {
						List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());
						for (FamilyMemberBean child : children) {
							if (child.getLastName().equals(filterValue)) {
								add = true;
								break;
							}
						}
					} catch (Exception e) {
						break;
					}
					break;
				case SIBLING_FIRST_NAME:
					try {
						List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());
						for (FamilyMemberBean sibling : siblings) {
							if (sibling.getFirstName().equals(filterValue)) {
								add = true;
								break;
							}
						}
					} catch (Exception e) {
						break;
					}
					break;
				case SIBLING_LAST_NAME:
					try {
						List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());
						for (FamilyMemberBean sibling : siblings) {
							if (sibling.getLastName().equals(filterValue)) {
								add = true;
								break;
							}
						}
					} catch (Exception e) {
						break;
					}
					break;
				case LOWER_AGE_LIMIT:
					int lalval = Integer.parseInt(filterValue);
					if(lalval<0){
						throw new NumberFormatException("Age must be GTE 0!");
					}
					add = lalval <= patient.getAge();
					break;
				case UPPER_AGE_LIMIT:
					int ualval = Integer.parseInt(filterValue);
					if(ualval<0){
						throw new NumberFormatException("Age must be GTE 0!");
					}
					add = patient.getAge() > 0 && ualval >= patient.getAge();
					break;
				case DEACTIVATED:
					if(filterValue.equals("exclude")){
						add = patient.getDateOfDeactivationStr().equals("");
					}else if(filterValue.equals("only")){
						add = !patient.getDateOfDeactivationStr().equals("");
					}else{
						add=true;
					}
					break;
				default:
					break;
				}

				if (add) {
					prunedList.add(patient);
				}
			}
		}
		return prunedList;
	}

	/**
	 * 
	 * @return
	 */
	public DemographicReportFilterType getFilterType() {
		return filterType;
	}
	
	/**
	 * 
	 * @return
	 */
	public String getFilterTypeString() {
		return filterType.toString();
	}

	/**
	 * 
	 * @return
	 */
	public String getFilterValue() {
		return filterValue;
	}

	/**
	 * 
	 */
	@Override
	public String toString() {
		String out = "Filter by " + filterType.toString() + " with value " + filterValue;
		return out;
	}

	public void testFilterByLastNameNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.LAST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterBySiblingFirstName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.SIBLING_FIRST_NAME, "Baby", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(4, res.size());
		assertTrue(res.get(0).getMID() == 5L);
		assertTrue(res.get(1).getMID() == 6L);
		assertTrue(res.get(2).getMID() == 7L);
		assertTrue(res.get(3).getMID() == 8L);
	
	}

	public void testToString() {
		filter = new DemographicReportFilter(DemographicReportFilterType.LAST_NAME, "val", factory);
		String expected = "Filter by LAST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.CHILD_FIRST_NAME, "val", factory);
		expected = "Filter by CHILD'S FIRST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.CHILD_LAST_NAME, "val", factory);
		expected = "Filter by CHILD'S LAST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.CITY, "val", factory);
		expected = "Filter by CITY with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.CONTACT_EMAIL, "val", factory);
		expected = "Filter by CONTACT EMAIL with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.EMER_CONTACT_NAME, "val", factory);
		expected = "Filter by EMERGENCY CONTACT NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.EMER_CONTACT_PHONE, "val", factory);
		expected = "Filter by EMERGENCY CONTACT PHONE # with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.FIRST_NAME, "val", factory);
		expected = "Filter by FIRST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_ADDR, "val", factory);
		expected = "Filter by INSURANCE COMPANY ADDRESS with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_CITY, "val", factory);
		expected = "Filter by INSURANCE COMPANY CITY with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_ID, "val", factory);
		expected = "Filter by INSURANCE COMPANY ID with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_NAME, "val", factory);
		expected = "Filter by INSURANCE COMPANY NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_PHONE, "val", factory);
		expected = "Filter by INSURANCE COMPANY PHONE # with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_STATE, "val", factory);
		expected = "Filter by INSURANCE COMPANY STATE with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.INSURE_ZIP, "val", factory);
		expected = "Filter by INSURANCE COMPANY ZIPCODE with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_FIRST_NAME, "val", factory);
		expected = "Filter by PARENT'S FIRST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_LAST_NAME, "val", factory);
		expected = "Filter by PARENT'S LAST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.PHONE, "val", factory);
		expected = "Filter by PHONE # with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.SIBLING_FIRST_NAME, "val", factory);
		expected = "Filter by SIBLING'S FIRST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.SIBLING_LAST_NAME, "val", factory);
		expected = "Filter by SIBLING'S LAST NAME with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.STATE, "val", factory);
		expected = "Filter by STATE with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.STREET_ADDR, "val", factory);
		expected = "Filter by STREET ADDRESS with value val";
		assertEquals(expected, filter.toString());
	
		filter = new DemographicReportFilter(DemographicReportFilterType.ZIP, "val", factory);
		expected = "Filter by ZIPCODE with value val";
		assertEquals(expected, filter.toString());
		
		filter = new DemographicReportFilter(DemographicReportFilterType.GENDER, "val", factory);
		expected = "Filter by GENDER with value val";
		assertEquals(expected, filter.toString());
		
		filter = new DemographicReportFilter(DemographicReportFilterType.LOWER_AGE_LIMIT, "val", factory);
		expected = "Filter by LOWER AGE LIMIT with value val";
		assertEquals(expected, filter.toString());
		
		filter = new DemographicReportFilter(DemographicReportFilterType.UPPER_AGE_LIMIT, "val", factory);
		expected = "Filter by UPPER AGE LIMIT with value val";
		assertEquals(expected, filter.toString());
		
		filter = new DemographicReportFilter(DemographicReportFilterType.MID, "val", factory);
		expected = "Filter by MID with value val";
		assertEquals(expected, filter.toString());
	}

	public void testFilterByChildLastName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CHILD_LAST_NAME, "A", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(1, res.size());
		assertTrue(res.get(0).getMID() == 2L);
	}

	public void testFilterByParentLastNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_LAST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByFirstName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.FIRST_NAME, "Baby", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(4, res.size());
		assertTrue(res.get(0).getMID() == 5L); // Baby Programmer
		assertTrue(res.get(1).getMID() == 6L); // Baby A
		assertTrue(res.get(2).getMID() == 7L); // Baby B
		assertTrue(res.get(3).getMID() == 8L); // Baby C
	}

	public void testFilterByStateNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.STATE, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByPhoneNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.PHONE, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByChildFirstName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CHILD_FIRST_NAME, "Care", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(1, res.size());
		assertTrue(res.get(0).getMID() == 1L);
	}

	public void testFilterByGender() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.GENDER, "Female", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(24, res.size());
		assertTrue(res.get(0).getMID() == 1L);
		assertTrue(res.get(1).getMID() == 5L);
		assertTrue(res.get(2).getMID() == 6L);
		assertTrue(res.get(3).getMID() == 21L);
		assertTrue(res.get(4).getMID() == 101L);
		assertTrue(res.get(5).getMID() == 104L);
	}

	public void testFilterByCityNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.CITY, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByUpperAgeNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.UPPER_AGE_LIMIT, "Dalpe", factory);
		try{
			@SuppressWarnings("unused")
			List<PatientBean> res = filter.filter(allPatients);
		}catch(NumberFormatException e){
			//exception is good.
			return;
		}
		assertTrue(false);
	}

	public void testFilterByCity1() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CITY, "", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(0, res.size());
	}

	public void testFilterByZip2() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.ZIP, "27606-1234", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(17, res.size());
		assertTrue(res.get(0).getMID() == 1L); // random person
		assertTrue(res.get(1).getMID() == 3L); // care needs
		assertTrue(res.get(2).getMID() == 4L); // norecords has
		assertTrue(res.get(3).getMID() == 5L); // baby programmer
		assertTrue(res.get(4).getMID() == 6L); // baby a
		assertTrue(res.get(5).getMID() == 7L); // baby b
		assertTrue(res.get(6).getMID() == 8L); // baby c
		assertTrue(res.get(7).getMID() == 42L); // bad horse
	}

	public void testGetFilterType() {
		filter = new DemographicReportFilter(DemographicReportFilterType.CITY, "city!", factory);
		DemographicReportFilterType expected = DemographicReportFilterType.CITY;
		assertEquals(expected, filter.getFilterType());
	}

	public void testFilterByStreetAddrNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.STREET_ADDR, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByParentFirstName2() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_FIRST_NAME, "Andy", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(4, res.size());
		assertTrue(res.get(0).getMID() == 5L);
		assertTrue(res.get(1).getMID() == 6L);
		assertTrue(res.get(2).getMID() == 7L);
		assertTrue(res.get(3).getMID() == 8L);
	}

	public void testFilterByStreetAddr2() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.STREET_ADDR, "Suite 106", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(16, res.size());
		assertTrue(res.get(0).getMID() == 1L); // random person
		assertTrue(res.get(1).getMID() == 3L); // care needs
		assertTrue(res.get(2).getMID() == 4L); // norecords has
		assertTrue(res.get(3).getMID() == 5L); // baby programmer
		assertTrue(res.get(4).getMID() == 6L); // baby a
		assertTrue(res.get(5).getMID() == 7L); // baby b
		assertTrue(res.get(6).getMID() == 8L); // baby c
		assertTrue(res.get(7).getMID() == 42L); // bad horse
	}

	public void testFilterByParentFirstName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_FIRST_NAME, "Random", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(5, res.size());
		assertTrue(res.get(0).getMID() == 2L);
		assertTrue(res.get(1).getMID() == 3L);
		assertTrue(res.get(2).getMID() == 4L);
		assertTrue(res.get(3).getMID() == 20L);
		assertTrue(res.get(4).getMID() == 21L);
	}

	public void testFilterByEmerContactNameNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.EMER_CONTACT_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByGenderNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.GENDER, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByLastName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.LAST_NAME, "Programmer", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(2, res.size());
		assertTrue(res.get(0).getMID() == 2L); // Andy Programmer
		assertTrue(res.get(1).getMID() == 5L); // Baby Programmer
	}

	public void testFilterByEmerContactName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.EMER_CONTACT_NAME, "Mum", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(6, res.size());
		assertTrue(res.get(0).getMID() == 3L);
		assertTrue(res.get(1).getMID() == 4L);
		assertTrue(res.get(2).getMID() == 5L);
		assertTrue(res.get(3).getMID() == 6L);
		assertTrue(res.get(4).getMID() == 7L);
		assertTrue(res.get(5).getMID() == 8L);
	}

	public void testFilterByContactEmailNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.CONTACT_EMAIL, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterBySiblingLastNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.SIBLING_LAST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByZipNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.ZIP, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByContactEmail() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CONTACT_EMAIL, "fake@email.com", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(6, res.size());
		assertTrue(res.get(0).getMID() == 3L); // Care Needs
		assertTrue(res.get(1).getMID() == 4L); // NoRecords Has
		assertTrue(res.get(2).getMID() == 5L); // Baby Programmer
		assertTrue(res.get(3).getMID() == 6L); // Baby A
		assertTrue(res.get(4).getMID() == 7L); // Baby B
		assertTrue(res.get(5).getMID() == 8L); // Baby C
	}

	public void testFilterByStreetAddr3() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.STREET_ADDR,
				"1247 Noname Dr Suite 106", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(13, res.size());
		assertTrue(res.get(0).getMID() == 1L); // random person
		assertTrue(res.get(1).getMID() == 3L); // care needs
		assertTrue(res.get(2).getMID() == 4L); // norecords has
		assertTrue(res.get(3).getMID() == 5L); // baby programmer
		assertTrue(res.get(4).getMID() == 6L); // baby a
		assertTrue(res.get(5).getMID() == 7L); // baby b
		assertTrue(res.get(6).getMID() == 8L); // baby c
		assertTrue(res.get(7).getMID() == 42L); // bad horse
	}

	public void testFilterByInvalidLowerAge() throws Exception { 
		filter = new DemographicReportFilter(DemographicReportFilterType.LOWER_AGE_LIMIT, "-1", factory);
		try{
			@SuppressWarnings("unused")
			List<PatientBean> res = filter.filter(allPatients);
		}catch(NumberFormatException e){
			//exception is good
			return;
		}
		assertTrue(false);
	}

	public void testGetFilterValue() {
		filter = new DemographicReportFilter(DemographicReportFilterType.CITY, "city!", factory);
		String expected = "city!";
		assertEquals(expected, filter.getFilterValue());
	}

	public void testFilterByContactPhoneNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.EMER_CONTACT_PHONE, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterTypeFromString() {
		DemographicReportFilterType expected = DemographicReportFilterType.EMER_CONTACT_NAME;
		DemographicReportFilterType actual = DemographicReportFilter
				.filterTypeFromString("emer_contACT_naME");
		assertEquals(expected, actual);
	}

	public void testFilterByParentLastName2() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_LAST_NAME, "Programmer", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(4, res.size());
		assertTrue(res.get(0).getMID() == 5L);
		assertTrue(res.get(1).getMID() == 6L);
		assertTrue(res.get(2).getMID() == 7L);
		assertTrue(res.get(3).getMID() == 8L);
	}

	public void testFilterByFirstNameNoResult() {
		filter = new DemographicReportFilter(DemographicReportFilterType.FIRST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByCity2() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CITY, "New YORK", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(3, res.size());
		assertTrue(res.get(0).getMID() == 22L); // Fozzie Bear
		assertTrue(res.get(1).getMID() == 23L); // Dare Devil
		assertTrue(res.get(2).getMID() == 24L); // Devils Advocate
	}

	public void testFilterByParentLastName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_LAST_NAME, "Person", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(5, res.size());
		assertTrue(res.get(0).getMID() == 2L);
		assertTrue(res.get(1).getMID() == 3L);
		assertTrue(res.get(2).getMID() == 4L);
		assertTrue(res.get(3).getMID() == 20L);
		assertTrue(res.get(4).getMID() == 21L);
	}

	public void testFilterBySiblingFirstNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.SIBLING_FIRST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testFilterByMID() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.MID, "101", factory);
		List<PatientBean> filteredList = filter.filter(allPatients);
		
		assertEquals(1, filteredList.size());
		PatientBean patient = filteredList.get(0);
		assertEquals(101L, patient.getMID());
	}

	public void testFilterByPhone() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PHONE, "555-555-5554", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(1, res.size());
		assertTrue(res.get(0).getMID() == 25L); // Trend Setter
	}

	public void testFilterByState() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.STATE, "NY", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(4, res.size());
		assertTrue(res.get(0).getMID() == 22L); // Fozzie Bear
		assertTrue(res.get(1).getMID() == 23L); // Dare Devil
		assertTrue(res.get(2).getMID() == 24L); // Devils Advocate
		assertTrue(res.get(3).getMID() == 103L); // Fulton Gray
	}

	public void testFilterByZip() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.ZIP, "10001", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(3, res.size());
		assertTrue(res.get(0).getMID() == 22L); // Fozzie Bear
		assertTrue(res.get(1).getMID() == 23L); // Dare Devil
		assertTrue(res.get(2).getMID() == 24L); // Devils Advocate
	}

	public void testFilterByStreetAddr1() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.STREET_ADDR, "1247 Noname Dr", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(13, res.size());
		assertTrue(res.get(0).getMID() == 1L); // random person
		assertTrue(res.get(1).getMID() == 3L); // care needs
		assertTrue(res.get(2).getMID() == 4L); // norecords has
		assertTrue(res.get(3).getMID() == 5L); // baby programmer
		assertTrue(res.get(4).getMID() == 6L); // baby a
		assertTrue(res.get(5).getMID() == 7L); // baby b
		assertTrue(res.get(6).getMID() == 8L); // baby c
		assertTrue(res.get(7).getMID() == 42L); // bad horse
	}

	public void testFilterBySiblingLastName() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.SIBLING_LAST_NAME, "A", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(3, res.size());
		assertTrue(res.get(0).getMID() == 5L);
		assertTrue(res.get(1).getMID() == 7L);
		assertTrue(res.get(2).getMID() == 8L);
	
	}

	public void testFilterByLowerAge() throws Exception { 
		filter = new DemographicReportFilter(DemographicReportFilterType.LOWER_AGE_LIMIT, "60", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertEquals(9, res.size());
		assertTrue(res.get(0).getMID() == 1L);
		assertTrue(res.get(1).getMID() == 3L);
		assertTrue(res.get(2).getMID() == 4L);
		assertTrue(res.get(3).getMID() == 42L);
	}

	public void testFilterByChildFirstNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.CHILD_FIRST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

	public void testGetFilterTypeString() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.DEACTIVATED, "only", factory);
		assertEquals("DEACTIVATED", filter.getFilterTypeString());
		
		filter = new DemographicReportFilter(DemographicReportFilterType.STATE, "only", factory);
		assertEquals("STATE", filter.getFilterTypeString());
	}

	public void testFilterByParentFirstNameNoResult() throws Exception {
		filter = new DemographicReportFilter(DemographicReportFilterType.PARENT_FIRST_NAME, "Dalpe", factory);
		List<PatientBean> res = filter.filter(allPatients);
		assertTrue(res.isEmpty());
	}

}

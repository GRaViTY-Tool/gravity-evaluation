/* Generated By:JJTree: Do not edit this line. ASTDoctypeExternalId.java */

package net.sourceforge.pmd.jsp.ast;

public class ASTDoctypeExternalId extends SimpleNode {

/* BEGIN CUSTOM CODE */

    /**
     * URI of the external entity. Cannot be null.
     */
    private String uri;

    /**
     * Public ID of the external entity. This is optional.
     */
    private String publicId;

    public boolean isHasPublicId() {
        return (null != publicId);
    }

    /**
     * @return Returns the name.
     */
    public String getUri() {
        return uri;
    }

    /**
     * @param name The name to set.
     */
    public void setUri(String name) {
        this.uri = name;
    }

    /**
     * @return Returns the publicId (or an empty string if there is none
     *         for this external entity id).
     */
    public String getPublicId() {
        return (null == publicId ? "" : publicId);
    }

    /**
     * @param publicId The publicId to set.
     */
    public void setPublicId(String publicId) {
        this.publicId = publicId;
    }

    /* (non-Javadoc)
     * @see com.applicationengineers.pmd4jsp.ast.SimpleNode#toString(java.lang.String)
     */
    public String toString(String prefix) {
        return
                super.toString(prefix)
                + " uri=[" + uri + "] "
                + (null == publicId ? "" : "publicId=[" + publicId + "] ");
    }
	
/* END CUSTOM CODE */


    public ASTDoctypeExternalId(int id) {
        super(id);
    }

    public ASTDoctypeExternalId(JspParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JspParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

	final public void DoctypeExternalId() throws ParseException {
	 /*@bgen(jjtree) DoctypeExternalId */
	        ASTDoctypeExternalId jjtn000 = new ASTDoctypeExternalId(this, JJTDOCTYPEEXTERNALID);
	        boolean jjtc000 = true;
	        jjtree.openNodeScope(jjtn000);Token systemLiteral;
	        Token pubIdLiteral;
	    try {
	      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
	      case SYSTEM:
	        jj_consume_token(SYSTEM);
	        jj_consume_token(WHITESPACES);
	        systemLiteral = jj_consume_token(QUOTED_LITERAL);
	                                  jjtree.closeNodeScope(jjtn000, true);
	                                  jjtc000 = false;
	                                  jjtn000.setUri(quoteContent(systemLiteral.image));
	        break;
	      case PUBLIC:
	        jj_consume_token(PUBLIC);
	        jj_consume_token(WHITESPACES);
	        pubIdLiteral = jj_consume_token(QUOTED_LITERAL);
	                                  jjtn000.setPublicId(quoteContent(pubIdLiteral.image));
	        jj_consume_token(WHITESPACES);
	        systemLiteral = jj_consume_token(QUOTED_LITERAL);
	                                  jjtree.closeNodeScope(jjtn000, true);
	                                  jjtc000 = false;
	                                  jjtn000.setUri(quoteContent(systemLiteral.image));
	        break;
	      default:
	        jj_la1[28] = jj_gen;
	        jj_consume_token(-1);
	        throw new ParseException();
	      }
	    } finally {
	                  if (jjtc000) {
	                    jjtree.closeNodeScope(jjtn000, true);
	                  }
	    }
	  }
}

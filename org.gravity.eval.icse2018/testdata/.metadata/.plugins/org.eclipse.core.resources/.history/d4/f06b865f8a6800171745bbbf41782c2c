package edu.ncsu.csc.itrust.beans;

import edu.ncsu.csc.itrust.action.EditLabProceduresAction;
import edu.ncsu.csc.itrust.enums.Role;
import edu.ncsu.csc.itrust.enums.TransactionType;
import edu.ncsu.csc.itrust.exception.DBException;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.ITrustException;
import edu.ncsu.csc.itrust.validate.AllergyBeanValidator;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * A bean for storing data about a hospital employee.
 * 
 * A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean 
 * (with the exception of minor formatting such as concatenating phone numbers together). 
 * A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters 
 * to create these easily)
 */
public class PersonnelBean implements Serializable {
	private static final long serialVersionUID = 6575544592646001050L;
	
	private long MID = 0;
	private long AMID = 0;
	private String roleString;
	private String firstName = "";
	private String lastName = "";
	private String password = "";
	private String confirmPassword = "";
	private String securityQuestion = "";
	private String securityAnswer = "";
	private String streetAddress1 = "";
	private String streetAddress2 = "";
	private String city = "";
	private String state = "";
	private String zip = "";
	private String phone = "";
	private String email = "";
	private String specialty = "";

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public long getAMID() {
		return AMID;
	}

	public void setAMID(long amid) {
		AMID = amid;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getFullName() {
		return getFirstName() + " " + getLastName();
	}

	public long getMID() {
		return MID;
	}

	public void setMID(long mid) {
		MID = mid;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getRoleString() {
		return roleString;
	}

	public String getSecurityAnswer() {
		return securityAnswer;
	}

	public void setSecurityAnswer(String securityAnswer) {
		this.securityAnswer = securityAnswer;
	}

	public String getSecurityQuestion() {
		return securityQuestion;
	}

	public void setSecurityQuestion(String securityQuestion) {
		this.securityQuestion = securityQuestion;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public String getStreetAddress1() {
		return streetAddress1;
	}

	public void setStreetAddress1(String streetAddress1) {
		this.streetAddress1 = streetAddress1;
	}

	public String getStreetAddress2() {
		return streetAddress2;
	}

	public void setStreetAddress2(String streetAddress2) {
		this.streetAddress2 = streetAddress2;
	}

	public String getZip() {
		return zip;
	}

	public void setZip(String zip) {
		this.zip = zip;
	}
	
	public String getSpecialty() {
		return specialty;
	}
	
	public void setSpecialty(String specialty) {
		this.specialty = specialty;
	}
	
	public int getIndexIn(List<PersonnelBean> list) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i).MID == this.MID) return i;
		}
		return -1;
	}

	public void setRoleString(String role) {
		this.roleString = role;
	}

	public Role getRole() {
		return Role.parse(roleString);
	}

	public void setRole(Role role) {		
	}
	
	@Override
	public boolean equals(Object o){
		if(o == null || getClass() != o.getClass())
			return false;
		return this.MID == ((PersonnelBean) o).MID;
	}
	
	public int hashCode() {
		assert false : "hashCode not designed";
		return 0;
	}

	/**
	 * Creates a fake e-mail to notify the user that their records have been altered.
	 * 
	 * @return the e-mail to be sent
	 * @throws DBException
	 */
	private Email makeEmail() throws DBException{
	
		Email email = new Email();
		List<PatientBean> reps = patientDAO.getRepresenting(patient.getMID());
		
		List<String> toAddrs = new ArrayList<String>();
		toAddrs.add(patient.getEmail());
		for (PatientBean r: reps) {
			toAddrs.add(r.getEmail());
		}
		
		email.setFrom("no-reply@itrust.com");
		email.setToList(toAddrs); // patient and personal representative
		email.setSubject(String.format("Your medical records have been altered"));
		email.setBody("Health care professional "+ HCPUAP.getFullName() +" has altered your medical records. " +
					"She is not on your list of designated health care professionals.");
		return email;
	}

	/**
	 * Adds an allergy to the patient's records
	 * @param pid pid
	 * @param ndcode ndcode
	 * @return "Allergy Added", exception message, a list of invalid fields, or "" (only if description is null)
	 * @throws FormValidationException
	 * @throws ITrustException
	 */
	public String updateAllergies(long pid, String description) throws FormValidationException, ITrustException {
		AllergyBean bean = new AllergyBean();
		bean.setPatientID(pid);
		bean.setDescription(description);
		AllergyBeanValidator abv = new AllergyBeanValidator();
		abv.validate(bean);
		
		//now, set the ndcode if it happens to exist for the description
		for (MedicationBean med : ndcodesDAO.getAllNDCodes()) {
			if (med.getDescription().equalsIgnoreCase(bean.getDescription())) {
				bean.setNDCode(med.getNDCode());
				break;
			}
		}
	
		String patientName = patientDAO.getName(pid);
		List<AllergyBean> allergies = allergyDAO.getAllergies(pid);
		for (AllergyBean current : allergies){
			if (current.getDescription().equalsIgnoreCase(bean.getDescription())) {
				return "Allergy " + bean.getNDCode() + " - " + bean.getDescription()
						+ " has already been added for " + patientName + ".";
			}
		}
		
		allergyDAO.addAllergy(bean);
		emailutil.sendEmail(makeEmail());
		/*
		 * adding loop that checks for allergy conflicts. The loop runs through every prescription bean
		 * and checks for conflict.
		 */
		List<PrescriptionBean> beansRx = patientDAO.getCurrentPrescriptions(pid);
		for(int i = 0; i < beansRx.size(); i++) {
			if(beansRx.get(i).getMedication().getNDCode().equals(bean.getNDCode())) {
				return "Medication " + beansRx.get(i).getMedication().getNDCode()
						+ " - " + beansRx.get(i).getMedication().getDescription()
						+ " is currently prescribed to " + patientName + ".";
			}
		}
		
		//log that this was added
		loggingAction.logEvent(TransactionType.parse(6700), HCPUAP.getMID(), 
				patient.getMID(), "An allergy record has been added: " +  bean.getId());
		
		return "Allergy Added"; //If loop is successful, it will never reach here.
	}

	/**
	 * testGetLabTechs
	 * @throws Exception
	 */
	public void testGetLabTechs() throws Exception {
		action = new EditLabProceduresAction(factory, 9000000000L, "1", "11");
		List<PersonnelBean> list = action.getLabTechs();
		assertEquals(3, list.size());
		ArrayList<String> names = new ArrayList<String>();
		for (PersonnelBean bean: list) {
			names.add(bean.getFullName());
		}
		assertTrue(names.contains("Lab Dude"));
		assertTrue(names.contains("Nice Guy"));
		assertTrue(names.contains("Cool Person"));
	}

}

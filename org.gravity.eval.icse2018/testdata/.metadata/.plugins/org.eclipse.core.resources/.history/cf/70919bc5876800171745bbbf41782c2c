/*
 * @(#)SVGPath.java  1.0  July 8, 2006
 *
 * Copyright (c) 1996-2006 by the original authors of JHotDraw
 * and all its contributors ("JHotDraw.org")
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * JHotDraw.org ("Confidential Information"). You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with
 * JHotDraw.org.
 */

package org.jhotdraw.samples.svg.figures;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import org.jhotdraw.draw.*;
import org.jhotdraw.draw.action.*;
import org.jhotdraw.geom.*;
import org.jhotdraw.samples.svg.*;
import org.jhotdraw.util.*;
import org.jhotdraw.xml.*;
import static org.jhotdraw.draw.AttributeKeys.*;

/**
 * SVGPath is a composite Figure which contains one or more
 * BezierFigures as its children.
 * <p>
 * XXX - Roll in the read() method of SVGLine.
 *
 * @author Werner Randelshofer
 * @version 1.0 July 8, 2006 Created.
 */
public class SVGPath extends AbstractAttributedCompositeFigure implements SVGFigure {
    /**
     * This path is used for drawing.
     */
    private GeneralPath path;
    
    /** Creates a new instance. */
    public SVGPath() {
        add(new BezierFigure());
        SVGUtil.setDefaults(this);
    }
    
    public void drawFill(Graphics2D g) {
        if (getChildren().size() > 0 /*&&
                ((BezierFigure) getChildren().get(0)).isClosed()*/) {
            g.fill(path);
        }
    }
    public void drawStroke(Graphics2D g) {
        g.draw(path);
    }
    
    public void invalidate() {
        super.invalidate();
        invalidatePath();
    }
    
    protected void validate() {
        validatePath();
        super.validate();
    }
    
    protected void invalidatePath() {
        path = null;
    }
    
    @Override public void write(DOMOutput out) throws IOException {
        writePoints(out);
        writeAttributes(out);
    }
    protected void writeAttributes(DOMOutput out) throws IOException {
        SVGUtil.writeAttributes(this, out);
    }
    
    @Override public void read(DOMInput in) throws IOException {
        readPoints(in);
        readAttributes(in);
        AffineTransform tx = SVGUtil.getTransform(in, "transform");
        basicTransform(tx);
    }
    protected void readAttributes(DOMInput in) throws IOException {
        SVGUtil.readAttributes(this, in);
    }
    
    public void basicTransform(AffineTransform tx) {
        super.basicTransform(tx);
        invalidatePath();
    }
    public boolean isEmpty() {
        for (Figure child : getChildren()) {
            BezierFigure b = (BezierFigure) child;
            if (b.getPointCount() > 0) {
                return false;
            }
        }
        return true;
    }
    
    @Override public Collection<Action> getActions(Point2D.Double p) {
        ResourceBundleUtil labels = ResourceBundleUtil.getLAFBundle("org.jhotdraw.samples.svg.Labels");
        LinkedList<Action> actions = new LinkedList<Action>();
        actions.add(new AbstractAction(labels.getString("closePath")) {
            public void actionPerformed(ActionEvent evt) {
                for (Figure child : getChildren()) {
                    BezierFigure b = (BezierFigure) child;
                    b.setClosed(true);
                }
            }
        });
        actions.add(new AbstractAction(labels.getString("openPath")) {
            public void actionPerformed(ActionEvent evt) {
                for (Figure child : getChildren()) {
                    BezierFigure b = (BezierFigure) child;
                    b.setClosed(false);
                }
            }
        });
        actions.add(new AbstractAction(labels.getString("windingEvenOdd")) {
            public void actionPerformed(ActionEvent evt) {
                WINDING_RULE.set(SVGPath.this, WindingRule.EVEN_ODD);
            }
        });
        actions.add(new AbstractAction(labels.getString("windingNonZero")) {
            public void actionPerformed(ActionEvent evt) {
                WINDING_RULE.set(SVGPath.this, WindingRule.NON_ZERO);
            }
        });
        return actions;
    }
}

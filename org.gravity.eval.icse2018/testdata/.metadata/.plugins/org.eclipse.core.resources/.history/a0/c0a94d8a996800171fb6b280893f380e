/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.log4j;

import junit.framework.TestCase;
import org.apache.log4j.spi.LoggingEvent;
import org.apache.log4j.spi.HierarchyEventListener;

import java.util.Locale;
import java.util.ResourceBundle;

/**
   Used for internal unit testing the Logger class.

   @author Ceki G&uuml;lc&uuml;

*/
public class LoggerTestCase extends TestCase {

  Logger logger;
  Appender a1;
  Appender a2;

  ResourceBundle rbUS;
  ResourceBundle rbFR; 
  ResourceBundle rbCH; 

  // A short message.
  static String MSG = "M";
  

  public LoggerTestCase(String name) {
    super(name);
  }

  public
  void setUp() {
    rbUS = ResourceBundle.getBundle("L7D", new Locale("en", "US"));
    assertNotNull(rbUS);

    rbFR = ResourceBundle.getBundle("L7D", new Locale("fr", "FR"));
    assertNotNull("Got a null resource bundle.", rbFR);

    rbCH = ResourceBundle.getBundle("L7D", new Locale("fr", "CH"));
    assertNotNull("Got a null resource bundle.", rbCH);

  }

  public
  void tearDown() {
    // Regular users should not use the clear method lightly!
    //Logger.getDefaultHierarchy().clear();
    BasicConfigurator.resetConfiguration();
    a1 = null;
    a2 = null;
  }

  public
  void testRB2() {
    Logger root = Logger.getRootLogger(); 
    root.setResourceBundle(rbUS);
    ResourceBundle t = root.getResourceBundle();
    assertSame(t, rbUS);

    Logger x = Logger.getLogger("x");
    Logger x_y = Logger.getLogger("x.y");
    Logger x_y_z = Logger.getLogger("x.y.z");

    x_y.setResourceBundle(rbFR);
    t = x.getResourceBundle();     assertSame(t, rbUS);
    t = x_y.getResourceBundle();   assertSame(t, rbFR);
    t = x_y_z.getResourceBundle(); assertSame(t, rbFR);    
  }


  /**
     * Tests isTraceEnabled.
     * @since 1.2.12
     */
    public void testIsTraceEnabled() {
        VectorAppender appender = new VectorAppender();
        appender.activateOptions();
        Logger root = Logger.getRootLogger();
        root.addAppender(appender);
        root.setLevel(Level.INFO);

        Logger tracer = Logger.getLogger("com.example.Tracer");
        tracer.setLevel(Level.TRACE);

        assertTrue(tracer.isTraceEnabled());
        assertFalse(root.isTraceEnabled());
    }

  private static final class CountingHierarchyEventListener implements HierarchyEventListener {
      private int addEventCount;
      private int removeEventCount;

      public CountingHierarchyEventListener() {
          addEventCount = removeEventCount = 0;
      }
      public void addAppenderEvent(Category cat, Appender appender) {
          addEventCount++;
      }

      public void removeAppenderEvent(Category cat, Appender appender) {
          removeEventCount++;
      }

      public int getAddEventCount() {
          return addEventCount;
      }
      public int getRemoveEventCount() {
          return removeEventCount;
      }
  }


  static private class CountingAppender extends AppenderSkeleton {

    int counter;

    CountingAppender() {
      counter = 0;
    }
    public void close() {
    }

    public
    void append(LoggingEvent event) {
      counter++;
    }
    
    public 
    boolean requiresLayout() {
      return true;
    }
	/**
	     Test additivity flag.
	
	   */
	  public
	  void testAdditivity3() {
	
	    Logger root = Logger.getRootLogger();    
	    Logger a = Logger.getLogger("a");
	    Logger ab = Logger.getLogger("a.b");
	    Logger abc = Logger.getLogger("a.b.c");
	
	    CountingAppender caRoot = new CountingAppender();
	    CountingAppender caA = new CountingAppender();
	    CountingAppender caABC = new CountingAppender();
	
	    root.addAppender(caRoot);
	    a.addAppender(caA);
	    abc.addAppender(caABC);
	
	    assertEquals(caRoot.counter, 0); 
	    assertEquals(caA.counter, 0); 
	    assertEquals(caABC.counter, 0);        
	    
	    ab.setAdditivity(false);
	
	
	    a.debug(MSG);  
	    assertEquals(caRoot.counter, 1); 
	    assertEquals(caA.counter, 1); 
	    assertEquals(caABC.counter, 0);        
	
	    ab.debug(MSG);  
	    assertEquals(caRoot.counter, 1); 
	    assertEquals(caA.counter, 1); 
	    assertEquals(caABC.counter, 0);        
	
	    abc.debug(MSG);  
	    assertEquals(caRoot.counter, 1); 
	    assertEquals(caA.counter, 1); 
	    assertEquals(caABC.counter, 1);        
	    
	  }
	/**
	     Test if logger a.b inherits its appender from a.
	   */
	  public
	  void testAdditivity1() {
	    Logger a = Logger.getLogger("a");
	    Logger ab = Logger.getLogger("a.b");
	    CountingAppender ca = new CountingAppender();
	    a.addAppender(ca);
	    
	                   assertEquals(ca.counter, 0);
	    ab.debug(MSG); assertEquals(ca.counter, 1);
	    ab.info(MSG);  assertEquals(ca.counter, 2);
	    ab.warn(MSG);  assertEquals(ca.counter, 3);
	    ab.error(MSG); assertEquals(ca.counter, 4);    
	    
	
	  }
	/**
	     Test multiple additivity.
	
	   */
	  public
	  void testAdditivity2() {
	    
	    Logger a = Logger.getLogger("a");
	    Logger ab = Logger.getLogger("a.b");
	    Logger abc = Logger.getLogger("a.b.c");
	    Logger x   = Logger.getLogger("x");
	
	    CountingAppender ca1 = new CountingAppender();
	    CountingAppender ca2 = new CountingAppender();
	
	    a.addAppender(ca1);
	    abc.addAppender(ca2);
	
	    assertEquals(ca1.counter, 0); 
	    assertEquals(ca2.counter, 0);        
	    
	    ab.debug(MSG);  
	    assertEquals(ca1.counter, 1); 
	    assertEquals(ca2.counter, 0);        
	
	    abc.debug(MSG);
	    assertEquals(ca1.counter, 2); 
	    assertEquals(ca2.counter, 1);        
	
	    x.debug(MSG);
	    assertEquals(ca1.counter, 2); 
	    assertEquals(ca2.counter, 1);    
	  }
  }
}

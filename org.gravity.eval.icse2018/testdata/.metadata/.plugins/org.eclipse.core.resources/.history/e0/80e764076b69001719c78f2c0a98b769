package net.sourceforge.pmd.rules.design;

import net.sourceforge.pmd.ast.ASTTryStatement;
import net.sourceforge.pmd.ast.SimpleJavaNode;
import net.sourceforge.pmd.stat.StatisticalRule;

/**
 * NPath complexity is a measurement of the acyclic execution paths through a
 * function. See Nejmeh, Communications of the ACM Feb 1988 pp 188-200.
 * 
 * @author Jason Bennett
 */
public class NpathComplexity extends StatisticalRule {

	
	public Object visit(SimpleJavaNode node, Object data) {
//    int npath = 1;
//
//    for ( int i = 0; i < node.jjtGetNumChildren(); i++ ) {
//      SimpleJavaNode simpleNode = (SimpleJavaNode) node.jjtGetChild( i );
//      Integer complexity = (Integer) simpleNode.jjtAccept( this, data );
//      npath *= complexity.intValue();
//    }

	 int npath = complexityMultipleOf(node, 1, data);
	 
    return new Integer( npath );
  }

  public Object visit(ASTTryStatement node, Object data) {
    /*
     * This scenario was not addressed by the original paper. Based on the
     * principles outlined in the paper, as well as the Checkstyle NPath
     * implementation, this code will add the complexity of the try to the
     * complexities of the catch and finally blocks.
     */

//    int npath = 0;
//
//    for ( int i = 0; i < node.jjtGetNumChildren(); i++ ) {
//      SimpleJavaNode simpleNode = (SimpleJavaNode) node.jjtGetChild( i );
//      Integer complexity = (Integer) simpleNode.jjtAccept( this, data );
//      npath += complexity.intValue();
//    }

	  int npath = complexitySumOf(node, 0, data);
	  
    return new Integer( npath );

  }

}

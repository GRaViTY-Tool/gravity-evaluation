/* Generated By:JJTree: Do not edit this line. ASTConditionalExpression.java */

package net.sourceforge.pmd.ast;

import net.sourceforge.pmd.rules.CyclomaticComplexity.Entry;
import net.sourceforge.pmd.rules.design.NpathComplexity;

public class ASTConditionalExpression extends SimpleJavaNode {
    public ASTConditionalExpression(int id) {
        super(id);
    }

    public ASTConditionalExpression(JavaParser p, int id) {
        super(p, id);
    }

    private boolean isTernary;

    public void setTernary() {
        isTernary = true;
    }

    public boolean isTernary() {
        return this.isTernary;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

	public Object visit(ASTForStatement node, Object data) {
	    int boolCompFor = NpathComplexity.sumExpressionComplexity( (ASTExpression) node.getFirstChildOfType( ASTExpression.class ) );
	    // For statement always has a complexity of at least 1
	    boolCompFor++;
	
	    ( (Entry) entryStack.peek() ).bumpDecisionPoints( boolCompFor );
	    super.visit( node, data );
	    return data;
	  }

	public Object visit(ASTEnumDeclaration node, Object data) {
	    entryStack.push( new Entry( node ) );
	    super.visit( node, data );
	    Entry classEntry = (Entry) entryStack.pop();
	    if ( ( classEntry.getComplexityAverage() >= reportLevel )
	        || ( classEntry.highestDecisionPoints >= reportLevel ) ) {
	      addViolation( data, node, new String[] {
	          "class",
	          node.getImage(),
	          classEntry.getComplexityAverage() + "(Highest = "
	              + classEntry.highestDecisionPoints + ')' } );
	    }
	    return data;
	  }
}

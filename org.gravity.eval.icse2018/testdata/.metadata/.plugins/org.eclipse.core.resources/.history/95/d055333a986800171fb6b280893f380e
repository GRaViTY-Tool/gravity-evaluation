/*
 * Copyright (C) 2002  Fr�d�ric Bergeron (fbergeron@users.sourceforge.net)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package com.fbergeron.solitaire;

import java.awt.*;
import java.util.*;

import com.fbergeron.card.ClassicCard;
import com.fbergeron.card.Stack;
import com.fbergeron.util.*;

public class FrameRules extends Frame
{
	public FrameRules()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(new BorderLayout(0,0));
		setSize(500,600);
		setVisible(false);
		textAreaHelp.setEditable(false);
		add("Center", textAreaHelp);
		textAreaHelp.setBounds(0,0,500,600);
		//}}
        
        setTitle( "Rules" );
        setLocation( 50, 50 );
		//{{INIT_MENUS
		//}}
		textAreaHelp.setFont( new Font( "Courier", Font.PLAIN, 14 ) );
        textAreaHelp.append( "Rules01" );
        
		//{{REGISTER_LISTENERS
		//}}
		
		addWindowListener( new WindowManager( this, WindowManager.HIDE_ON_CLOSE ) );
	}

	//{{DECLARE_CONTROLS
	java.awt.TextArea textAreaHelp = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_VERTICAL_ONLY);
	//}}

	//{{DECLARE_MENUS
	//}}

    /** 
     * Sets the locale of the Frame.
     * @param locale Locale of the frame.
     */
    public void setLocale( Locale locale ) {
        super.setLocale( locale );

        _resBundle = ResourceBundle.getBundle( getClass().getName() + "Ress", locale ); 
        
        textAreaHelp.setText( _resBundle.getString( "Rules01" ) );
		setTitle( _resBundle.getString( "Rules" ) );
    }
    
	/**
	 * Requests cards from the deck.
	 * The number of new cards is equal to FREED_CARDS_CNT.
	 */
	public void getNewCards() {
	    //First, restore the deck if it's empty.
	    if( deck.isEmpty() ) {
	        for( ; !revealedCards.isEmpty(); ) {
	            ClassicCard c = ((ClassicCard)revealedCards.pop());
	            c.turnFaceDown();
	            deck.push( c );
	        }
	    }
	
	    for( int i = 0; !deck.isEmpty() && i < FREED_CARDS_CNT; i++ ) {
	        ClassicCard c = ((ClassicCard)deck.pop());
	        c.turnFaceUp();
	        revealedCards.push( c );
	    }
	
	    if( table != null )
	        table.repaint();
	}

	/**
	 * Plays a stack of cards from a stack to another stack.
	 * @param curr Current stack of cards to be played.
	 * @param src Stack where the card comes from.
	 * @param dst Stack where the card is played.
	 */
	public void play( Stack curr, Stack src, Stack dst ) {
	    if( curr != null )
	        curr.reverse();
	    if( dst != null && dst.isValid( curr ) ) {
	        for( ; !curr.isEmpty(); )
	            dst.push( curr.pop() );
	        if( !src.isEmpty() && src.top().isFaceDown() ) {
	            ClassicCard topCard = ((ClassicCard)src.top());
	            topCard.turnFaceUp();
	        }
	        if( isGameWon() )
	            congratulate();
	    }
	    else {
	        for( ; !curr.isEmpty(); )
	            src.push( curr.pop() );
	    }
	    if( table != null )
	        table.repaint();
	}

	private ResourceBundle _resBundle;
}

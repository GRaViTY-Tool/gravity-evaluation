package edu.ncsu.csc.itrust.unit.testutils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.commons.dbcp.BasicDataSource;
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import edu.ncsu.csc.itrust.action.AddOphthalmologyScheduleOVAction;
import edu.ncsu.csc.itrust.action.EditApptAction;
import edu.ncsu.csc.itrust.action.EditOphthalmologyScheduleOVAction;
import edu.ncsu.csc.itrust.action.ViewMyApptsAction;
import edu.ncsu.csc.itrust.action.ViewMyMessagesAction;
import edu.ncsu.csc.itrust.action.ViewOphthalmologyScheduleOVAction;
import edu.ncsu.csc.itrust.beans.OphthalmologyScheduleOVRecordBean;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.dao.IConnectionDriver;
import edu.ncsu.csc.itrust.exception.FormValidationException;
import edu.ncsu.csc.itrust.exception.ITrustException;
import edu.ncsu.csc.itrust.unit.datagenerators.TestDataGenerator;

/**
 * This class pulls the JDBC driver information from Tomcat's context.xml file in
 * WebRoot/META-INF/context.xml. This is done only for convenience - so that you only have to pull your JDBC
 * info from one place (context.xml)<br />
 * <br />
 * The tangled mess you see here is SAX, the XML-parser and XPath, an XML querying language. Note that this
 * class is only ever constructed once since DAOFactory only constructs up to 2 instances of itself.<br />
 * <br />
 * Also, you'll notice that we're using a "BasicDataSource" to obtain connections instead of the usual
 * DriverManager. That's because we're using Tomcat's built-in database pooling mechanism. It's purely for
 * performance in this case.
 */
public class TestDAOFactory extends DAOFactory implements IConnectionDriver {

	private static DAOFactory testInstance;

	public static DAOFactory getTestInstance() {
		if (testInstance == null)
			testInstance = new TestDAOFactory();
		return testInstance;
	}

	private BasicDataSource dataSource;

	private TestDAOFactory() {
		try {
			Document document = parseXML(new BufferedReader(new FileReader("WebRoot/META-INF/context.xml")));
			dataSource = new BasicDataSource();
			dataSource.setDriverClassName(getAttribute(document, "@driverClassName"));
			dataSource.setUsername(getAttribute(document, "@username"));
			dataSource.setPassword(getAttribute(document, "@password"));
			dataSource.setUrl(getAttribute(document, "@url"));
			dataSource.setMaxActive(3); // only allow three connections open at a time
			dataSource.setMaxWait(250); // wait 250ms until throwing an exception
			dataSource.setPoolPreparedStatements(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private String getAttribute(Document document, String attribute) throws XPathExpressionException {
		return (String) XPathFactory.newInstance().newXPath().compile("/Context/Resource/" + attribute)
				.evaluate(document.getDocumentElement(), XPathConstants.STRING);
	}

	private Document parseXML(BufferedReader reader) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		DocumentBuilder builder = factory.newDocumentBuilder();
		return builder.parse(new InputSource(reader));
	}

	@Override
	public Connection getConnection() throws SQLException {
		return dataSource.getConnection();
	}

	@Override
	protected void setUp() throws Exception {
		super.setUp();
		
		TestDataGenerator gen = new TestDataGenerator();
		gen.clearAllTables();
		gen.standardData();
	
		this.factory = TestDAOFactory.getTestInstance();
		this.evilFactory = EvilDAOFactory.getEvilInstance();
		this.action = new ViewMyMessagesAction(this.factory, this.mId);
		this.action2 = new ViewMyMessagesAction(this.factory, this.hcpId);
		this.evilAction = new ViewMyMessagesAction(this.evilFactory, this.mId);
	}

	@Override
	protected void setUp() throws Exception {
		TestDataGenerator gen = new TestDataGenerator();
		gen.clearAllTables();
		gen.hcp0();
		gen.patient42();
		gen.appointment();
		gen.appointmentType();
		gen.uc22();
		
		this.factory = TestDAOFactory.getTestInstance();
		this.evilFactory = EvilDAOFactory.getEvilInstance();
		this.evilAction = new EditApptAction(this.evilFactory, this.hcpId);
		this.editAction = new EditApptAction(this.factory, this.hcpId);
		this.viewAction = new ViewMyApptsAction(this.factory, this.hcpId);
	}

	@Test
	public void testErrors() throws FormValidationException{
		DAOFactory prodDAO = TestDAOFactory.getTestInstance();
		AddOphthalmologyScheduleOVAction addAction = new AddOphthalmologyScheduleOVAction(prodDAO, 401L);
		EditOphthalmologyScheduleOVAction editAction = new EditOphthalmologyScheduleOVAction(prodDAO, 401L);
		
		OphthalmologyScheduleOVRecordBean nullBean = null;
		
		try{
			addAction.addOphthalmologyOV(nullBean);
			fail();
		}catch(ITrustException e){
			assertNull(nullBean);
		}
		
		try{
			editAction.editOphthalmologyScheduleOV(1, nullBean);
			fail();
		}catch(ITrustException e){
			assertNull(nullBean);
		}
	}

	@Test
	public void testAddOphthalmologyOV() throws FormValidationException, ITrustException{
		DAOFactory prodDAO = TestDAOFactory.getTestInstance();
		
		AddOphthalmologyScheduleOVAction addAction = new AddOphthalmologyScheduleOVAction(prodDAO, LOGGED_IN_MID);
		
		OphthalmologyScheduleOVRecordBean bean1 = new OphthalmologyScheduleOVRecordBean();
		bean1.setComment("Comment");
		bean1.setDoctormid(101);
		bean1.setPatientmid(102);
		bean1.setPending(true);
		bean1.setDocFirstName("bill");
		bean1.setDocLastName("phil");
		SimpleDateFormat frmt = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
		Date d;
		try {
			d = frmt.parse("20/20/1994 10:22 PM");
			bean1.setDate(new Timestamp(d.getTime()));
		} catch (ParseException e1) {
			//Won't happen
		}
		
		OphthalmologyScheduleOVRecordBean bean2 = new OphthalmologyScheduleOVRecordBean();
		bean2.setComment("Comment");
		bean2.setDoctormid(101);
		bean2.setPatientmid(102);
		bean2.setPending(true);
		bean2.setDocFirstName("bill");
		bean2.setDocLastName("phil");
		frmt = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
		try {
			d = frmt.parse("20/20/1994 10:23 PM");
			bean2.setDate(new Timestamp(d.getTime()));
		} catch (ParseException e1) {
			//Won't happen
		}
		
		OphthalmologyScheduleOVRecordBean bean3 = new OphthalmologyScheduleOVRecordBean();
		bean3.setComment("Comment");
		bean3.setDoctormid(101);
		bean3.setPatientmid(102);
		bean3.setPending(true);
		bean3.setDocFirstName("bill");
		bean3.setDocLastName("phil");
		frmt = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
		try {
			d = frmt.parse("20/20/1994 10:24 PM");
			bean3.setDate(new Timestamp(d.getTime()));
		} catch (ParseException e1) {
			//Won't happen
		}
		
		OphthalmologyScheduleOVRecordBean bean4 = new OphthalmologyScheduleOVRecordBean();
		bean4.setComment("Comment");
		bean4.setDoctormid(101);
		bean4.setPatientmid(102);
		bean4.setPending(true);
		bean4.setDocFirstName("bill");
		bean4.setDocLastName("phil");
		frmt = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
		try {
			d = frmt.parse("20/20/1994 10:25 PM");
			bean4.setDate(new Timestamp(d.getTime()));
		} catch (ParseException e1) {
			//Won't happen
		}
		
		OphthalmologyScheduleOVRecordBean bean5 = new OphthalmologyScheduleOVRecordBean();
		bean5.setComment("Comment");
		bean5.setDoctormid(101);
		bean5.setPatientmid(102);
		bean5.setPending(true);
		bean5.setDocFirstName("bill");
		bean5.setDocLastName("phil");
		frmt = new SimpleDateFormat("MM/dd/yyyy hh:mm a");
		try {
			d = frmt.parse("20/20/1994 10:26 PM");
			bean5.setDate(new Timestamp(d.getTime()));
		} catch (ParseException e1) {
			//Won't happen
		}
		
		
		
		//Add the beans
		addAction.addOphthalmologyOV(bean1);
		addAction.addOphthalmologyOV(bean2);
		addAction.addOphthalmologyOV(bean3);
		addAction.addOphthalmologyOV(bean4);
		addAction.addOphthalmologyOV(bean5);
		
		//Now test the view
		ViewOphthalmologyScheduleOVAction viewAction = new ViewOphthalmologyScheduleOVAction(prodDAO, LOGGED_IN_MID);
		
		OphthalmologyScheduleOVRecordBean retBean = viewAction.getOphthalmologyScheduleOVForHCP(1L);
		assertEquals(bean1, retBean);
		
		List<OphthalmologyScheduleOVRecordBean> beans = viewAction.getOphthalmologyScheduleOVByPATIENTMID(102L);
		assertEquals(beans.get(0), bean5);
		assertEquals(beans.get(1), bean4);
		assertEquals(beans.get(2), bean3);
		assertEquals(beans.get(3), bean2);
		
		EditOphthalmologyScheduleOVAction editAction = new EditOphthalmologyScheduleOVAction(prodDAO, LOGGED_IN_MID);
		editAction.editOphthalmologyScheduleOV(2L, bean3);
		bean3.setOid(2L);
		assertEquals(viewAction.getOphthalmologyScheduleOVForPatient(2L), bean3);
		
		//Now test the view for a Patient viewing their own records
		ViewOphthalmologyScheduleOVAction patientViewAction = new ViewOphthalmologyScheduleOVAction(prodDAO, PATIENT_MID);
		retBean = patientViewAction.getOphthalmologyScheduleOVForPatient(1L);
		assertEquals(bean1, retBean);
		
		//Now test the view for a Patient viewing a Dependent's records
		retBean = patientViewAction.getOphthalmologyScheduleOVForPatient(5L);
		assertEquals(bean5, retBean);
	}
}

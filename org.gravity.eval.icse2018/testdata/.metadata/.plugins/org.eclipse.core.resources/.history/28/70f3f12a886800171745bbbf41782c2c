/*
 * EditPlugin.java - Interface all plugins must implement
 * Copyright (C) 1999, 2000 Slava Pestov
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package org.gjt.sp.jedit;

import java.util.Vector;
import org.gjt.sp.jedit.gui.OptionsDialog;
import org.gjt.sp.util.Log;

/**
 * The interface between jEdit and a plugin.
 *
 * @author Slava Pestov
 * @version $Id: EditPlugin.java,v 1.6 2002/02/16 07:22:25 spestov Exp $
 * @since jEdit 2.1pre1
 */
public abstract class EditPlugin
{
	/**
	 * Returns the plugin's class name.
	 *
	 * @since jEdit 2.5pre3
	 */
	public String getClassName()
	{
		return getClass().getName();
	}

	/**
	 * Method called by jEdit to initialize the plugin.
	 * Actions and edit modes should be registered here, along
	 * with any EditBus paraphinalia.
	 * @since jEdit 2.1pre1
	 */
	public void start() {}

	/**
	 * Method called by jEdit before exiting. Usually, nothing
	 * needs to be done here.
	 * @since jEdit 2.1pre1
	 */
	public void stop() {}

	/**
	 * Method called every time a view is created to set up the
	 * Plugins menu. Menus and menu items should be loaded using the
	 * methods in the GUIUtilities class, and added to the vector.
	 * @param menuItems Add menus and menu items here
	 *
	 * @see GUIUtilities#loadMenu(String)
	 * @see GUIUtilities#loadMenuItem(String)
	 *
	 * @since jEdit 2.6pre5
	 */
	public void createMenuItems(Vector menuItems) {}

	/**
	 * Method called every time the plugin options dialog box is
	 * displayed. Any option panes created by the plugin should be
	 * added here.
	 * @param optionsDialog The plugin options dialog box
	 *
	 * @see OptionPane
	 * @see OptionsDialog#addOptionPane(OptionPane)
	 *
	 * @since jEdit 2.1pre1
	 */
	public void createOptionPanes(OptionsDialog optionsDialog) {}

	/**
	 * Returns the JAR file containing this plugin.
	 * @since jEdit 3.1pre5
	 */
	public EditPlugin.JAR getJAR()
	{
		return jar;
	}

	/**
	 * A placeholder for a plugin that didn't load.
	 */
	public static class Broken extends EditPlugin
	{
		public String getClassName()
		{
			return clazz;
		}

		// package-private members
		Broken(String clazz)
		{
			this.clazz = clazz;
		}

		// private members
		private String clazz;
	}

	/**
	 * A JAR file.
	 */
	public static class JAR
	{
		public String getPath()
		{
			return path;
		}

		public JARClassLoader getClassLoader()
		{
			return classLoader;
		}

		public ActionSet getActions()
		{
			return actions;
		}

		public void addPlugin(EditPlugin plugin)
		{
			plugin.jar = JAR.this;

			// must be before the below two so that if an error
			// occurs during start, the plugin is not listed as
			// being active
			plugin.start();

			if(plugin instanceof EBPlugin)
				EditBus.addToBus((EBPlugin)plugin);

			plugins.addElement(plugin);
		}

		public EditPlugin[] getPlugins()
		{
			EditPlugin[] array = new EditPlugin[plugins.size()];
			plugins.copyInto(array);
			return array;
		}

		public JAR(String path, JARClassLoader classLoader)
		{
			this.path = path;
			this.classLoader = classLoader;
			plugins = new Vector();
			actions = new ActionSet();
		}

		// package-private members
		void getPlugins(Vector vector)
		{
			for(int i = 0; i < plugins.size(); i++)
			{
				vector.addElement(plugins.elementAt(i));
			}
		}

		//{{{ checkDependencies() method
		private boolean checkDependencies(String name)
		{
			int i = 0;
		
			String dep;
			while((dep = jEdit.getProperty("plugin." + name + ".depend." + i++)) != null)
			{
				int index = dep.indexOf(' ');
				if(index == -1)
				{
					Log.log(Log.ERROR,this,name + " has an invalid"
						+ " dependency: " + dep);
					return false;
				}
		
				String what = dep.substring(0,index);
				String arg = dep.substring(index + 1);
		
				if(what.equals("jdk"))
				{
					if(MiscUtilities.compareStrings(
						System.getProperty("java.version"),
						arg,false) < 0)
					{
						String[] args = { arg,
							System.getProperty("java.version") };
						jEdit.pluginError(jar.getPath(),"plugin-error.dep-jdk",args);
						return false;
					}
				}
				else if(what.equals("jedit"))
				{
					if(arg.length() != 11)
					{
						Log.log(Log.ERROR,this,"Invalid jEdit version"
							+ " number: " + arg);
						return false;
					}
		
					if(MiscUtilities.compareStrings(
						jEdit.getBuild(),arg,false) < 0)
					{
						String needs = MiscUtilities.buildToVersion(arg);
						String[] args = { needs,
							jEdit.getVersion() };
						jEdit.pluginError(jar.getPath(),
							"plugin-error.dep-jedit",args);
						return false;
					}
				}
				else if(what.equals("plugin"))
				{
					int index2 = arg.indexOf(' ');
					if(index2 == -1)
					{
						Log.log(Log.ERROR,this,name 
							+ " has an invalid dependency: "
							+ dep + " (version is missing)");
						return false;
					}
					
					String plugin = arg.substring(0,index2);
					String needVersion = arg.substring(index2 + 1);
					String currVersion = jEdit.getProperty("plugin." 
						+ plugin + ".version");
		
					if(currVersion == null)
					{
						String[] args = { needVersion, plugin };
						jEdit.pluginError(jar.getPath(),
							"plugin-error.dep-plugin.no-version",
							args);
						return false;
					}
		
					if(MiscUtilities.compareStrings(currVersion,
						needVersion,false) < 0)
					{
						String[] args = { needVersion, plugin, currVersion };
						jEdit.pluginError(jar.getPath(),
							"plugin-error.dep-plugin",args);
						return false;
					}
		
					if(jEdit.getPlugin(plugin) instanceof EditPlugin.Broken)
					{
						String[] args = { plugin };
						jEdit.pluginError(jar.getPath(),
							"plugin-error.dep-plugin.broken",args);
						return false;
					}
				}
				else if(what.equals("class"))
				{
					try
					{
						loadClass(arg,false);
					}
					catch(Exception e)
					{
						String[] args = { arg };
						jEdit.pluginError(jar.getPath(),
							"plugin-error.dep-class",args);
						return false;
					}
				}
				else
				{
					Log.log(Log.ERROR,this,name + " has unknown"
						+ " dependency: " + dep);
					return false;
				}
			}
		
			return true;
		} //}}}

		// private members
		private String path;
		private JARClassLoader classLoader;
		private Vector plugins;
		private ActionSet actions;
	}

	// private members
	private EditPlugin.JAR jar;
}

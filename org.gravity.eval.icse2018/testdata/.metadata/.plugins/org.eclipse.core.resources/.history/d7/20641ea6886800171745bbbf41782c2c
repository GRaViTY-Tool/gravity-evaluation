/* Generated By:JJTree: Do not edit this line. ASTFieldDeclaration.java */

package net.sourceforge.pmd.ast;

import java.io.StringReader;

import net.sourceforge.pmd.TargetJDK1_4;
import net.sourceforge.pmd.TargetJDK1_5;

public class ASTFieldDeclaration extends AccessNode implements Dimensionable {

    public ASTFieldDeclaration(int id) {
        super(id);
    }

    public ASTFieldDeclaration(JavaParser p, int id) {
        super(p, id);
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    public boolean isSyntacticallyPublic() {
        return super.isPublic();
    }

    public boolean isPublic() {
        if (isInterfaceMember()) {
            return true;
        }
        return super.isPublic();
    }

    public boolean isSyntacticallyStatic() {
        return super.isStatic();
    }

    public boolean isStatic() {
        if (isInterfaceMember()) {
            return true;
        }
        return super.isStatic();
    }

    public boolean isSyntacticallyFinal() {
        return super.isFinal();
    }

    public boolean isFinal() {
        if (isInterfaceMember()) {
            return true;
        }
        return super.isFinal();
    }

    public boolean isPrivate() {
        if (isInterfaceMember()) {
            return false;
        }
        return super.isPrivate();
    }

    public boolean isPackagePrivate() {
        if (isInterfaceMember()) {
            return false;
        }
        return super.isPackagePrivate();
    }

    public boolean isProtected() {
        if (isInterfaceMember()) {
            return false;
        }
        return super.isProtected();
    }

    public boolean isInterfaceMember() {
        if (jjtGetParent().jjtGetParent() instanceof ASTEnumBody) {
            return false;
        }
        ASTClassOrInterfaceDeclaration n = (ASTClassOrInterfaceDeclaration)getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);
        return n instanceof ASTClassOrInterfaceDeclaration && n.isInterface();
    }

    public boolean isArray() {
        return checkType() + checkDecl() > 0;
    }

    public int getArrayDepth() {
        if (!isArray()) {
            return 0;
        }
        return checkType() + checkDecl();
    }

    private int checkType() {
        if (jjtGetNumChildren() == 0 || !(jjtGetChild(0) instanceof ASTType)) {
            return 0;
        }
        return ((ASTType) jjtGetChild(0)).getArrayDepth();
    }

    private int checkDecl() {
        if (jjtGetNumChildren() < 2 || !(jjtGetChild(1) instanceof ASTVariableDeclarator)) {
            return 0;
        }
        return ((ASTVariableDeclaratorId) (jjtGetChild(1).jjtGetChild(0))).getArrayDepth();
    }

    public void dump(String prefix) {
        String out = collectDumpedModifiers(prefix);
        if (isArray()) {
            out += "(array";
            for (int i = 0; i < getArrayDepth(); i++) {
                out += "[";
            }
            out += ")";
        }
        System.out.println(out);
        dumpChildren(prefix);
    }

    /**
     * Gets the variable name of this field.
     * This method searches the first VariableDeclartorId node and returns it's image or <code>null</code> if the child node is not found.
     *
     * @return a String representing the name of the variable
     */
    public String getVariableName() {
        ASTVariableDeclaratorId decl = (ASTVariableDeclaratorId) getFirstChildOfType(ASTVariableDeclaratorId.class);
        if (decl != null) {
            return decl.getImage();
        }
        return null;
    }

	public Object visit(ASTFieldDeclaration node, Object data) {
	    if (node.isSyntacticallyPublic() || node.isSyntacticallyStatic() || node.isSyntacticallyFinal()) {
	        check(node, data);
	    }
	    return super.visit(node, data);
	}

	public void testWithEnum() {
	    JavaParser parser = (new TargetJDK1_5()).createParser(new StringReader(TEST4));
	    ASTCompilationUnit cu = parser.CompilationUnit();
	    ASTFieldDeclaration node = (ASTFieldDeclaration) cu.findChildrenOfType(ASTFieldDeclaration.class).get(0);
	    assertFalse(node.isInterfaceMember());
	}

	public void testIsSyntacticallyPublic() {
	    JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(TEST3));
	    ASTCompilationUnit cu = parser.CompilationUnit();
	    ASTFieldDeclaration node = (ASTFieldDeclaration) cu.findChildrenOfType(ASTFieldDeclaration.class).get(0);
	    assertFalse(node.isSyntacticallyPublic());
	    assertFalse(node.isPackagePrivate());
	    assertFalse(node.isPrivate());
	    assertFalse(node.isProtected());
	    assertTrue(node.isFinal());
	    assertTrue(node.isStatic());
	    assertTrue(node.isPublic());
	}

	public void testIsArray() {
	    JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(TEST1));
	    ASTCompilationUnit cu = parser.CompilationUnit();
	    Dimensionable node = (Dimensionable) cu.findChildrenOfType(ASTFieldDeclaration.class).get(0);
	    assertTrue(node.isArray());
	    assertEquals(1, node.getArrayDepth());
	}

	public void testMultiDimensionalArray() {
	    JavaParser parser = (new TargetJDK1_4()).createParser(new StringReader(TEST2));
	    ASTCompilationUnit cu = parser.CompilationUnit();
	    Dimensionable node = (Dimensionable) cu.findChildrenOfType(ASTFieldDeclaration.class).get(0);
	    assertEquals(3, node.getArrayDepth());
	}

	public void testGetVariableName() {
	    int id = 0;
	    ASTFieldDeclaration n = new ASTFieldDeclaration(id++);
	    ASTType t = new ASTType(id++);
	    ASTVariableDeclarator decl = new ASTVariableDeclarator(id++);
	    ASTVariableDeclaratorId declid = new ASTVariableDeclaratorId(id++);
	    n.jjtAddChild(t, 0);
	    t.jjtAddChild(decl, 0);
	    decl.jjtAddChild(declid, 0);
	    declid.setImage("foo");
	
	    assertEquals("foo", n.getVariableName());
	
	}

	public void testFinal() throws Throwable {
	    String access[] = {"public", "final"};
	    ASTFieldDeclaration afd = getFieldDecl(access);
	    assertTrue("Expecting field to be final.", afd.isFinal());
	    assertTrue("Expecting field to be public.", afd.isPublic());
	}

	public void testProtected() throws Throwable {
	    String access[] = {"protected"};
	    ASTFieldDeclaration afd = getFieldDecl(access);
	    assertTrue("Expecting field to be protected.", afd.isProtected());
	}

	public void testStatic() throws Throwable {
	    String access[] = {"private", "static"};
	    ASTFieldDeclaration afd = getFieldDecl(access);
	    assertTrue("Expecting field to be static.", afd.isStatic());
	    assertTrue("Expecting field to be private.", afd.isPrivate());
	}

	public void testPrivate() throws Throwable {
	    String access[] = {"private"};
	    ASTFieldDeclaration afd = getFieldDecl(access);
	    assertTrue("Expecting field to be private.", afd.isPrivate());
	}
}

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.nutch.metadata;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.textui.TestRunner;

/**
 * JUnit based tests of class
 * {@link org.apache.nutch.metadata.SpellCheckedMetadata}.
 *
 * @author Chris Mattmann
 * @author J&eacute;r&ocirc;me Charron
 */
public class TestSpellCheckedMetadata extends TestCase {

  private static final int NUM_ITERATIONS = 10000;

  public TestSpellCheckedMetadata(String testName) {
    super(testName);
  }

  public static Test suite() {
    return new TestSuite(TestSpellCheckedMetadata.class);
  }

  public static void main(String[] args) {
    TestRunner.run(suite());
  }

  /** Test for the <code>getNormalizedName(String)</code> method. */
  public void testGetNormalizedName() {
    assertEquals("Content-Type", SpellCheckedMetadata
        .getNormalizedName("Content-Type"));
    assertEquals("Content-Type", SpellCheckedMetadata
        .getNormalizedName("ContentType"));
    assertEquals("Content-Type", SpellCheckedMetadata
        .getNormalizedName("Content-type"));
    assertEquals("Content-Type", SpellCheckedMetadata
        .getNormalizedName("contenttype"));
    assertEquals("Content-Type", SpellCheckedMetadata
        .getNormalizedName("contentype"));
    assertEquals("Content-Type", SpellCheckedMetadata
        .getNormalizedName("contntype"));
  }
  
  /** Test for <code>get(String)</code> method. */
  public void testGet() {
    SpellCheckedMetadata meta = new SpellCheckedMetadata();
    assertNull(meta.get("a-name"));

    meta.add("a-name", "value-1");
    assertEquals("value-1", meta.get("a-name"));
    meta.add("a-name", "value-2");
    assertEquals("value-1", meta.get("a-name"));
  }

  /** Test for <code>isMultiValued()</code> method. */
  public void testIsMultiValued() {
    SpellCheckedMetadata meta = new SpellCheckedMetadata();
    assertFalse(meta.isMultiValued("key"));
    meta.add("key", "value1");
    assertFalse(meta.isMultiValued("key"));
    meta.add("key", "value2");
    assertTrue(meta.isMultiValued("key"));
  }

  /**
   * IO Test method, usable only when you plan to do changes in metadata
   * to measure relative performance impact.
   */
  public final void testHandlingSpeed() {
    SpellCheckedMetadata result;
    long start = System.currentTimeMillis();
    for (int i = 0; i < NUM_ITERATIONS; i++) {
      SpellCheckedMetadata scmd = constructSpellCheckedMetadata();
      result = writeRead(scmd);
    }
    System.out.println(NUM_ITERATIONS + " spellchecked metadata I/O time:"
        + (System.currentTimeMillis() - start) + "ms.");
  }

}

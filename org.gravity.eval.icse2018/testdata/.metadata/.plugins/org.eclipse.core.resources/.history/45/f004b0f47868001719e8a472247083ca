package net.sourceforge.ganttproject.task;

import net.sourceforge.ganttproject.GanttCalendar;
import net.sourceforge.ganttproject.GanttGraphicArea;
import net.sourceforge.ganttproject.GanttProject;
import net.sourceforge.ganttproject.GanttTask;
import net.sourceforge.ganttproject.GanttTaskRelationship;
import net.sourceforge.ganttproject.gui.GanttDialogInfo;
import net.sourceforge.ganttproject.gui.GanttDialogProperties;
import net.sourceforge.ganttproject.gui.TestGanttRolloverButton;
import net.sourceforge.ganttproject.resource.HumanResource;
import net.sourceforge.ganttproject.roles.Role;
import net.sourceforge.ganttproject.shape.ShapePaint;
import net.sourceforge.ganttproject.shape.JPaintCombo;
import net.sourceforge.ganttproject.shape.ShapeConstants;
import net.sourceforge.ganttproject.task.dependency.*;
import net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem;
import net.sourceforge.ganttproject.time.TimeUnitManager;
//import net.sourceforge.ganttproject.resource.ProjectResource;
import net.sourceforge.ganttproject.util.BrowserControl;

import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.tree.DefaultMutableTreeNode;

import java.util.ArrayList;
import java.util.Iterator;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.OutputStreamWriter;

/**
 * Created by IntelliJ IDEA.
 * @author bard
 * Date: 31.01.2004
 */
public class TaskImpl implements Task {
    private int myID;
    private final TaskManagerImpl myManager;
    private String myName;
    private String myWebLink = new String("http://");
    private boolean isMilestone;
    private int myPriority;
    private GanttCalendar myStart;
    private GanttCalendar myEnd;
    private int myCompletionPercentage;
    private TaskLength myLength;
    private boolean isStartFixed;

	private boolean bExpand;
    
    private TimeUnitManager myTimeUnitManager;
    //private final TaskDependencyCollection myDependencies = new TaskDependencyCollectionImpl();
    private final ResourceAssignmentCollectionImpl myAssignments;
    private final TaskDependencySlice myDependencySlice;
    private final TaskDependencySlice myDependencySliceAsDependant;
    private final TaskDependencySlice myDependencySliceAsDependee;
    private boolean myEventsEnabled;
    private final TaskHierarchyItem myTaskHierarchyItem;
    private ShapePaint myShape;
    private Color myColor;
    private String myNotes;


    protected TaskImpl(TaskManager taskManager) {
        myManager = (TaskManagerImpl) taskManager;
        myID = myManager.getMaxID();
        myManager.increaseMaxID();
        myTimeUnitManager = myManager.getTimeUnitManager();
        myAssignments = new ResourceAssignmentCollectionImpl(this);
        myDependencySlice = new TaskDependencySliceImpl(this, myManager.getDependencyCollection());
        myDependencySliceAsDependant = new TaskDependencySliceAsDependant(this, myManager.getDependencyCollection());
        myDependencySliceAsDependee = new TaskDependencySliceAsDependee(this, myManager.getDependencyCollection());
        myPriority = 1;
        myTaskHierarchyItem = myManager.getHierarchyManager().createItem(this);
        isStartFixed = false;
        myNotes = "";
		bExpand = true;
        myColor=null;
    }

    protected TaskImpl(TaskImpl copy) {
        myManager = copy.myManager;
        myAssignments = copy.myAssignments.copy();
        myID = copy.myID;
        myName = copy.myName;
        myWebLink = copy.myWebLink;
        isMilestone = copy.isMilestone;
        myPriority = copy.myPriority;
        myStart = copy.myStart;
        myEnd = copy.myEnd;
        myCompletionPercentage = copy.myCompletionPercentage;
        myLength = copy.myLength;
        isStartFixed = copy.isStartFixed;
        myShape = copy.myShape;
        myColor = copy.myColor;
        myNotes = copy.myNotes;
		bExpand = copy.bExpand;
        //
        myTimeUnitManager = copy.myTimeUnitManager;
        myDependencySlice = copy.myDependencySlice;
        myDependencySliceAsDependant = copy.myDependencySliceAsDependant;
        myDependencySliceAsDependee = copy.myDependencySliceAsDependee;
        myTaskHierarchyItem = myManager.getHierarchyManager().createItem(this);
    }

    public TaskMutator createMutator() {
        return new MutatorImpl();
    }

    // main properties
    public int getTaskID() {
        return myID;
    }

    public String getName() {
        return myName;
    }
    
    public String getWebLink() {
        return myWebLink;
    }

    public boolean isMilestone() {
        return isMilestone;
    }

    public int getPriority() {
        return myPriority;
    }

    public GanttCalendar getStart() {
        return myStart;
    }

    public GanttCalendar getEnd() {
        if (myEnd==null) {
            myEnd = getStart().Clone();
            myEnd.add((int) getDuration().getLength());
        }
        return myEnd;
    }

    public TaskLength getDuration() {
        //System.err.println("[TaskImp] this="+this+" duration="+myLength+" id="+myID);
        return myLength;
    }

    public int getCompletionPercentage() {
        return myCompletionPercentage;
    }

    public boolean isStartFixed() {
        return isStartFixed;
    }

	public boolean getExpand(){
    	return bExpand;
    }

    public ShapePaint getShape() {
        return myShape==null ?
                new ShapePaint(ShapeConstants.BACKSLASH, getColor() , getColor()) :
                myShape;
    }

    public Color getColor() {
        return myColor==null ? myManager.getConfig().getDefaultColor() : myColor;
    }

    public String getNotes() {
        return myNotes;
    }

    public GanttTaskRelationship[] getPredecessors() {
        return new GanttTaskRelationship[0];  //To change body of implemented methods use Options | File Templates.
    }

    public GanttTaskRelationship[] getSuccessors() {
        return new GanttTaskRelationship[0];  //To change body of implemented methods use Options | File Templates.
    }

    public ResourceAssignment[] getAssignments() {
        return myAssignments.getAssignments();
    }

    public ResourceAssignmentCollection getAssignmentCollection() {
        return myAssignments;
    }

    //
    public Task getSupertask() {
        TaskHierarchyItem container = myTaskHierarchyItem.getContainerItem();
        return container.getTask();
    }

    public Task[] getNestedTasks() {
        TaskHierarchyItem[] nestedItems = myTaskHierarchyItem.getNestedItems();
        Task[] result = new Task[nestedItems.length];
        for (int i=0; i<nestedItems.length; i++) {
            result[i] = nestedItems[i].getTask();
        }
        return result;
    }

    public void move(Task targetSupertask) {
        TaskImpl supertaskImpl = (TaskImpl) targetSupertask;
        TaskHierarchyItem targetItem = supertaskImpl.myTaskHierarchyItem;
        myTaskHierarchyItem.delete();
        targetItem.addNestedItem(myTaskHierarchyItem);
    }

    public TaskDependencySlice getDependencies() {
        return myDependencySlice;
    }

    public TaskDependencySlice getDependenciesAsDependant() {
        return myDependencySliceAsDependant;
    }

    public TaskDependencySlice getDependenciesAsDependee() {
        return myDependencySliceAsDependee;
    }

    public TaskManager getManager() {
        return myManager;
    }

    //TODO: remove this hack. ID must never be changed
    protected void setTaskIDHack(int taskID) {
        myID = taskID;
    }

    protected TimeUnitManager getTimeUnitManager() {
        return myTimeUnitManager;
    }

    private class MutatorImpl implements TaskMutator {
        private final List myCommands = new ArrayList();
        public void commit() {
            for (int i=0; i<myCommands.size(); i++) {
                Runnable next = (Runnable) myCommands.get(i);
                next.run();
            }
            myCommands.clear();
        }

        public void setName(final String name) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setName(name);
                }
            });
        }

        public void setMilestone(final boolean milestone) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setMilestone(milestone);
                }
            });
        }

        public void setPriority(final int priority) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setPriority(priority);
                }
            });
        }

        public void setStart(final GanttCalendar start) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setStart(start);
                }
            });
        }

        public void setEnd(final GanttCalendar end) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setEnd(end);
                }
            });
        }

        public void setDuration(final TaskLength length) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setDuration(length);
                }
            });
        }

		public void setExpand(final boolean expand) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setExpand(expand);
                }
            });
        }
    
        public void setCompletionPercentage(final int percentage) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setCompletionPercentage(percentage);
                }
            });
        }

        public void setStartFixed(final boolean isFixed) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setStartFixed(isFixed);
                }
            });
        }

        public void setShape(final ShapePaint shape) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setShape(shape);
                }
            });
        }

        public void setColor(final Color color) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setColor(color);
                }
            });
        }

        public void setNotes(final String notes) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.setNotes(notes);
                }
            });
        }

        public void addNotes(final String notes) {
            myCommands.add(new Runnable() {
                public void run() {
                    TaskImpl.this.addNotes(notes);
                }
            });
        }

    }

    public void setName(String name) {

        myName = name;
    }
    public void setWebLink(String webLink) {

        myWebLink = webLink;
    }
    public void setMilestone(boolean milestone) {
        isMilestone = milestone;
    }

    public void setPriority(int priority) {
        myPriority = priority;
    }

    public void setStart(GanttCalendar start) {
        GanttCalendar oldStart = myStart==null ? null : myStart.Clone();
        myStart = start;
        if (areEventsEnabled()) {
            myManager.fireTaskScheduleChanged(this, oldStart, getEnd());
        }
    }

    public void setEnd(GanttCalendar end) {
        GanttCalendar oldFinish = myEnd==null ? null : myEnd.Clone();
        myEnd = end;
        int length = myStart.diff(end);
        myLength = getManager().createLength(myLength.getTimeUnit(), length);
        if (areEventsEnabled()) {
            myManager.fireTaskScheduleChanged(this, myStart.Clone(), oldFinish);
        }
    }

    public void setDuration(TaskLength length) {
        GanttCalendar oldFinish = myEnd==null ? null : myEnd.Clone();
        myLength = length;
        myEnd = myStart.newAdd((int) length.getLength());
        if (areEventsEnabled()) {
            myManager.fireTaskScheduleChanged(this, myStart.Clone(), oldFinish);
        }
    }

    public void setCompletionPercentage(int percentage) {
        myCompletionPercentage = percentage;
    }

    public void setStartFixed(boolean isFixed) {
        isStartFixed = isFixed;
    }

    public void setShape(ShapePaint shape) {
        myShape = shape;
    }

    public void setColor(Color color) {
        myColor = color;
    }

    public void setNotes(String notes) {
        myNotes = notes;
	}
    
    public void setExpand(boolean expand){
    	bExpand = expand;
    }

    public void addNotes(String notes) {
        myNotes += notes;
    }

    protected void enableEvents(boolean enabled) {
        myEventsEnabled = enabled;
    }

    protected boolean areEventsEnabled() {
        return myEventsEnabled;
    }

    /**
     * Allows to determine, if a special shape is defined for this task.
     * @return true, if this task has its own shape defined.
     */
    public boolean shapeDefined()
    {
      return (myShape != null);
    }

    /**
     * Allows to determine, if a special color is defined for this task.
     * @return true, if this task has its own color defined.
     */

    public boolean colorDefined() {

      return (myColor != null);

    }

	/**@return the link of the task. */
	private String getWebLink(GanttTask task)
	{
		return (task.getWebLink().equals("http://")?"":task.getWebLink());
	}

	/** Write all tasks. */
		private void writeTasks(OutputStreamWriter out) throws IOException 
		{
	//		parse all tasks	
		    for(Iterator it=lot.iterator(); it.hasNext();)
			{
				DefaultMutableTreeNode node = (DefaultMutableTreeNode) it.next();
				if(!node.isRoot())
				{
					GanttTask task = (GanttTask)(node.getUserObject());
					
					//ID
					if(csvOptions.bExportTaskID)
						out.write(correctField(""+task.getTaskID())+
								(bFixedSize?"":csvOptions.sSeparatedChar));
						
					//Name
					if(csvOptions.bExportTaskName)
						out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
								correctField(getName(node, task))+
								(bFixedSize?"":csvOptions.sSeparatedTextChar+
								csvOptions.sSeparatedChar));
					
					//Start Date
					if(csvOptions.bExportTaskStartDate)
						out.write(correctField(task.getStart().toString())+
								(bFixedSize?"":csvOptions.sSeparatedChar));
					
					//End Date
					if(csvOptions.bExportTaskEndDate)
						out.write(correctField(task.getEnd().toString())+
								(bFixedSize?"":csvOptions.sSeparatedChar));
					
					//Duration
					if(csvOptions.bExportTaskDuration)
						out.write(correctField(""+task.getLength())+
								(bFixedSize?"":csvOptions.sSeparatedChar));
					
					//Percent complete
					if(csvOptions.bExportTaskPercent)
						out.write(correctField(""+task.getCompletionPercentage())+
								(bFixedSize?"":csvOptions.sSeparatedChar));				
	
					//Web Link
					if(csvOptions.bExportTaskWebLink)
						out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
								correctField(getWebLink(task))+
								(bFixedSize?"":csvOptions.sSeparatedTextChar+
								csvOptions.sSeparatedChar));				
					
					//associated resources
					if(csvOptions.bExportTaskResources) {
						out.write((bFixedSize?"":csvOptions.sSeparatedTextChar));					
						out.write(correctField(getAssignments(task)));					
						out.write((bFixedSize?"":csvOptions.sSeparatedTextChar+
								csvOptions.sSeparatedChar));
					}
					
					//Notes
					if(csvOptions.bExportTaskNotes)
						out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
								correctField(task.getNotes())+
								(bFixedSize?"":csvOptions.sSeparatedTextChar+
								csvOptions.sSeparatedChar));
					
					out.write("\n");
				}
			}	    
		} //end of write tasks

	/**set the maximum size for all strings. */
	void getMaxSize()
	{
		iMaxSize = 0;
		for(Iterator it=lot.iterator(); it.hasNext();)
	    {
			DefaultMutableTreeNode node = (DefaultMutableTreeNode) it.next();
			if(!node.isRoot())
			{
				GanttTask task = (GanttTask)(node.getUserObject());
	
				if(csvOptions.bExportTaskID){
					String s=""+task.getTaskID();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskName){
					String s=""+getName(node, task);
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskStartDate){
					String s=""+task.getStart();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskEndDate){
					String s=""+task.getEnd();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskDuration){
					String s=""+task.getLength();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskPercent){
					String s=""+task.getCompletionPercentage();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskWebLink){
					String s=""+getWebLink(task);
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskResources){
					String s=""+getAssignments(task);
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}
				
				if(csvOptions.bExportTaskNotes){
					String s=""+task.getNotes();
					if(s.length()>iMaxSize)iMaxSize=s.length();
				}	
				
			}
	    }
		
		//parse all resources
		for (int i = 0; i < resources.size(); i++)
		{
		   	HumanResource p = (HumanResource) resources.get(i);
		   	
		   	if(csvOptions.bExportResourceID){
				String s=""+p.getId();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourceName){
				String s=""+p.getName();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourceMail){
				String s=""+p.getMail();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourcePhone){
				String s=""+p.getPhone();
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		   	if(csvOptions.bExportResourceRole){
		   		Role role = p.getRole();
		        String sRoleID = "0";
		        if(role != null) sRoleID = role.getPersistentID();
				String s=""+sRoleID;
				if(s.length()>iMaxSize)iMaxSize=s.length();
			}
		}
		
	} //get maxIndentation end

	/** @return the list of the assignment for the resources. */
	private String getAssignments(GanttTask task)
	{
		String res = "";
		ResourceAssignment[] assignment = task.getAssignments();
		for(int i=0;i<assignment.length;i++)
			res+=(assignment[i].getResource()+(i==assignment.length-1?"":
					csvOptions.sSeparatedChar.equals(";")?",":";"));
		return res;
	}

	/**@return the name of task with the correct level.*/
	private String getName(DefaultMutableTreeNode node, GanttTask task)
	{
		if(bFixedSize) return task.getName();
		String res="";
		for(int i=0;i<node.getLevel();i++)
			res+="  ";
		return res+task.getName();
	}

	/**Construct the general panel*/
	  private void constructGeneralPanel() {
	    generalPanel = new JPanel(new GridBagLayout());
	    //first row
	    nameLabel1 = new JLabel(language.getText("name") + ":");
	    nameField1 = new JTextField(20);
	    nameField1.setName("name_of_task");
	    durationLabel1 = new JLabel(language.getText("length") + ":");
	    durationField1 = new JTextField(8);
	    durationField1.setName("length");
	    firstRowPanel1 = new JPanel(flowL);
	    setFirstRow(firstRowPanel1, gbc, nameLabel1, nameField1, durationLabel1,
	                durationField1);
	    //second row
	    percentCompleteLabel1 = new JLabel(language.getText("advancement")); //Progress
	    SpinnerNumberModel spinnerModel = new SpinnerNumberModel(0, 0, 100, 1);
	    percentCompleteSlider = new JSpinner(spinnerModel);
	
	
	    secondRowPanel1 = new JPanel(flowL);
	    secondRowPanel1.add(percentCompleteLabel1);
	    //secondRowPanel1.add(percentCompleteField1);
	    secondRowPanel1.add(percentCompleteSlider);
	    priorityLabel1 = new JLabel(language.getText("priority"));
	    secondRowPanel1.add(priorityLabel1);
	    priorityComboBox = new JComboBox();
	    priorityComboBox.addItem(language.getText("low"));
	    priorityComboBox.addItem(language.getText("normal"));
	    priorityComboBox.addItem(language.getText("hight"));
	    priorityComboBox.setEditable(false);
	
	    secondRowPanel1.add(priorityComboBox);
	
	    //third row
	
	    startDateLabel1 = new JLabel(language.getText("dateOfBegining") + ":");
	    startDateField1 = new JTextField(12);
	    startDateField1.setEditable(false);
	    finishDateLabel1 = new JLabel(language.getText("dateOfEnd") + ":");
	
	    finishDateField1 = new JTextField(12);
	    finishDateField1.setEditable(false);
	
	    ImageIcon icon = new ImageIcon(getClass().getResource("/icons/calendar_16.gif"));
	
	    startDateButton1 = new TestGanttRolloverButton(icon);
	    startDateButton1.setName("start");
		startDateButton1.setToolTipText(GanttProject.getToolTip(language.getText("chooseDate")));
	    finishDateButton1 = new TestGanttRolloverButton(icon);
	    finishDateButton1.setName("finish");
		finishDateButton1.setToolTipText(GanttProject.getToolTip(language.getText("chooseDate")));
	    thirdRowPanel1 = new JPanel(flowL);
	    thirdRowPanel1.setBorder(new TitledBorder(new EtchedBorder(), language.getText("date")));
	    thirdRowPanel1.add(startDateLabel1);
	    thirdRowPanel1.add(startDateField1);
	    thirdRowPanel1.add(startDateButton1);
	    thirdRowPanel1.add(finishDateLabel1);
	    thirdRowPanel1.add(finishDateField1);
	    thirdRowPanel1.add(finishDateButton1);
	
	    //fourth row
	
	    mileStoneCheckBox1 = new JCheckBox(language.getText("meetingPoint")); //Milestone
	    lastRowPanel1 = new JPanel(flowL);
	    lastRowPanel1.add(mileStoneCheckBox1);
	    
	    shapeComboBox = new JPaintCombo(ShapeConstants.PATTERN_LIST);
	
	
	    JPanel shapePanel = new JPanel();
	    shapePanel.setLayout(new BorderLayout());
	    JLabel lshape = new JLabel("  "+language.getText("shape")+" ");
	    shapeComboBox = new JPaintCombo(ShapeConstants.PATTERN_LIST);
	
	    shapePanel.add(lshape, BorderLayout.WEST);
	    shapePanel.add(shapeComboBox, BorderLayout.CENTER);
	    
	    
	    colorButton = new JButton(language.getText("colorButton"));
	    colorButton.setBackground(selectedTask.getColor());
	    final String colorChooserTitle = language.getText("selectColor");
	    colorButton.addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent e) {
	        JDialog dialog;
	        dialog = JColorChooser.createDialog(parent, colorChooserTitle, true,
	                                            GanttDialogProperties.colorChooser,
	                                            new ActionListener() {
	          public void actionPerformed(ActionEvent e) {
	            colorButton.setBackground(GanttDialogProperties.colorChooser.
	                                      getColor());
	          }
	        }
	
	        , new ActionListener() {
	          public void actionPerformed(ActionEvent e) {
	            // nothing to do for "Cancel"
	          }
	        });
	
			/*AbstractColorChooserPanel[] panels = GanttDialogProperties.colorChooser.getChooserPanels();
	        GanttDialogProperties.colorChooser.removeChooserPanel(panels[0]);
	        GanttDialogProperties.colorChooser.addChooserPanel(panels[0]);*/
	        
	        GanttDialogProperties.colorChooser.setColor(colorButton.getBackground());        
	        dialog.show();
	      }
	    });
	
	    colorSpace = new JButton(language.getText("defaultColor"));
	    colorSpace.setBackground(GanttGraphicArea.taskDefaultColor);
	    colorSpace.setToolTipText(GanttProject.getToolTip(language.getText("resetColor")));
	    colorSpace.addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent e) {
	        colorButton.setBackground(GanttGraphicArea.taskDefaultColor);
	      }
	    });
	
	    colorPanel = new JPanel();
	    colorPanel.setLayout(new BorderLayout());
	    colorPanel.add(colorButton, "West");
	    colorPanel.add(colorSpace, "Center");
	    colorPanel.add( shapePanel, BorderLayout.EAST);
	    lastRowPanel1.add(colorPanel);
	
	    //---Set GridBagConstraints constant
	    gbc.anchor = GridBagConstraints.WEST;
	    gbc.insets.right = 15;
	    gbc.insets.left = 10;
	    gbc.insets.top = 10;
	    addUsingGBL(generalPanel, firstRowPanel1, gbc, 0, 0, 1, 1);
	    addUsingGBL(generalPanel, secondRowPanel1, gbc, 0, 1, 1, 1);
	    addUsingGBL(generalPanel, thirdRowPanel1, gbc, 0, 2, 1, 1);
	    gbc.gridx = 0;
	    gbc.gridy = 3;
	    gbc.gridwidth = 1;
	    gbc.gridheight = GridBagConstraints.RELATIVE;
	    gbc.anchor = GridBagConstraints.WEST;
	    gbc.weighty = 1;
	    generalPanel.add(lastRowPanel1, gbc);
	
	    //The panel for the web link
	    webLinkPanel = new JPanel(flowL);
	    lblWebLink = new JLabel(language.getText("webLink"));
	    webLinkPanel.add(lblWebLink);
	    tfWebLink = new JTextField(30);
	    webLinkPanel.add(tfWebLink);
	    bWebLink = new TestGanttRolloverButton(
	    			new ImageIcon(getClass().getResource("/icons/web_16.gif")));
	    bWebLink.setToolTipText(GanttProject.getToolTip(language.getText("openWebLink")));
	    webLinkPanel.add(bWebLink);
	    
	    bWebLink.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//link to open the web link
				try{
					if (!BrowserControl.displayURL(tfWebLink.getText())) {
						GanttDialogInfo gdi = new GanttDialogInfo(null,
							GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, 
							language.getText("msg4"), 
							language.getText("error"));							
						gdi.show();
					}
				} catch (Exception ex) {
				}
			}
		});
	    
	    gbc.gridy = 4;
	    generalPanel.add(webLinkPanel, gbc);
	    
	  }

	/**as the name indicated*/
	
	  public void setSelectedTask(GanttTask selectedTask) {
	
	      this.selectedTask = selectedTask;
	
	      nameField1.setText(selectedTask.getName());
	
	      //nameField2.setText(selectedTask.toString());
	
	
	      nameFieldNotes.setText(selectedTask.toString());
	
	      setName(selectedTask.toString());
	
	      durationField1.setText(selectedTask.getLength() + "");
	
	      //durationField2.setText(selectedTask.getLength() + "");
	
	
	      durationFieldNotes.setText(selectedTask.getLength() + "");
	
	      percentCompleteSlider.setValue(new Integer(selectedTask.getCompletionPercentage()));
	      percentCompleteLabel1.setText(language.getText("advancement"));
	
	      priorityComboBox.setSelectedIndex(selectedTask.getPriority());
	
	      startDateField1.setText(selectedTask.getStart().toString());
	
	      finishDateField1.setText(selectedTask.getEnd().toString());
	
	      setStart(selectedTask.getStart().Clone(), true);
	
	      setEnd(selectedTask.getEnd().Clone(), true);
	
	      bilan = selectedTask.isMilestone();
	
	      mileStoneCheckBox1.setSelected(bilan);
	
	      tfWebLink.setText(selectedTask.getWebLink());
	      
	      if (selectedTask.shapeDefined()) {
	          for (int i = 0; i < ShapeConstants.PATTERN_LIST.length; i++) {
	              if (selectedTask.getShape().equals(ShapeConstants.PATTERN_LIST[i])) {
	                  shapeComboBox.setSelectedIndex(i);
	                  break;
	              }
	          }
	      }
	
	      noteAreaNotes.setText(selectedTask.getNotes());
	      setStartFixed(selectedTask.isStartFixed());
	  }

	//Input methods
	
	  /**as the name indicated, it will not replace the original GanttTask in the Tree. */
	
	  public Task getReturnTask() {
	      myAllocationsPanel.getTableModel().commit();
	    GanttTask returnTask = selectedTask;
	    //returnTask.setTaskID(selectedTask.getTaskID());
	    returnTask.setName(getTaskName()); //getName()
	    returnTask.setWebLink(getWebLink()); //getName()
	    returnTask.setMilestone(isBilan());
	    returnTask.setChecked(false);
	    returnTask.setStart(getStart());
	    returnTask.setEnd(getEnd());
	    returnTask.setLength(getLength());
	    returnTask.setNotes(getNotes());
	    returnTask.setCompletionPercentage(getPercentComplete());
	    returnTask.setPriority(getPriority());
	      returnTask.setStartFixed(isStartFixed);
	    returnTask.setColor(colorButton.getBackground());
	    if(shapeComboBox.getSelectedIndex()!=0) //only if it's not the default shape
	    	returnTask.setShape(new ShapePaint((ShapePaint)shapeComboBox.getSelectedPaint(), Color.white, colorButton.getBackground()));
	      myDependenciesPanel.getTableModel().commit();
	
	    return returnTask;
	
	  }

}

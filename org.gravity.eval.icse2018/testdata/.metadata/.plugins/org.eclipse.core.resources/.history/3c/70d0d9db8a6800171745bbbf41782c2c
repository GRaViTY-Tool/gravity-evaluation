/*
Copyright (C) 2003 Morten O. Alver, Nizar N. Batada

All programs in this directory and
subdirectories are published under the GNU General Public License as
described below.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
USA

Further information about the GNU GPL is available at:
http://www.gnu.org/copyleft/gpl.ja.html

*/
package net.sf.jabref.imports;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.StringReader;

import net.sf.jabref.BibtexEntryType;
import net.sf.jabref.GUIGlobals;
import net.sf.jabref.Globals;
import net.sf.jabref.Util;
import net.sf.jabref.undo.NamedCompound;
import net.sf.jabref.util.XMPSchemaBibtex;
import net.sf.jabref.util.XMPUtil;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import javax.xml.transform.TransformerException;

import org.jempbox.xmp.XMPMetadata;
import org.jempbox.xmp.XMPSchema;
import org.jempbox.xmp.XMPSchemaDublinCore;
import org.pdfbox.pdmodel.PDDocument;
import org.pdfbox.pdmodel.PDDocumentCatalog;
import org.pdfbox.pdmodel.common.PDMetadata;
import org.pdfbox.util.XMLUtil;

import net.sf.jabref.AuthorList;
import net.sf.jabref.BasePanel;
import net.sf.jabref.BibtexDatabase;
import net.sf.jabref.BibtexEntry;

public class ParserResult {

    public static ParserResult INVALID_FORMAT = new ParserResult(null, null, null);
    public static ParserResult FILE_LOCKED = new ParserResult(null, null, null);
    private BibtexDatabase base;
    private HashMap<String, String> metaData;
    private HashMap<String, BibtexEntryType> entryTypes;


    private File file = null;
    private ArrayList<String> warnings = new ArrayList<String>();
    private ArrayList<String> duplicateKeys = new ArrayList<String>();

    private String errorMessage = null;
    private String encoding = null; // Which encoding was used?

    private boolean postponedAutosaveFound = false;
    private boolean invalid = false;

    private String jabrefVersion = null; // Which JabRef version wrote the file, if any?
    private int jabrefMajorVersion = 0;
    private int jabrefMinorVersion = 0;
    private int jabrefMinor2Version = 0; // Numeric version representation
    private boolean toOpenTab = false;

    public ParserResult(Collection<BibtexEntry> entries){
    	this(ImportFormatReader.createDatabase(entries), null, new HashMap<String, BibtexEntryType>());
    }
    
    public ParserResult(BibtexDatabase base, HashMap<String, String> metaData, HashMap<String, BibtexEntryType> entryTypes) {
		this.base = base;
		this.metaData = metaData;
		this.entryTypes = entryTypes;
    }

    /**
     * Check if this base is marked to be added to the currently open tab. Default is false.
     * @return
     */
    public boolean toOpenTab() {
        return toOpenTab;
    }

    public void setToOpenTab(boolean toOpenTab) {
        this.toOpenTab = toOpenTab;
    }


    /**
     * Find which version of JabRef, if any, produced this bib file.
     * @return The version number string, or null if no JabRef signature could be read.
     */
    public String getJabrefVersion() {
        return jabrefVersion;
    }

    /**
     * Set the JabRef version number string for this parser result.
     * @param jabrefVersion The version number string.                                         
     */
    public void setJabrefVersion(String jabrefVersion) {
        this.jabrefVersion = jabrefVersion;
    }


    public int getJabrefMajorVersion() {
        return jabrefMajorVersion;
    }

    public void setJabrefMajorVersion(int jabrefMajorVersion) {
        this.jabrefMajorVersion = jabrefMajorVersion;
    }

    public int getJabrefMinorVersion() {
        return jabrefMinorVersion;
    }

    public void setJabrefMinorVersion(int jabrefMinorVersion) {
        this.jabrefMinorVersion = jabrefMinorVersion;
    }

    public int getJabrefMinor2Version() {
        return jabrefMinor2Version;
    }

    public void setJabrefMinor2Version(int jabrefMinor2Version) {
        this.jabrefMinor2Version = jabrefMinor2Version;
    }
    
    public BibtexDatabase getDatabase() {
    	return base;
    }

    public HashMap<String, String> getMetaData() {
	return metaData;
    }

    public HashMap<String, BibtexEntryType> getEntryTypes() {
    	return entryTypes;
    }

    public File getFile() {
      return file;
    }

    public void setFile(File f) {
      file = f;
    }

    /**
     * Sets the variable indicating which encoding was used during parsing.
     *
     * @param enc String the name of the encoding.
     */
    public void setEncoding(String enc) {
      encoding = enc;
    }

    /**
     * Returns the name of the encoding used during parsing, or null if not specified
     * (indicates that prefs.get("defaultEncoding") was used).
     */
    public String getEncoding() {
      return encoding;
    }

    /**
     * Add a parser warning.
     *
     * @param s String Warning text. Must be pretranslated. Only added if there isn't already a dupe.
     */
    public void addWarning(String s) {
        if (!warnings.contains(s))
            warnings.add(s);
    }

    public boolean hasWarnings() {
      return (warnings.size() > 0);
    }

    public String[] warnings() {
      String[] s = new String[warnings.size()];
      for (int i=0; i<warnings.size(); i++)
        s[i] = warnings.get(i);
      return s;
    }

    /**
     * Add a key to the list of duplicated BibTeX keys found in the database.
     * @param key The duplicated key
     */
    public void addDuplicateKey(String key) {
        if (!duplicateKeys.contains(key))
            duplicateKeys.add(key);
    }

    /**
     * Query whether any duplicated BibTeX keys have been found in the database.
     * @return true if there is at least one duplicate key.
     */
    public boolean hasDuplicateKeys() {
        return duplicateKeys.size() > 0;
    }

    /**
     * Get all duplicated keys found in the database.
     * @return An array containing the duplicated keys.
     */
    public String[] getDuplicateKeys() {
        return duplicateKeys.toArray(new String[duplicateKeys.size()]);
    }
    

    public boolean isPostponedAutosaveFound() {
        return postponedAutosaveFound;
    }

    public void setPostponedAutosaveFound(boolean postponedAutosaveFound) {
        this.postponedAutosaveFound = postponedAutosaveFound;
    }

    public boolean isInvalid() {
        return invalid;
    }

    public void setInvalid(boolean invalid) {
        this.invalid = invalid;
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

	/**
	 * Test for [ 1594123 ] Failure to import big numbers
	 * 
	 * Issue Reported by Ulf Martin.
	 * 
	 * @throws IOException
	 */
	public void testBigNumbers() throws IOException {
	
		ParserResult result = BibtexParser.parse(new StringReader("@article{canh05,"
			+ "isbn = 1234567890123456789,\n" + "isbn2 = {1234567890123456789},\n"
			+ "small = 1234,\n" + "}"));
	
		Collection<BibtexEntry> c = result.getDatabase().getEntries();
		BibtexEntry e = c.iterator().next();
	
		assertEquals("1234567890123456789", e.getField("isbn"));
		assertEquals("1234567890123456789", e.getField("isbn2"));
		assertEquals("1234", e.getField("small"));
	}

	public void testParseReader() throws IOException {
	
		ParserResult result = BibtexParser.parse(new StringReader(
			"@article{test,author={Ed von Test}}"));
	
		Collection<BibtexEntry> c = result.getDatabase().getEntries();
		assertEquals(1, c.size());
	
		BibtexEntry e = c.iterator().next();
		assertEquals("test", e.getCiteKey());
		assertEquals(2, e.getAllFields().size());
		Set<String> o = e.getAllFields();
		assertTrue(o.contains("author"));
		assertEquals("Ed von Test", e.getField("author"));
	}

	public void testParse() throws IOException {
	
		// Test Standard parsing
		BibtexParser parser = new BibtexParser(new StringReader(
			"@article{test,author={Ed von Test}}"));
		ParserResult result = parser.parse();
	
		Collection<BibtexEntry> c = result.getDatabase().getEntries();
		assertEquals(1, c.size());
	
		BibtexEntry e = c.iterator().next();
		assertEquals("test", e.getCiteKey());
		assertEquals(2, e.getAllFields().size());
		assertTrue(e.getAllFields().contains("author"));
		assertEquals("Ed von Test", e.getField("author"));
	
		// Calling parse again will return the same result
		assertEquals(result, parser.parse());
	}

	/**
	 * Test that readXMP and writeXMP work together.
	 * 
	 * @throws Exception
	 */
	public void testResolveStrings() throws Exception {
		ParserResult original = BibtexParser
				.parse(new StringReader(
						"@string{ crow = \"Crowston, K.\"}\n"
								+ "@string{ anna = \"Annabi, H.\"}\n"
								+ "@string{ howi = \"Howison, J.\"}\n"
								+ "@string{ masa = \"Masango, C.\"}\n"
								+ "@article{canh05,"
								+ "  author = {#crow# and #anna# and #howi# and #masa#},"
								+ "\n"
								+ "  title = {Effective work practices for floss development: A model and propositions},"
								+ "\n"
								+ "  booktitle = {Hawaii International Conference On System Sciences (HICSS)},"
								+ "\n"
								+ "  year = {2005},"
								+ "\n"
								+ "  owner = {oezbek},"
								+ "\n"
								+ "  timestamp = {2006.05.29},"
								+ "\n"
								+ "  url = {http://james.howison.name/publications.html}"
								+ "\n" + "}"));
	
		Collection<BibtexEntry> c = original.getDatabase().getEntries();
		assertEquals(1, c.size());
	
		BibtexEntry e = c.iterator().next();
	
		XMPUtil.writeXMP(pdfFile, e, original.getDatabase());
	
		List<BibtexEntry> l = XMPUtil.readXMP(pdfFile.getAbsoluteFile());
		assertEquals(1, l.size());
		BibtexEntry x = l.get(0);
	
		assertEquals(
				AuthorList
						.getAuthorList("Crowston, K. and Annabi, H. and Howison, J. and Masango, C."),
				AuthorList.getAuthorList(x.getField("author").toString()));
	}

	/**
	 * A better testcase for resolveStrings. Makes sure that also the document
	 * information and dublin core are written correctly.
	 * 
	 * Data was contributed by Philip K.F. H�lzenspies (p.k.f.holzenspies [at] utwente.nl).
	 * 
	 * @throws IOException
	 * @throws FileNotFoundException
	 * @throws TransformerException
	 * 
	 */
	@SuppressWarnings("unchecked")
	public void testResolveStrings2() throws FileNotFoundException,
			IOException, TransformerException {
	
		ParserResult result = BibtexParser.parse(new FileReader(
				"src/tests/net/sf/jabref/util/twente.bib"));
	
		assertEquals("Arvind", result.getDatabase().resolveForStrings(
				"#Arvind#"));
	
		AuthorList originalAuthors = AuthorList
				.getAuthorList("Patterson, David and Arvind and Asanov\\'\\i{}c, Krste and Chiou, Derek and Hoe, James and Kozyrakis, Christos and Lu, S{hih-Lien} and Oskin, Mark and Rabaey, Jan and Wawrzynek, John");
	
		try {
			XMPUtil.writeXMP(pdfFile, result.getDatabase().getEntryByKey(
					"Patterson06"), result.getDatabase());
	
			// Test whether we the main function can load the bibtex correctly
			BibtexEntry b = XMPUtil.readXMP(pdfFile).get(0);
	
			assertEquals(originalAuthors, AuthorList.getAuthorList(b.getField(
					"author").toString()));
	
			// Next check from Document Information
			PDDocument document = PDDocument.load(pdfFile.getAbsoluteFile());
			try {
	
				assertEquals(originalAuthors, AuthorList.getAuthorList(document
						.getDocumentInformation().getAuthor()));
	
				b = XMPUtil.getBibtexEntryFromDocumentInformation(document
						.getDocumentInformation());
				assertEquals(originalAuthors, AuthorList.getAuthorList(b
						.getField("author").toString()));
	
				// Now check from Dublin Core
				PDDocumentCatalog catalog = document.getDocumentCatalog();
				PDMetadata metaRaw = catalog.getMetadata();
	
				if (metaRaw == null) {
					fail();
				}
	
				XMPMetadata meta = new XMPMetadata(XMLUtil.parse(metaRaw
						.createInputStream()));
				meta.addXMLNSMapping(XMPSchemaBibtex.NAMESPACE,
						XMPSchemaBibtex.class);
	
				List<XMPSchema> schemas = meta
						.getSchemasByNamespaceURI("http://purl.org/dc/elements/1.1/");
	
				assertEquals(1, schemas.size());
	
				XMPSchemaDublinCore dcSchema = (XMPSchemaDublinCore) schemas
						.iterator().next();
				assertNotNull(dcSchema);
	
				assertEquals("David Patterson", dcSchema.getCreators().get(0));
				assertEquals("Arvind", dcSchema.getCreators().get(1));
				assertEquals("Krste Asanov\\'\\i{}c", dcSchema.getCreators()
						.get(2));
	
				b = XMPUtil.getBibtexEntryFromDublinCore(dcSchema);
				assertEquals(originalAuthors, AuthorList.getAuthorList(b
						.getField("author").toString()));
			} finally {
				document.close();
			}
	
		} finally {
			pdfFile.delete();
		}
	}

	/**
	 * Is XML in text properties properly escaped?
	 * 
	 * @throws Exception
	 * 
	 */
	public void testXMLEscape() throws Exception {
		ParserResult result = BibtexParser
				.parse(new StringReader(
						"@article{canh05,"
								+ "  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},"
								+ "\n"
								+ "  title = {</bibtex:title> \" bla \" '' '' && &  for floss development: A model and propositions},"
								+ "\n"
								+ "  booktitle = {<randomXML>},"
								+ "\n"
								+ "  year = {2005},"
								+ "\n"
								+ "  owner = {oezbek},"
								+ "\n"
								+ "  timestamp = {2006.05.29},"
								+ "\n"
								+ "  url = {http://james.howison.name/publications.html}"
								+ "\n" + "}"));
	
		Collection<BibtexEntry> c = result.getDatabase().getEntries();
		assertEquals(1, c.size());
	
		BibtexEntry e = c.iterator().next();
	
		XMPUtil.writeXMP(pdfFile, e, null);
	
		List<BibtexEntry> l = XMPUtil.readXMP(pdfFile.getAbsoluteFile());
		assertEquals(1, l.size());
		BibtexEntry x = l.get(0);
	
		assertEquals(e, x);
	}

	/**
	 * 
	 * 
	 * @depends XMPUtil.writeXMP
	 * 
	 */
	public void testCommandLineSinglePdf() throws Exception {
		{
			// Write XMP to file
	
			BibtexEntry e = t1BibtexEntry();
	
			XMPUtil.writeXMP(pdfFile, e, null);
	
			ByteArrayOutputStream s = new ByteArrayOutputStream();
			PrintStream oldOut = System.out;
			System.setOut(new PrintStream(s));
			XMPUtil.main(new String[] { pdfFile.getAbsolutePath() });
			System.setOut(oldOut);
			s.close();
			String bibtex = s.toString();
	
			ParserResult result = BibtexParser.parse(new StringReader(bibtex));
			Collection<BibtexEntry> c = result.getDatabase().getEntries();
			assertEquals(1, c.size());
			BibtexEntry x = c.iterator().next();
	
			assertEquals(e, x);
		}
		{
			// Write XMP to file
			BibtexEntry e = t1BibtexEntry();
	
			XMPUtil.writeXMP(pdfFile, e, null);
	
			ByteArrayOutputStream s = new ByteArrayOutputStream();
			PrintStream oldOut = System.out;
			System.setOut(new PrintStream(s));
			XMPUtil.main(new String[] { "-x", pdfFile.getAbsolutePath() });
			System.setOut(oldOut);
			s.close();
			String xmp = s.toString();
	
			/* Test minimal syntaxical completeness */
			assertTrue(0 < xmp.indexOf("xpacket"));
			assertTrue(0 < xmp.indexOf("adobe:ns:meta"));
			assertTrue(0 < xmp
					.indexOf("<bibtex:bibtexkey>canh05</bibtex:bibtexkey>")
					|| 0 < xmp.indexOf("bibtex:bibtexkey="));
			assertTrue(0 < xmp.indexOf("<rdf:li>K. Crowston</rdf:li>"));
			assertTrue(0 < xmp.indexOf("id='W5M0MpCehiHzreSzNTczkc9d'?>")
					|| 0 < xmp.indexOf("id=\"W5M0MpCehiHzreSzNTczkc9d\"?>"));
			assertTrue(0 < xmp
					.indexOf("xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'")
					|| 0 < xmp
							.indexOf("xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\""));
			assertTrue(0 < xmp.indexOf("<rdf:Description"));
			assertTrue(0 < xmp.indexOf("<?xpacket end='w'?>")
					|| 0 < xmp.indexOf("<?xpacket end=\"w\"?>"));
	
			/* Test contents of string */
			writeManually(pdfFile, xmp);
			List<BibtexEntry> l = XMPUtil.readXMP(pdfFile);
			assertEquals(1, l.size());
	
			assertEquals(t1BibtexEntry(), l.get(0));
		}
	}

	/**
	 * Test that readXMP and writeXMP work together.
	 * 
	 * @throws Exception
	 */
	public void testReadWriteXMP() throws Exception {
		ParserResult result = BibtexParser
				.parse(new StringReader(
						"@article{canh05,"
								+ "  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},"
								+ "\n"
								+ "  title = {Effective work practices for floss development: A model and propositions},"
								+ "\n"
								+ "  booktitle = {Hawaii International Conference On System Sciences (HICSS)},"
								+ "\n"
								+ "  year = {2005},"
								+ "\n"
								+ "  owner = {oezbek},"
								+ "\n"
								+ "  timestamp = {2006.05.29},"
								+ "\n"
								+ "  url = {http://james.howison.name/publications.html}"
								+ "\n" + "}"));
	
		Collection<BibtexEntry> c = result.getDatabase().getEntries();
		assertEquals(1, c.size());
	
		BibtexEntry e = c.iterator().next();
	
		XMPUtil.writeXMP(pdfFile, e, null);
	
		List<BibtexEntry> l = XMPUtil.readXMP(pdfFile.getAbsoluteFile());
		assertEquals(1, l.size());
		BibtexEntry x = l.get(0);
	
		assertEquals(e, x);
	}

	@SuppressWarnings("unchecked")
	public void testReadRawXMP() throws Exception {
	
		ParserResult result = BibtexParser
				.parse(new StringReader(
						"@article{canh05,"
								+ "  author = {Crowston, K. and Annabi, H. and Howison, J. and Masango, C.},\n"
								+ "  title = {Effective work practices for floss development: A model and propositions},\n"
								+ "  booktitle = {Hawaii International Conference On System Sciences (HICSS)},\n"
								+ "  year = {2005},\n"
								+ "  owner = {oezbek},\n"
								+ "  timestamp = {2006.05.29},\n"
								+ "  url = {http://james.howison.name/publications.html}}"));
	
		Collection c = result.getDatabase().getEntries();
		assertEquals(1, c.size());
	
		BibtexEntry e = (BibtexEntry) c.iterator().next();
	
		XMPUtil.writeXMP(pdfFile, e, null);
	
		XMPMetadata metadata = XMPUtil.readRawXMP(pdfFile);
	
		List<XMPSchema> schemas = metadata.getSchemas();
		assertEquals(2, schemas.size());
		schemas = metadata.getSchemasByNamespaceURI(XMPSchemaBibtex.NAMESPACE);
		assertEquals(1, schemas.size());
		XMPSchemaBibtex bib = (XMPSchemaBibtex) schemas.get(0);
	
		List<String> authors = bib.getSequenceList("author");
		assertEquals(4, authors.size());
		assertEquals("K. Crowston", authors.get(0));
		assertEquals("H. Annabi", authors.get(1));
		assertEquals("J. Howison", authors.get(2));
		assertEquals("C. Masango", authors.get(3));
	
		assertEquals("Article", bib.getTextProperty("entrytype"));
		assertEquals(
				"Effective work practices for floss development: A model and propositions",
				bib.getTextProperty("title"));
		assertEquals(
				"Hawaii International Conference On System Sciences (HICSS)",
				bib.getTextProperty("booktitle"));
		assertEquals("2005", bib.getTextProperty("year"));
		assertEquals("oezbek", bib.getTextProperty("owner"));
		assertEquals("http://james.howison.name/publications.html", bib
				.getTextProperty("url"));
	
	}

	/**
	 * This method performs the actual changes.
	 * @param panel
	 * @param pr
	 * @param fileDir The path to the file directory to set, or null if it should not be set.
	 */
	public void makeChanges(BasePanel panel, ParserResult pr, boolean upgradePrefs,
	                        boolean upgradeDatabase, String fileDir) {
	
	    if (upgradeDatabase) {
	        // Update file links links in the database:
	        NamedCompound ce = Util.upgradePdfPsToFile(pr.getDatabase(), FIELDS_TO_LOOK_FOR);
	        panel.undoManager.addEdit(ce);
	        panel.markBaseChanged();
	    }
	
	    if (fileDir != null) {
	        Globals.prefs.put(GUIGlobals.FILE_FIELD+"Directory", fileDir);
	    }
	
	    if (upgradePrefs) {
	        // Exchange table columns:
	        Globals.prefs.putBoolean("pdfColumn", Boolean.FALSE);
	        Globals.prefs.putBoolean("fileColumn", Boolean.TRUE);
	
	        // Modify General fields if necessary:
	        // If we don't find the file field, insert it at the bottom of the first tab:
	        if (!showsFileInGenFields()) {
	            String gfs = Globals.prefs.get(Globals.prefs.CUSTOM_TAB_FIELDS+"0");
	            //System.out.println(gfs);
	            StringBuffer sb = new StringBuffer(gfs);
	            if (gfs.length() > 0)
	                sb.append(";");
	            sb.append(GUIGlobals.FILE_FIELD);
	            Globals.prefs.put(Globals.prefs.CUSTOM_TAB_FIELDS+"0", sb.toString());
	            Globals.prefs.updateEntryEditorTabList();
	            panel.frame().removeCachedEntryEditors();
	        }
	        panel.frame().setupAllTables();
	    }
	}

	public static BibtexEntry bibtexString2BibtexEntry(String s)
			throws IOException {
		ParserResult result = BibtexParser.parse(new StringReader(s));
		Collection<BibtexEntry> c = result.getDatabase().getEntries();
		assertEquals(1, c.size());
		return c.iterator().next();
	}
}

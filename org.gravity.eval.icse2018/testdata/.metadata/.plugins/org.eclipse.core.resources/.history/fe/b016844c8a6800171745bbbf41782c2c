package edu.ncsu.csc.itrust.unit.action;

import edu.ncsu.csc.itrust.action.RequestRecordsReleaseAction;
import edu.ncsu.csc.itrust.beans.forms.RecordsReleaseForm;
import edu.ncsu.csc.itrust.dao.DAOFactory;
import edu.ncsu.csc.itrust.unit.datagenerators.TestDataGenerator;
import edu.ncsu.csc.itrust.unit.testutils.EvilDAOFactory;
import edu.ncsu.csc.itrust.unit.testutils.TestDAOFactory;
import junit.framework.TestCase;

public class RequestRecordsReleaseActionTest extends TestCase {

	private DAOFactory factory = TestDAOFactory.getTestInstance();
	private DAOFactory evilFactory = EvilDAOFactory.getEvilInstance();
	private TestDataGenerator gen;
	private RequestRecordsReleaseAction action;
	
	@Override
	protected void setUp() throws Exception {
		gen = new TestDataGenerator();
		gen.clearAllTables();
		gen.standardData();
		action = new RequestRecordsReleaseAction(factory, 102L);
	}
	
	public void testAddRecordsRelease() {
		//Insert a good request
		RecordsReleaseForm form = new RecordsReleaseForm();
		form.setReleaseHospitalID("1");
		form.setRecipientHospitalName("New Hospital");
		form.setRecipientHospitalAddress("123 Fake Street");
		form.setRecipientFirstName("BillyBob");
		form.setRecipientLastName("Joe");
		form.setRecipientPhone("919-123-4567");
		form.setRecipientEmail("bbjoe@yahoo.com");
		form.setRequestJustification("Just for kicks n' giggles");
		form.setDigitalSignature(true);
		assertEquals("Request successfully sent", action.addRecordsRelease(form));
		
		//Insert a bad request form without a digital signature
		RecordsReleaseForm noSigForm = new RecordsReleaseForm();
		noSigForm.setReleaseHospitalID("1");
		noSigForm.setRecipientHospitalName("New Hospital");
		noSigForm.setRecipientHospitalAddress("123 Fake Street");
		noSigForm.setRecipientFirstName("BillyBob");
		noSigForm.setRecipientLastName("Joe");
		noSigForm.setRecipientPhone("919-123-4567");
		noSigForm.setRecipientEmail("bbjoe@yahoo.com");
		noSigForm.setRequestJustification("Just for kicks n' giggles");
		noSigForm.setDigitalSignature(false);
		assertEquals("Error: Digital signature does not match name on record", action.addRecordsRelease(noSigForm));
		
		//Insert a bad request form that has not been filled
		RecordsReleaseForm unfilledForm = new RecordsReleaseForm();
		String unfilledFormMsg = "This form has not been validated correctly. The following field are not properly "
				+ "filled in: [Release Hospital ID: Between 1 and 10 digits, Recipient hospital name: "
				+ "Between 1 and 30 alphanumerics, space, ', and ., Recipient hospital address: Up to 100 "
				+ "alphanumeric characters, comma, and ., Doctor's first name: Up to 20 Letters, space, ' and -, "
				+ "Doctor's last name: Up to 20 Letters, space, ' and -, Doctor's phone number: xxx-xxx-xxxx, "
				+ "Doctor's email address: Up to 30 alphanumeric characters and symbols . and _ @], "
				+ "Digital signature does not match name on record";
		assertEquals(unfilledFormMsg, action.addRecordsRelease(unfilledForm));
		
		//Insert a bad request form completely unfilled except for the digital signature
		unfilledForm.setDigitalSignature(true);
		String unfilledFormMsg2 = "This form has not been validated correctly. The following field are not properly "
				+ "filled in: [Release Hospital ID: Between 1 and 10 digits, Recipient hospital name: "
				+ "Between 1 and 30 alphanumerics, space, ', and ., Recipient hospital address: Up to 100 "
				+ "alphanumeric characters, comma, and ., Doctor's first name: Up to 20 Letters, space, ' and -, "
				+ "Doctor's last name: Up to 20 Letters, space, ' and -, Doctor's phone number: xxx-xxx-xxxx, "
				+ "Doctor's email address: Up to 30 alphanumeric characters and symbols . and _ @]";
		assertEquals(unfilledFormMsg2, action.addRecordsRelease(unfilledForm));
		
	}
	
	public void testGetAllPatientHospitals() {
		assertTrue(!action.getAllPatientHospitals().isEmpty());
	}
}

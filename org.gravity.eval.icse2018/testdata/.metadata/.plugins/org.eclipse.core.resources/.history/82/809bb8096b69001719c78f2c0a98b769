/* Generated By:JJTree: Do not edit this line. ASTName.java */

package net.sourceforge.pmd.ast;

import net.sourceforge.pmd.symboltable.NameDeclaration;
import net.sourceforge.pmd.symboltable.VariableNameDeclaration;

public class ASTName extends SimpleJavaNode {
    public ASTName(int id) {
        super(id);
    }

    public ASTName(JavaParser p, int id) {
        super(p, id);
    }

    private NameDeclaration nd;

    public void setNameDeclaration(NameDeclaration nd) {
        this.nd = nd;
    }

    public NameDeclaration getNameDeclaration() {
        return this.nd;
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

	private boolean isAllocatedStringBuffer(ASTAdditiveExpression node) {
	    ASTAllocationExpression ao = (ASTAllocationExpression) node.getFirstParentOfType(ASTAllocationExpression.class);
	    if (ao == null) {
	        return false;
	    }
	    // note that the child can be an ArrayDimsAndInits, for example, from java.lang.FloatingDecimal:  t = new int[ nWords+wordcount+1 ];
	    ASTClassOrInterfaceType an = (ASTClassOrInterfaceType) ao.getFirstChildOfType(ASTClassOrInterfaceType.class);
	    return an != null && (an.getImage().endsWith("StringBuffer") || an.getImage().endsWith("StringBuilder"));
	}

	protected static boolean isInStringBufferOperation(SimpleNode node, int length, String methodName) {
	    if (!xParentIsStatementExpression(node, length)) {
	        return false;
	    }
	    ASTStatementExpression s = (ASTStatementExpression) node.getFirstParentOfType(ASTStatementExpression.class);
	    if (s == null) {
	        return false;
	    }
	    ASTName n = (ASTName)s.getFirstChildOfType(ASTName.class);
	    if (n == null || n.getImage().indexOf(methodName) == -1 || !(n.getNameDeclaration() instanceof VariableNameDeclaration)) {
	        return false;
	    }
	
	    // TODO having to hand-code this kind of dredging around is ridiculous
	    // we need something to support this in the framework
	    // but, "for now" (tm):
	    // if more than one arg to append(), skip it
	    ASTArgumentList argList = (ASTArgumentList)s.getFirstChildOfType(ASTArgumentList.class);
	    if (argList == null || argList.jjtGetNumChildren() > 1) {
	        return false;
	    }
	
	    return ((VariableNameDeclaration)n.getNameDeclaration()).getTypeImage().equals("StringBuffer");
	}

	// TODO move this method to SimpleNode
	private static boolean xParentIsStatementExpression(SimpleNode node, int length) {
	    Node curr = node;
	    for (int i=0; i<length; i++) {
	        if (node.jjtGetParent() == null) {
	            return false;
	        }
	        curr = curr.jjtGetParent();
	    }
	    return curr instanceof ASTStatementExpression;
	}

}

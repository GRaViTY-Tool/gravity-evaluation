/*
 * Copyright (C) 2003 Morten O. Alver, Nizar N. Batada
 *
 * All programs in this directory and subdirectories are published under the GNU
 * General Public License as described below.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Further information about the GNU GPL is available at:
 * http://www.gnu.org/copyleft/gpl.ja.html
 *
 */
package net.sf.jabref;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;
import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

/**
 * A single tab displayed in the EntryEditor holding several FieldEditors.
 *
 * @author $Author: mortenalver $
 * @version $Revision: 3339 $ ($Date: 2010-10-19 21:40:53 +0200 (Tue, 19 Oct 2010) $)
 *
 */
public class CompressedEntryEditorTab extends EntryEditorTab {

	private JPanel panel = new JPanel();

	private String[] fields;

	private EntryEditor parent;

	private HashMap<String, FieldEditor> editors = new HashMap<String, FieldEditor>();

	private FieldEditor activeField = null;

	public CompressedEntryEditorTab(JabRefFrame frame, BasePanel panel, List<String> fields, EntryEditor parent,
                          boolean addKeyField, String name) {
		if (fields != null)
			this.fields = fields.toArray(new String[0]);
		else
			this.fields = new String[] {};

		this.parent = parent;

		setupPanel(frame, panel, addKeyField, name);

		/*
		 * The following line makes sure focus cycles inside tab instead of
		 * being lost to other parts of the frame:
		 */
		panel.setFocusCycleRoot(true);
	}


    BibtexEntry entry;

	public BibtexEntry getEntry() {
		return entry;
	}

	boolean isFieldModified(FieldEditor f) {
		String text = f.getText().trim();

		if (text.length() == 0) {
			return getEntry().getField(f.getFieldName()) != null;
		} else {
			Object entryValue = getEntry().getField(f.getFieldName());
			return entryValue == null || !entryValue.toString().equals(text);
		}
	}

	public void markIfModified(FieldEditor f) {
		// Only mark as changed if not already is and the field was indeed
		// modified
		if (!updating && !parent.panel.isBaseChanged() && isFieldModified(f)) {
			markBaseChanged();
		}
	}

	void markBaseChanged() {
		parent.panel.markBaseChanged();
	}

	/**
	 * Only sets the activeField variable but does not focus it.
	 *
	 * Call activate afterwards.
	 *
	 * @param c
	 */
	public void setActive(FieldEditor c) {
		activeField = c;
	}

	public FieldEditor getActive() {
		return activeField;
	}

	public List<String> getFields() {
		return java.util.Arrays.asList(fields);
	}

	public void activate() {
		if (activeField != null){
			/**
			 * Corrected to fix [ 1594169 ] Entry editor: navigation between panels
			 */
			new FocusRequester(activeField.getTextComponent());
		}
	}

	/**
	 * Reset all fields from the data in the BibtexEntry.
	 *
	 */
	public void updateAll() {
		setEntry(getEntry());
	}

	protected boolean updating = false;

	public void setEntry(BibtexEntry entry) {
		try {
			updating = true;
			Iterator<FieldEditor> i = editors.values().iterator();
			while (i.hasNext()) {
				FieldEditor editor = i.next();
				Object content = entry.getField(editor.getFieldName());
                String toSet = (content == null) ? "" : content.toString();
                if (!toSet.equals(editor.getText()))
				    editor.setText(toSet);
			}
			this.entry = entry;
		} finally {
			updating = false;
		}
	}

	public boolean updateField(String field, String content) {
		if (!editors.containsKey(field))
			return false;
		FieldEditor ed = editors.get(field);
		ed.setText(content);
		return true;
	}

	public void validateAllFields() {
		for (Iterator<String> i = editors.keySet().iterator(); i.hasNext();) {
			String field = i.next();
			FieldEditor ed = editors.get(field);
			ed.setEnabled(true);
			if (((Component) ed).hasFocus())
				ed.setActiveBackgroundColor();
			else
				ed.setValidBackgroundColor();
		}
	}

	public void setEnabled(boolean enabled) {
		Iterator<FieldEditor> i = editors.values().iterator();
		while (i.hasNext()) {
			FieldEditor editor = i.next();
			editor.setEnabled(enabled);
		}
	}

	public Component getPane() {
		return panel;
	}

	/*
	 * Focus listener that fires the storeFieldAction when a FieldTextArea loses
	 * focus.
	 *
	 * TODO: It would be nice to test this thoroughly.
	 */
	FocusListener fieldListener = new FocusListener() {

		JTextComponent c;

		DocumentListener d;

		public void focusGained(FocusEvent e) {

			synchronized (this){
				if (c != null) {
					c.getDocument().removeDocumentListener(d);
					c = null;
					d = null;
				}

				if (e.getSource() instanceof JTextComponent) {

					c = (JTextComponent) e.getSource();
					/**
					 * [ 1553552 ] Not properly detecting changes to flag as
					 * changed
					 */
					d = new DocumentListener() {

						void fire(DocumentEvent e) {
							if (c.isFocusOwner()) {
								markIfModified((FieldEditor) c);
							}
						}

						public void changedUpdate(DocumentEvent e) {
							fire(e);
						}

						public void insertUpdate(DocumentEvent e) {
							fire(e);
						}

						public void removeUpdate(DocumentEvent e) {
							fire(e);
						}
					};
					c.getDocument().addDocumentListener(d);
				}
			}

			setActive((FieldEditor) e.getSource());

		}

		public void focusLost(FocusEvent e) {
            synchronized (this) {
				if (c != null) {
					c.getDocument().removeDocumentListener(d);
					c = null;
					d = null;
				}
			}
			if (!e.isTemporary())
				parent.updateField(e.getSource());
		}
	};
}
package org.apache.lucene.search;

/**
 * Copyright 2004 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.Serializable;
import java.util.HashMap;
import java.util.Locale;


/**
 * Encapsulates sort criteria for returned hits.
 *
 * <p>The fields used to determine sort order must be carefully chosen.
 * Documents must contain a single term in such a field,
 * and the value of the term should indicate the document's relative position in
 * a given sort order.  The field must be indexed, but should not be tokenized,
 * and does not need to be stored (unless you happen to want it back with the
 * rest of your document data).  In other words:
 *
 * <dl><dd><code>document.add (new Field ("byNumber", Integer.toString(x), false, true, false));</code>
 * </dd></dl>
 *
 * <p><h3>Valid Types of Values</h3>
 *
 * <p>There are three possible kinds of term values which may be put into
 * sorting fields: Integers, Floats, or Strings.  Unless
 * {@link SortField SortField} objects are specified, the type of value
 * in the field is determined by parsing the first term in the field.
 *
 * <p>Integer term values should contain only digits and an optional
 * preceeding negative sign.  Values must be base 10 and in the range
 * <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code> inclusive.
 * Documents which should appear first in the sort
 * should have low value integers, later documents high values
 * (i.e. the documents should be numbered <code>1..n</code> where
 * <code>1</code> is the first and <code>n</code> the last).
 *
 * <p>Float term values should conform to values accepted by
 * {@link Float Float.valueOf(String)} (except that <code>NaN</code>
 * and <code>Infinity</code> are not supported).
 * Documents which should appear first in the sort
 * should have low values, later documents high values.
 *
 * <p>String term values can contain any valid String, but should
 * not be tokenized.  The values are sorted according to their
 * {@link Comparable natural order}.  Note that using this type
 * of term value has higher memory requirements than the other
 * two types.
 *
 * <p><h3>Object Reuse</h3>
 *
 * <p>One of these objects can be
 * used multiple times and the sort order changed between usages.
 *
 * <p>This class is thread safe.
 *
 * <p><h3>Memory Usage</h3>
 *
 * <p>Sorting uses of caches of term values maintained by the
 * internal HitQueue(s).  The cache is static and contains an integer
 * or float array of length <code>IndexReader.maxDoc()</code> for each field
 * name for which a sort is performed.  In other words, the size of the
 * cache in bytes is:
 *
 * <p><code>4 * IndexReader.maxDoc() * (# of different fields actually used to sort)</code>
 *
 * <p>For String fields, the cache is larger: in addition to the
 * above array, the value of every term in the field is kept in memory.
 * If there are many unique terms in the field, this could
 * be quite large.
 *
 * <p>Note that the size of the cache is not affected by how many
 * fields are in the index and <i>might</i> be used to sort - only by
 * the ones actually used to sort a result set.
 *
 * <p>The cache is cleared each time a new <code>IndexReader</code> is
 * passed in, or if the value returned by <code>maxDoc()</code>
 * changes for the current IndexReader.  This class is not set up to
 * be able to efficiently sort hits from more than one index
 * simultaneously.
 *
 * <p>Created: Feb 12, 2004 10:53:57 AM
 *
 * @author  Tim Jones (Nacimiento Software)
 * @since   lucene 1.4
 * @version $Id: Sort.java,v 1.7 2004/04/05 17:23:38 ehatcher Exp $
 */
public class Sort
implements Serializable {

	/** Represents sorting by computed relevance. Using this sort criteria
	 * returns the same results as calling {@link Searcher#search(Query) Searcher#search()}
	 * without a sort criteria, only with slightly more overhead. */
	public static final Sort RELEVANCE = new Sort();

	/** Represents sorting by index order. */
	public static final Sort INDEXORDER = new Sort (SortField.FIELD_DOC);

	// internal representation of the sort criteria
	SortField[] fields;


	/** Sorts by computed relevance.  This is the same sort criteria as
	 * calling {@link Searcher#search(Query) Searcher#search()} without a sort criteria, only with
	 * slightly more overhead. */
	public Sort() {
		this (new SortField[]{SortField.FIELD_SCORE, SortField.FIELD_DOC});
	}


	/** Sorts by the terms in <code>field</code> then by index order (document
	 * number). The type of value in <code>field</code> is determined
	 * automatically.
	 * @see SortField#AUTO
	 */
	public Sort (String field) {
		setSort (field, false);
	}


	/** Sorts possibly in reverse by the terms in <code>field</code> then by
	 * index order (document number). The type of value in <code>field</code> is determined
	 * automatically.
	 * @see SortField#AUTO
	 */
	public Sort (String field, boolean reverse) {
		setSort (field, reverse);
	}


	/** Sorts in succession by the terms in each field.
	 * The type of value in <code>field</code> is determined
	 * automatically.
	 * @see SortField#AUTO
	 */
	public Sort (String[] fields) {
		setSort (fields);
	}


	/** Sorts by the criteria in the given SortField. */
	public Sort (SortField field) {
		setSort (field);
	}


	/** Sorts in succession by the criteria in each SortField. */
	public Sort (SortField[] fields) {
		setSort (fields);
	}


	/** Sets the sort to the terms in <code>field</code> then by index order
	 * (document number). */
	public final void setSort (String field) {
		setSort (field, false);
	}


	/** Sets the sort to the terms in <code>field</code> possibly in reverse,
	 * then by index order (document number). */
	public void setSort (String field, boolean reverse) {
		SortField[] nfields = new SortField[]{
			new SortField (field, SortField.AUTO, reverse),
			SortField.FIELD_DOC
		};
		fields = nfields;
	}


	/** Sets the sort to the terms in each field in succession. */
	public void setSort (String[] fieldnames) {
		final int n = fieldnames.length;
		SortField[] nfields = new SortField[n];
		for (int i = 0; i < n; ++i) {
			nfields[i] = new SortField (fieldnames[i], SortField.AUTO);
		}
		fields = nfields;
	}


	/** Sets the sort to the given criteria. */
	public void setSort (SortField field) {
		this.fields = new SortField[]{field};
	}


	/** Sets the sort to the given criteria in succession. */
	public void setSort (SortField[] fields) {
		this.fields = fields;
	}

  public String toString() {
    StringBuffer buffer = new StringBuffer();

    for (int i = 0; i < fields.length; i++) {
      buffer.append(fields[i].toString());
      if ((i +1) < fields.length)
        buffer.append(',');
    }

    return buffer.toString();
  }


// test sorts in reverse
public void testReverseSort() throws Exception {
	sort.setSort (new SortField[] { new SortField (null, SortField.SCORE, true), SortField.FIELD_DOC });
	assertMatches (full, queryX, sort, "IEGCA");
	assertMatches (full, queryY, sort, "JFHDB");

	sort.setSort (new SortField (null, SortField.DOC, true));
	assertMatches (full, queryX, sort, "IGECA");
	assertMatches (full, queryY, sort, "JHFDB");

	sort.setSort ("int", true);
	assertMatches (full, queryX, sort, "CAEGI");
	assertMatches (full, queryY, sort, "BJFHD");

	sort.setSort ("float", true);
	assertMatches (full, queryX, sort, "AECIG");
	assertMatches (full, queryY, sort, "BFJHD");

	sort.setSort ("string", true);
	assertMatches (full, queryX, sort, "CEGIA");
	assertMatches (full, queryY, sort, "BFHJD");
}


// runs a variety of sorts useful for multisearchers
private void runMultiSorts (Searcher multi) throws Exception {
	sort.setSort (SortField.FIELD_DOC);
	assertMatchesPattern (multi, queryA, sort, "[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}");

	sort.setSort (new SortField ("int", SortField.INT));
	assertMatchesPattern (multi, queryA, sort, "IDHFGJ[ABE]{3}C");

	sort.setSort (new SortField[] {new SortField ("int", SortField.INT), SortField.FIELD_DOC});
	assertMatchesPattern (multi, queryA, sort, "IDHFGJ[AB]{2}EC");

	sort.setSort ("int");
	assertMatchesPattern (multi, queryA, sort, "IDHFGJ[AB]{2}EC");

	sort.setSort (new SortField[] {new SortField ("float", SortField.FLOAT), SortField.FIELD_DOC});
	assertMatchesPattern (multi, queryA, sort, "GDHJ[CI]{2}EFAB");

	sort.setSort ("float");
	assertMatchesPattern (multi, queryA, sort, "GDHJ[CI]{2}EFAB");

	sort.setSort ("string");
	assertMatches (multi, queryA, sort, "DJAIHGFEBC");

	sort.setSort ("int", true);
	assertMatchesPattern (multi, queryA, sort, "C[AB]{2}EJGFHDI");

	sort.setSort ("float", true);
	assertMatchesPattern (multi, queryA, sort, "BAFE[IC]{2}JHDG");

	sort.setSort ("string", true);
	assertMatches (multi, queryA, sort, "CBEFGHIAJD");

	sort.setSort (new SortField[] { new SortField ("string", Locale.US) });
	assertMatches (multi, queryA, sort, "DJAIHGFEBC");

	sort.setSort (new SortField[] { new SortField ("string", Locale.US, true) });
	assertMatches (multi, queryA, sort, "CBEFGHIAJD");

	sort.setSort (new String[] {"int","float"});
	assertMatches (multi, queryA, sort, "IDHFGJEABC");

	sort.setSort (new String[] {"float","string"});
	assertMatches (multi, queryA, sort, "GDHJICEFAB");

	sort.setSort ("int");
	assertMatches (multi, queryF, sort, "IZJ");

	sort.setSort ("int", true);
	assertMatches (multi, queryF, sort, "JZI");

	sort.setSort ("float");
	assertMatches (multi, queryF, sort, "ZJI");

	sort.setSort ("string");
	assertMatches (multi, queryF, sort, "ZJI");

	sort.setSort ("string", true);
	assertMatches (multi, queryF, sort, "IJZ");
}


// test the sorts by score and document number
public void testBuiltInSorts() throws Exception {
	sort = new Sort();
	assertMatches (full, queryX, sort, "ACEGI");
	assertMatches (full, queryY, sort, "BDFHJ");

	sort.setSort(SortField.FIELD_DOC);
	assertMatches (full, queryX, sort, "ACEGI");
	assertMatches (full, queryY, sort, "BDFHJ");
}


// test custom search when remote
public void testRemoteCustomSort() throws Exception {
	Searchable searcher = getRemote();
	MultiSearcher multi = new MultiSearcher (new Searchable[] { searcher });
	sort.setSort (new SortField ("custom", SampleComparable.getComparatorSource()));
	assertMatches (multi, queryX, sort, "CAIEG");
	sort.setSort (new SortField ("custom", SampleComparable.getComparatorSource(), true));
	assertMatches (multi, queryY, sort, "HJDBF");
	SortComparator custom = SampleComparable.getComparator();
	sort.setSort (new SortField ("custom", custom));
	assertMatches (multi, queryX, sort, "CAIEG");
	sort.setSort (new SortField ("custom", custom, true));
	assertMatches (multi, queryY, sort, "HJDBF");
}


// test that the relevancy scores are the same even if
// hits are sorted
public void testNormalizedScores() throws Exception {

	// capture relevancy scores
	HashMap scoresX = getScores (full.search (queryX));
	HashMap scoresY = getScores (full.search (queryY));
	HashMap scoresA = getScores (full.search (queryA));

	// we'll test searching locally, remote and multi
	// note: the multi test depends on each separate index containing
	// the same documents as our local index, so the computed normalization
	// will be the same.  so we make a multi searcher over two equal document
	// sets - not realistic, but necessary for testing.
	MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });
	MultiSearcher multi  = new MultiSearcher (new Searchable[] { full, full });

	// change sorting and make sure relevancy stays the same

	sort = new Sort();
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

	sort.setSort(SortField.FIELD_DOC);
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

	sort.setSort ("int");
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

	sort.setSort ("float");
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

	sort.setSort ("string");
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

	sort.setSort (new String[] {"int","float"});
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

	sort.setSort (new SortField[] { new SortField ("int", true), new SortField (null, SortField.DOC, true) });
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

	sort.setSort (new String[] {"float","string"});
	assertSameValues (scoresX, getScores(full.search(queryX,sort)));
	assertSameValues (scoresX, getScores(remote.search(queryX,sort)));
	assertSameValues (scoresX, getScores(multi.search(queryX,sort)));
	assertSameValues (scoresY, getScores(full.search(queryY,sort)));
	assertSameValues (scoresY, getScores(remote.search(queryY,sort)));
	assertSameValues (scoresY, getScores(multi.search(queryY,sort)));
	assertSameValues (scoresA, getScores(full.search(queryA,sort)));
	assertSameValues (scoresA, getScores(remote.search(queryA,sort)));
	assertSameValues (scoresA, getScores(multi.search(queryA,sort)));

}


// test sorts using a series of fields
public void testSortCombos() throws Exception {
	sort.setSort (new String[] {"int","float"});
	assertMatches (full, queryX, sort, "IGEAC");

	sort.setSort (new SortField[] { new SortField ("int", true), new SortField (null, SortField.DOC, true) });
	assertMatches (full, queryX, sort, "CEAGI");

	sort.setSort (new String[] {"float","string"});
	assertMatches (full, queryX, sort, "GICEA");
}


// test sorts where the type of field is specified
public void testTypedSort() throws Exception {
	sort.setSort (new SortField[] { new SortField ("int", SortField.INT), SortField.FIELD_DOC });
	assertMatches (full, queryX, sort, "IGAEC");
	assertMatches (full, queryY, sort, "DHFJB");

	sort.setSort (new SortField[] { new SortField ("float", SortField.FLOAT), SortField.FIELD_DOC });
	assertMatches (full, queryX, sort, "GCIEA");
	assertMatches (full, queryY, sort, "DHJFB");

	sort.setSort (new SortField[] { new SortField ("string", SortField.STRING), SortField.FIELD_DOC });
	assertMatches (full, queryX, sort, "AIGEC");
	assertMatches (full, queryY, sort, "DJHFB");
}


// test sorting when the sort field is empty (undefined) for some of the documents
public void testEmptyFieldSort() throws Exception {
	sort.setSort ("string");
	assertMatches (full, queryF, sort, "ZJI");

	sort.setSort ("string", true);
	assertMatches (full, queryF, sort, "IJZ");

	sort.setSort ("int");
	assertMatches (full, queryF, sort, "IZJ");

	sort.setSort ("int", true);
	assertMatches (full, queryF, sort, "JZI");

	sort.setSort ("float");
	assertMatches (full, queryF, sort, "ZJI");

	sort.setSort ("float", true);
	assertMatches (full, queryF, sort, "IJZ");
}


// test sorts when there's nothing in the index
public void testEmptyIndex() throws Exception {
	Searcher empty = getEmptyIndex();

	sort = new Sort();
	assertMatches (empty, queryX, sort, "");

	sort.setSort(SortField.FIELD_DOC);
	assertMatches (empty, queryX, sort, "");

	sort.setSort (new SortField[] { new SortField ("int", SortField.INT), SortField.FIELD_DOC });
	assertMatches (empty, queryX, sort, "");

	sort.setSort (new SortField[] { new SortField ("string", SortField.STRING, true), SortField.FIELD_DOC });
	assertMatches (empty, queryX, sort, "");

	sort.setSort (new SortField[] { new SortField ("float", SortField.FLOAT), new SortField ("string", SortField.STRING) });
	assertMatches (empty, queryX, sort, "");
}
}

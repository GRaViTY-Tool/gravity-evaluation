/***************************************************************************
                           GanttTask.java  -  description
                             -------------------
    begin                : dec 2002
    copyright            : (C) 2002 by Thomas Alexandre
    email                : alexthomas(at)ganttproject.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

package net.sourceforge.ganttproject;

import net.sourceforge.ganttproject.gui.GanttDialogInfo;
import net.sourceforge.ganttproject.gui.GanttDialogProperties;
import net.sourceforge.ganttproject.gui.TestGanttRolloverButton;
import net.sourceforge.ganttproject.shape.JPaintCombo;
import net.sourceforge.ganttproject.shape.ShapeConstants;
import net.sourceforge.ganttproject.task.ResourceAssignment;
import net.sourceforge.ganttproject.task.TaskImpl;
import net.sourceforge.ganttproject.task.TaskManager;
import net.sourceforge.ganttproject.task.TaskMutator;
import net.sourceforge.ganttproject.task.dependency.TaskDependency;
import net.sourceforge.ganttproject.time.TimeUnit;
import net.sourceforge.ganttproject.time.TimeUnitManager;
import net.sourceforge.ganttproject.util.BrowserControl;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 * Class that generate a task
 */

public class GanttTask extends TaskImpl

    implements Serializable {

  public static int LOW = 0;

  public static int NORMAL = 1;

  public static int HIGHT = 2;


/////////////////////////////////////////////////////////////////////////////////

  /** Constructor */

  public GanttTask(String name, GanttCalendar start, long length, TaskManager taskManager) {
      super(taskManager);
      TimeUnitManager timeManager = getTimeUnitManager();
      TaskMutator mutator = createMutator();
      mutator.setName(name);
      mutator.setStart(start);
      mutator.setDuration(taskManager.createLength(timeManager.getTimeUnit(TimeUnit.DAY), length));
      mutator.commit();
      enableEvents(true);
  }


    private GanttTask(GanttTask copy) {
        super(copy);
//        for (int i = 0; i < getPredecessorsOld().size(); i++) {
//          GanttTaskRelationship tempRel = (GanttTaskRelationship) ( (
//              GanttTaskRelationship) getPredecessorsOld().get(i)).clone();
//          addPredecessor(tempRel);
//        }

//        for (int i = 0; i < successors.size(); i++) {
//          GanttTaskRelationship tempRel = (GanttTaskRelationship) ( (
//              GanttTaskRelationship) successors.get(i)).clone();
//          addSuccessor(tempRel);
//        }
        enableEvents(true);

    }


  /**
   * @return a clone of the Task
   */
  public GanttTask Clone() {
      return new GanttTask(this);
  }

  /** Return the name. */
  public String toString() {
    return getName();
    //return getName();
  }

  /** Return the shape of the task */


  /** Return the duration */

  public int getLength() {

    return (int) getDuration().getLength();

  }


  /** Change the duration */
  public void setLength(int l) {
      TaskMutator mutator = createMutator();
      mutator.setDuration(getManager().createLength(getDuration().getTimeUnit(), l));
      mutator.commit();
  }



  /**whether the time relationship between this task and other has been checked. property will be used in scheduling check*/

  private boolean checked = false;


  public Vector getPredecessorsOld() {
      TaskDependency[] deps = getDependenciesAsDependant().toArray();
      Vector result = new Vector(deps.length);
      for (int i=0; i<deps.length; i++) {
          TaskDependency next = deps[i];
          GanttTaskRelationship rel = new GanttTaskRelationship(next.getDependee().getTaskID(), getTaskID(), next.getConstraint().getID(), getManager());
          result.add(rel);
      }
    return result;
  }

    public Vector getSuccessorsOld() {
        TaskDependency[] deps = getDependenciesAsDependee().toArray();
        Vector result = new Vector(deps.length);
        for (int i=0; i<deps.length; i++) {
            TaskDependency next = deps[i];
            GanttTaskRelationship rel = new GanttTaskRelationship(getTaskID(), next.getDependant().getTaskID(), next.getConstraint().getID(), getManager());
            result.add(rel);
        }
        return result;
    }


  /** Unlink the task from all relationship */
  public void unlink () {
      getDependencies().clear();

  }
  
  /**return true if the realtionship between this task and others has been checked*/

  public boolean isChecked() {

    return checked;

  }

  /**set the checked state of task: true if the relationship has been check. or else, false*/

  public void setChecked(boolean checked) {

    this.checked = checked;

  }

  /**
       *set the task ID. the uniquness of ID should be check before using this method
   * @param taskID
   */
  public void setTaskID(int taskID) {
      setTaskIDHack(taskID);
  }


/** @return the list of the assignment for the resources. */
private String getAssignments(GanttTask task)
{
	String res = "";
	ResourceAssignment[] assignment = task.getAssignments();
	for(int i=0;i<assignment.length;i++)
		res+=(assignment[i].getResource()+(i==assignment.length-1?"":
				csvOptions.sSeparatedChar.equals(";")?",":";"));
	return res;
}


/**@return the name of task with the correct level.*/
private String getName(DefaultMutableTreeNode node, GanttTask task)
{
	if(bFixedSize) return task.getName();
	String res="";
	for(int i=0;i<node.getLevel();i++)
		res+="  ";
	return res+task.getName();
}


/**@return the link of the task. */
private String getWebLink(GanttTask task)
{
	return (task.getWebLink().equals("http://")?"":task.getWebLink());
}


/** Write all tasks. */
	private void writeTasks(OutputStreamWriter out) throws IOException 
	{
//		parse all tasks	
	    for(Iterator it=lot.iterator(); it.hasNext();)
		{
			DefaultMutableTreeNode node = (DefaultMutableTreeNode) it.next();
			if(!node.isRoot())
			{
				GanttTask task = (GanttTask)(node.getUserObject());
				
				//ID
				if(csvOptions.bExportTaskID)
					out.write(correctField(""+task.getTaskID())+
							(bFixedSize?"":csvOptions.sSeparatedChar));
					
				//Name
				if(csvOptions.bExportTaskName)
					out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
							correctField(getName(node, task))+
							(bFixedSize?"":csvOptions.sSeparatedTextChar+
							csvOptions.sSeparatedChar));
				
				//Start Date
				if(csvOptions.bExportTaskStartDate)
					out.write(correctField(task.getStart().toString())+
							(bFixedSize?"":csvOptions.sSeparatedChar));
				
				//End Date
				if(csvOptions.bExportTaskEndDate)
					out.write(correctField(task.getEnd().toString())+
							(bFixedSize?"":csvOptions.sSeparatedChar));
				
				//Duration
				if(csvOptions.bExportTaskDuration)
					out.write(correctField(""+task.getLength())+
							(bFixedSize?"":csvOptions.sSeparatedChar));
				
				//Percent complete
				if(csvOptions.bExportTaskPercent)
					out.write(correctField(""+task.getCompletionPercentage())+
							(bFixedSize?"":csvOptions.sSeparatedChar));				

				//Web Link
				if(csvOptions.bExportTaskWebLink)
					out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
							correctField(getWebLink(task))+
							(bFixedSize?"":csvOptions.sSeparatedTextChar+
							csvOptions.sSeparatedChar));				
				
				//associated resources
				if(csvOptions.bExportTaskResources) {
					out.write((bFixedSize?"":csvOptions.sSeparatedTextChar));					
					out.write(correctField(getAssignments(task)));					
					out.write((bFixedSize?"":csvOptions.sSeparatedTextChar+
							csvOptions.sSeparatedChar));
				}
				
				//Notes
				if(csvOptions.bExportTaskNotes)
					out.write((bFixedSize?"":csvOptions.sSeparatedTextChar)+
							correctField(task.getNotes())+
							(bFixedSize?"":csvOptions.sSeparatedTextChar+
							csvOptions.sSeparatedChar));
				
				out.write("\n");
			}
		}	    
	} //end of write tasks


/**Construct the general panel*/
  private void constructGeneralPanel() {
    generalPanel = new JPanel(new GridBagLayout());
    //first row
    nameLabel1 = new JLabel(language.getText("name") + ":");
    nameField1 = new JTextField(20);
    nameField1.setName("name_of_task");
    durationLabel1 = new JLabel(language.getText("length") + ":");
    durationField1 = new JTextField(8);
    durationField1.setName("length");
    firstRowPanel1 = new JPanel(flowL);
    setFirstRow(firstRowPanel1, gbc, nameLabel1, nameField1, durationLabel1,
                durationField1);
    //second row
    percentCompleteLabel1 = new JLabel(language.getText("advancement")); //Progress
    SpinnerNumberModel spinnerModel = new SpinnerNumberModel(0, 0, 100, 1);
    percentCompleteSlider = new JSpinner(spinnerModel);


    secondRowPanel1 = new JPanel(flowL);
    secondRowPanel1.add(percentCompleteLabel1);
    //secondRowPanel1.add(percentCompleteField1);
    secondRowPanel1.add(percentCompleteSlider);
    priorityLabel1 = new JLabel(language.getText("priority"));
    secondRowPanel1.add(priorityLabel1);
    priorityComboBox = new JComboBox();
    priorityComboBox.addItem(language.getText("low"));
    priorityComboBox.addItem(language.getText("normal"));
    priorityComboBox.addItem(language.getText("hight"));
    priorityComboBox.setEditable(false);

    secondRowPanel1.add(priorityComboBox);

    //third row

    startDateLabel1 = new JLabel(language.getText("dateOfBegining") + ":");
    startDateField1 = new JTextField(12);
    startDateField1.setEditable(false);
    finishDateLabel1 = new JLabel(language.getText("dateOfEnd") + ":");

    finishDateField1 = new JTextField(12);
    finishDateField1.setEditable(false);

    ImageIcon icon = new ImageIcon(getClass().getResource("/icons/calendar_16.gif"));

    startDateButton1 = new TestGanttRolloverButton(icon);
    startDateButton1.setName("start");
	startDateButton1.setToolTipText(GanttProject.getToolTip(language.getText("chooseDate")));
    finishDateButton1 = new TestGanttRolloverButton(icon);
    finishDateButton1.setName("finish");
	finishDateButton1.setToolTipText(GanttProject.getToolTip(language.getText("chooseDate")));
    thirdRowPanel1 = new JPanel(flowL);
    thirdRowPanel1.setBorder(new TitledBorder(new EtchedBorder(), language.getText("date")));
    thirdRowPanel1.add(startDateLabel1);
    thirdRowPanel1.add(startDateField1);
    thirdRowPanel1.add(startDateButton1);
    thirdRowPanel1.add(finishDateLabel1);
    thirdRowPanel1.add(finishDateField1);
    thirdRowPanel1.add(finishDateButton1);

    //fourth row

    mileStoneCheckBox1 = new JCheckBox(language.getText("meetingPoint")); //Milestone
    lastRowPanel1 = new JPanel(flowL);
    lastRowPanel1.add(mileStoneCheckBox1);
    
    shapeComboBox = new JPaintCombo(ShapeConstants.PATTERN_LIST);


    JPanel shapePanel = new JPanel();
    shapePanel.setLayout(new BorderLayout());
    JLabel lshape = new JLabel("  "+language.getText("shape")+" ");
    shapeComboBox = new JPaintCombo(ShapeConstants.PATTERN_LIST);

    shapePanel.add(lshape, BorderLayout.WEST);
    shapePanel.add(shapeComboBox, BorderLayout.CENTER);
    
    
    colorButton = new JButton(language.getText("colorButton"));
    colorButton.setBackground(selectedTask.getColor());
    final String colorChooserTitle = language.getText("selectColor");
    colorButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        JDialog dialog;
        dialog = JColorChooser.createDialog(parent, colorChooserTitle, true,
                                            GanttDialogProperties.colorChooser,
                                            new ActionListener() {
          public void actionPerformed(ActionEvent e) {
            colorButton.setBackground(GanttDialogProperties.colorChooser.
                                      getColor());
          }
        }

        , new ActionListener() {
          public void actionPerformed(ActionEvent e) {
            // nothing to do for "Cancel"
          }
        });

		/*AbstractColorChooserPanel[] panels = GanttDialogProperties.colorChooser.getChooserPanels();
        GanttDialogProperties.colorChooser.removeChooserPanel(panels[0]);
        GanttDialogProperties.colorChooser.addChooserPanel(panels[0]);*/
        
        GanttDialogProperties.colorChooser.setColor(colorButton.getBackground());        
        dialog.show();
      }
    });

    colorSpace = new JButton(language.getText("defaultColor"));
    colorSpace.setBackground(GanttGraphicArea.taskDefaultColor);
    colorSpace.setToolTipText(GanttProject.getToolTip(language.getText("resetColor")));
    colorSpace.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        colorButton.setBackground(GanttGraphicArea.taskDefaultColor);
      }
    });

    colorPanel = new JPanel();
    colorPanel.setLayout(new BorderLayout());
    colorPanel.add(colorButton, "West");
    colorPanel.add(colorSpace, "Center");
    colorPanel.add( shapePanel, BorderLayout.EAST);
    lastRowPanel1.add(colorPanel);

    //---Set GridBagConstraints constant
    gbc.anchor = GridBagConstraints.WEST;
    gbc.insets.right = 15;
    gbc.insets.left = 10;
    gbc.insets.top = 10;
    addUsingGBL(generalPanel, firstRowPanel1, gbc, 0, 0, 1, 1);
    addUsingGBL(generalPanel, secondRowPanel1, gbc, 0, 1, 1, 1);
    addUsingGBL(generalPanel, thirdRowPanel1, gbc, 0, 2, 1, 1);
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.gridwidth = 1;
    gbc.gridheight = GridBagConstraints.RELATIVE;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.weighty = 1;
    generalPanel.add(lastRowPanel1, gbc);

    //The panel for the web link
    webLinkPanel = new JPanel(flowL);
    lblWebLink = new JLabel(language.getText("webLink"));
    webLinkPanel.add(lblWebLink);
    tfWebLink = new JTextField(30);
    webLinkPanel.add(tfWebLink);
    bWebLink = new TestGanttRolloverButton(
    			new ImageIcon(getClass().getResource("/icons/web_16.gif")));
    bWebLink.setToolTipText(GanttProject.getToolTip(language.getText("openWebLink")));
    webLinkPanel.add(bWebLink);
    
    bWebLink.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			//link to open the web link
			try{
				if (!BrowserControl.displayURL(tfWebLink.getText())) {
					GanttDialogInfo gdi = new GanttDialogInfo(null,
						GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, 
						language.getText("msg4"), 
						language.getText("error"));							
					gdi.show();
				}
			} catch (Exception ex) {
			}
		}
	});
    
    gbc.gridy = 4;
    generalPanel.add(webLinkPanel, gbc);
    
  }
}

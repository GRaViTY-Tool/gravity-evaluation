/* Generated By:JJTree: Do not edit this line. ASTName.java */

package net.sourceforge.pmd.ast;

import java.util.Iterator;
import java.util.List;

import net.sourceforge.pmd.symboltable.NameDeclaration;
import net.sourceforge.pmd.symboltable.VariableNameDeclaration;

public class ASTName extends SimpleJavaNode {
    public ASTName(int id) {
        super(id);
    }

    public ASTName(JavaParser p, int id) {
        super(p, id);
    }

    private NameDeclaration nd;

    public void setNameDeclaration(NameDeclaration nd) {
        this.nd = nd;
    }

    public NameDeclaration getNameDeclaration() {
        return this.nd;
    }


    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

	private boolean isAllocatedStringBuffer(ASTAdditiveExpression node) {
	    ASTAllocationExpression ao = (ASTAllocationExpression) node.getFirstParentOfType(ASTAllocationExpression.class);
	    if (ao == null) {
	        return false;
	    }
	    // note that the child can be an ArrayDimsAndInits, for example, from java.lang.FloatingDecimal:  t = new int[ nWords+wordcount+1 ];
	    ASTClassOrInterfaceType an = (ASTClassOrInterfaceType) ao.getFirstChildOfType(ASTClassOrInterfaceType.class);
	    return an != null && (an.getImage().endsWith("StringBuffer") || an.getImage().endsWith("StringBuilder"));
	}

	public Object visit(ASTAdditiveExpression node, Object data) {
	    ASTBlockStatement bs = (ASTBlockStatement) node.getFirstParentOfType(ASTBlockStatement.class);
	    if (bs == null) {
	        return data;
	    }
	
	    int immediateLiterals = 0;
	    List nodes = node.findChildrenOfType(ASTLiteral.class);
	    for (Iterator i = nodes.iterator();i.hasNext();) {
	        ASTLiteral literal = (ASTLiteral)i.next();
	        if (literal.jjtGetParent().jjtGetParent().jjtGetParent() instanceof ASTAdditiveExpression) {
	            immediateLiterals++;
	        }
	        try {
	            Integer.parseInt(literal.getImage());
	            return data;
	        } catch (NumberFormatException nfe) {
	            // NFE means new StringBuffer("a" + "b"), want to flag those
	        }
	    }
	
	    if (immediateLiterals > 1) {
	        return data;
	    }
	
	    // if literal + public static final, return
	    List nameNodes = node.findChildrenOfType(ASTName.class);
	    for (Iterator i = nameNodes.iterator(); i.hasNext();) {
	        ASTName name = (ASTName)i.next();
	        if (name.getNameDeclaration() instanceof VariableNameDeclaration) {
	            VariableNameDeclaration vnd = (VariableNameDeclaration)name.getNameDeclaration();
	            if (vnd.getAccessNodeParent().isFinal() && vnd.getAccessNodeParent().isStatic()) {
	                return data;
	            }
	        }
	    }
	
	
	    if (bs.isAllocation()) {
	        if (isAllocatedStringBuffer(node)) {
	            addViolation(data, node);
	        }
	    } else if (isInStringBufferOperation(node, 6, "append")) {
	        addViolation(data, node);
	    }
	    return data;
	}

	// TODO move this method to SimpleNode
	private static boolean xParentIsStatementExpression(SimpleNode node, int length) {
	    Node curr = node;
	    for (int i=0; i<length; i++) {
	        if (node.jjtGetParent() == null) {
	            return false;
	        }
	        curr = curr.jjtGetParent();
	    }
	    return curr instanceof ASTStatementExpression;
	}

}

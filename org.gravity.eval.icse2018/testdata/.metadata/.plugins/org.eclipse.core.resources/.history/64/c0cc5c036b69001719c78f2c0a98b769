/* Generated By:JJTree: Do not edit this line. ASTConditionalExpression.java */

package net.sourceforge.pmd.ast;

import net.sourceforge.pmd.util.NumericConstants;

public class ASTConditionalExpression extends SimpleJavaNode {
    public ASTConditionalExpression(int id) {
        super(id);
    }

    public ASTConditionalExpression(JavaParser p, int id) {
        super(p, id);
    }

    private boolean isTernary;

    public void setTernary() {
        isTernary = true;
    }

    public boolean isTernary() {
        return this.isTernary;
    }

    /**
     * Accept the visitor. *
     */
    public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

	public Object visit(ASTConditionalExpression node, Object data) {
	    if ( node.isTernary() ) {
	//      int npath = 0;
	//
	//      for ( int i = 0; i < node.jjtGetNumChildren(); i++ ) {
	//        SimpleJavaNode simpleNode = (SimpleJavaNode) node.jjtGetChild( i );
	//        Integer complexity = (Integer) simpleNode.jjtAccept( this, data );
	//        npath += complexity.intValue();
	//      }
	    	int npath = complexitySumOf(node, 0, data);
	    	
	      npath += 2;
	      return new Integer( npath );
	    }
	    return NumericConstants.ONE;
	  }
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.log4j;

import junit.framework.TestCase;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.FileInputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.log4j.util.Compare;

/**
   Exhaustive test of the DailyRollingFileAppender compute algorithm.

   @author Ceki G&uuml;lc&uuml;
   @author Curt Arnold
 */
public class DRFATestCase extends TestCase {

    /**
     * Create new test.
     * @param name test name.
     */
  public DRFATestCase(final String name) {
    super(name);
  }

    /**
     * Reset configuration after every test.
     */
  public void tearDown() {
      LogManager.resetConfiguration();
  }

    /**
     * Common test code for 3 parameter constructor.
     *
     * @throws IOException if IOException during test.
     */
   public void test3Param(final String datePattern,
                          final String filename) throws IOException {
       Layout layout = new SimpleLayout();
       DailyRollingFileAppender appender =
               new DailyRollingFileAppender(layout, filename, datePattern);
       assertEquals(datePattern, appender.getDatePattern());
       Logger root = Logger.getRootLogger();
       root.addAppender(appender);
       root.info("Hello, World");
       assertTrue(new File(filename).exists());
    }

    /**
     * Creates an appender with an unrecognized top-of-year pattern.
     *
     * @throws IOException if IOException during test.
     */
    public void testTopOfYear() throws IOException {
        try {
            test3Param("'.'yyyy", "output/drfa_topOfYear.log");
            fail("Expected illegal state exception.");
        } catch(IllegalStateException ex) {
            assertNotNull(ex);
        }
    }

    /**
     * Creates an appender with a top-of-month pattern.
     *
     * @throws IOException if IOException during test.
     */
    public void testTopOfMonth() throws IOException {
        test3Param("'.'yyyy-MM", "output/drfa_topOfMonth.log");
    }


    /**
     * Creates an appender with a top-of-week pattern.
     *
     * @throws IOException if IOException during test.
     */
    public void testTopOfWeek() throws IOException {
        test3Param("'.'yyyy-w", "output/drfa_topOfWeek.log");
    }

    /**
     * Creates an appender with a top-of-day pattern.
     *
     * @throws IOException if IOException during test.
     */
    public void testTopOfDay() throws IOException {
        test3Param("'.'yyyy-MM-dd", "output/drfa_topOfDay.log");
    }


    /**
     * Creates an appender with a half day pattern.
     *
     * @throws IOException if IOException during test.
     */
    public void testHalfDay() throws IOException {
        test3Param("'.'yyyy-MM-dd-a", "output/drfa_halfDay.log");
    }

    /**
     * Creates an appender with a top-of-hour pattern.
     *
     * @throws IOException if IOException during test.
     */
    public void testTopOfHour() throws IOException {
        test3Param("'.'yyyy-MM-dd-HH", "output/drfa_topOfHour.log");
    }

    /**
     * Creates an appender with a top-of-day pattern.
     *
     * @throws IOException if IOException during test.
     */
    public void testTopOfMinute() throws IOException {
        test3Param("'.'yyyy-MM-dd-HH-mm", "output/drfa_topOfMinute.log");
    }

    /**
     * Naive append method to combine rollover fragments.
     * @param combined stream to which source is appended.
     * @param source stream containing bytes to append.
     * @param buf byte array to use in transfer.
     * @throws IOException if io error during operation.
     */
    private static void append(final FileOutputStream combined,
                               final FileInputStream source,
                               final byte[] buf) throws IOException {
        int count1 = source.read(buf);
        if (count1 > 0) {
            combined.write(buf, 0, count1);
        }
        source.close();
    }

    /**
     * Tests rollOver when log file is unabled to be renamed.
     * See bug 43374.
     *
     * @throws IOException if io error.
     * @throws InterruptedException if test interrupted while waiting for the start of the next minute.
     */
    public void testBlockedRollover() throws IOException, InterruptedException {
        Layout layout = new SimpleLayout();
        String filename = "output/drfa_blockedRollover.log";
        String pattern = "'.'yyyy-MM-dd-HH-mm";


        Date start = new Date();
        DailyRollingFileAppender appender =
                new DailyRollingFileAppender(layout,
                        filename,
                        pattern);
        appender.setAppend(false);
        Logger root = Logger.getRootLogger();
        root.addAppender(appender);
        //
        //   open next two anticipated rollover file names
        //
        File block1 = new File(filename + new SimpleDateFormat(pattern).format(start));
        File block2 = new File(filename + new SimpleDateFormat(pattern).format(
                new Date(start.getTime() + 60000)));
        FileOutputStream os1 = new FileOutputStream(block1);
        FileOutputStream os2 = new FileOutputStream(block2);
        root.info("Prior to rollover");
        //
        //   sleep until three seconds into next minute
        //
        Thread.sleep(63000 - (start.getTime() % 60000));
        //
        //  should trigger failed rollover
        //
        root.info("Rollover attempt while blocked");
        os1.close();
        os2.close();
        root.info("Message after block removed");
        appender.close();
        //
        //   combine base file and potential rollovers
        //      since rollover may or may not have been blocked
        //      depending on platform.
        //
        String combinedFilename = "output/drfa_blockedRollover.combined";
        FileOutputStream combined = new FileOutputStream(combinedFilename);
        byte[] buf = new byte[500];
        append(combined, new FileInputStream(block1), buf);
        append(combined, new FileInputStream(block2), buf);
        append(combined, new FileInputStream(filename), buf);
        combined.close();
        assertTrue(Compare.compare(combinedFilename,
                "witness/drfa_blockedRollover.log"));
    }

    /** Check that the computed rollover period for a pattern containing a week as the finest unit is set to be
     * a week.  Due to a locale mismatch this was incorrect in non-English locales.  See bug 40888.
     *
     */
    public void testWeeklyRollover() {
        DailyRollingFileAppender drfa = new DailyRollingFileAppender();
    	drfa.setDatePattern("'.'yyyy-ww");
		int checkPeriod = drfa.computeCheckPeriod();
		assertEquals(DailyRollingFileAppender.TOP_OF_WEEK, checkPeriod);
    }


}
